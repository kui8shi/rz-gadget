/* automatically generated by rust-bindgen 0.65.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _FILE_OFFSET_BITS: u32 = 64;
pub const RZ_VERSION_MAJOR: u32 = 0;
pub const RZ_VERSION_MINOR: u32 = 6;
pub const RZ_VERSION_PATCH: u32 = 0;
pub const RZ_VERSION_NUMBER: u32 = 6000;
pub const RZ_VERSION: &[u8; 6usize] = b"0.6.0\0";
pub const RZ_CHECKS_LEVEL: u32 = 2;
pub const DEBUGGER: u32 = 1;
pub const HAVE_THREADS: u32 = 1;
pub const HAVE_PTHREAD: u32 = 1;
pub const HAVE_LZMA: u32 = 1;
pub const HAVE_ZLIB: u32 = 1;
pub const HAVE_DECL_ADDR_NO_RANDOMIZE: u32 = 1;
pub const HAVE_DECL_PROCCTL_ASLR_CTL: u32 = 0;
pub const HAVE_ARC4RANDOM_UNIFORM: u32 = 0;
pub const HAVE_EXPLICIT_BZERO: u32 = 1;
pub const HAVE_EXPLICIT_MEMSET: u32 = 0;
pub const HAVE_CLOCK_NANOSLEEP: u32 = 1;
pub const HAVE_SIGACTION: u32 = 1;
pub const HAVE_PIPE: u32 = 1;
pub const HAVE_EXECV: u32 = 1;
pub const HAVE_EXECVE: u32 = 1;
pub const HAVE_EXECVP: u32 = 1;
pub const HAVE_EXECL: u32 = 1;
pub const HAVE_SYSTEM: u32 = 1;
pub const HAVE_REALPATH: u32 = 1;
pub const HAVE_PIPE2: u32 = 1;
pub const HAVE_ENVIRON: u32 = 1;
pub const HAVE_OPENPTY: u32 = 1;
pub const HAVE_FORKPTY: u32 = 1;
pub const HAVE_LOGIN_TTY: u32 = 1;
pub const HAVE_SHM_OPEN: u32 = 1;
pub const HAVE_LIB_MAGIC: u32 = 0;
pub const USE_LIB_MAGIC: u32 = 0;
pub const HAVE_LIB_XXHASH: u32 = 1;
pub const USE_LIB_XXHASH: u32 = 1;
pub const HAVE_LIB_SSL: u32 = 0;
pub const HAVE_PTRACE: u32 = 1;
pub const USE_PTRACE_WRAP: u32 = 1;
pub const HAVE_FORK: u32 = 1;
pub const HAVE_STRLCPY: u32 = 0;
pub const HAVE_STRNLEN: u32 = 1;
pub const WANT_DYLINK: u32 = 1;
pub const WITH_GPL: u32 = 1;
pub const HAVE_JEMALLOC: u32 = 1;
pub const IS_IOS: u32 = 0;
pub const RZ_BUILD_DEBUG: u32 = 1;
pub const WITH_SWIFT_DEMANGLER: u32 = 1;
pub const HAVE_COPYFILE: u32 = 0;
pub const HAVE_COPY_FILE_RANGE: u32 = 1;
pub const HAVE_BACKTRACE: u32 = 1;
pub const HAVE___BUILTIN_BSWAP16: u32 = 1;
pub const HAVE___BUILTIN_BSWAP32: u32 = 1;
pub const HAVE___BUILTIN_BSWAP64: u32 = 1;
pub const HAVE_POSIX_MEMALIGN: u32 = 1;
pub const HAVE__ALIGNED_MALLOC: u32 = 0;
pub const HAVE_HEADER_LINUX_ASHMEM_H: u32 = 0;
pub const HAVE_HEADER_SYS_SHM_H: u32 = 1;
pub const HAVE_HEADER_SYS_IPC_H: u32 = 1;
pub const HAVE_HEADER_SYS_MMAN_H: u32 = 1;
pub const HAVE_HEADER_INTTYPES_H: u32 = 1;
pub const RZ_IS_PORTABLE: u32 = 0;
pub const RZ_BINDIR_DEPTH: u32 = 1;
pub const RZ_PREFIX: &[u8; 11usize] = b"/usr/local\0";
pub const RZ_BINDIR: &[u8; 4usize] = b"bin\0";
pub const RZ_LIBDIR: &[u8; 21usize] = b"lib/x86_64-linux-gnu\0";
pub const RZ_INCDIR: &[u8; 14usize] = b"include/librz\0";
pub const RZ_DATDIR: &[u8; 6usize] = b"share\0";
pub const RZ_WWWROOT: &[u8; 16usize] = b"share/rizin/www\0";
pub const RZ_PLUGINS: &[u8; 35usize] = b"lib/x86_64-linux-gnu/rizin/plugins\0";
pub const RZ_DATADIR: &[u8; 12usize] = b"share/rizin\0";
pub const RZ_SDB: &[u8; 12usize] = b"share/rizin\0";
pub const RZ_SIGDB: &[u8; 18usize] = b"share/rizin/sigdb\0";
pub const RZ_THEMES: &[u8; 17usize] = b"share/rizin/cons\0";
pub const RZ_FORTUNES: &[u8; 21usize] = b"share/rizin/fortunes\0";
pub const RZ_FLAGS: &[u8; 17usize] = b"share/rizin/flag\0";
pub const RZ_HUD: &[u8; 16usize] = b"share/rizin/hud\0";
pub const RZ_HOME_PREFIX: &[u8; 7usize] = b".local\0";
pub const RZ_HOME_RC: &[u8; 9usize] = b".rizinrc\0";
pub const _ASSERT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_FILE_OFFSET64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2usize] = b"l\0";
pub const PRId8: &[u8; 2usize] = b"d\0";
pub const PRId16: &[u8; 2usize] = b"d\0";
pub const PRId32: &[u8; 2usize] = b"d\0";
pub const PRId64: &[u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &[u8; 2usize] = b"d\0";
pub const PRIdFAST16: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &[u8; 3usize] = b"ld\0";
pub const PRIi8: &[u8; 2usize] = b"i\0";
pub const PRIi16: &[u8; 2usize] = b"i\0";
pub const PRIi32: &[u8; 2usize] = b"i\0";
pub const PRIi64: &[u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &[u8; 3usize] = b"li\0";
pub const PRIiFAST8: &[u8; 2usize] = b"i\0";
pub const PRIiFAST16: &[u8; 3usize] = b"li\0";
pub const PRIiFAST32: &[u8; 3usize] = b"li\0";
pub const PRIiFAST64: &[u8; 3usize] = b"li\0";
pub const PRIo8: &[u8; 2usize] = b"o\0";
pub const PRIo16: &[u8; 2usize] = b"o\0";
pub const PRIo32: &[u8; 2usize] = b"o\0";
pub const PRIo64: &[u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &[u8; 2usize] = b"o\0";
pub const PRIoFAST16: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &[u8; 3usize] = b"lo\0";
pub const PRIu8: &[u8; 2usize] = b"u\0";
pub const PRIu16: &[u8; 2usize] = b"u\0";
pub const PRIu32: &[u8; 2usize] = b"u\0";
pub const PRIu64: &[u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &[u8; 2usize] = b"u\0";
pub const PRIuFAST16: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &[u8; 3usize] = b"lu\0";
pub const PRIx8: &[u8; 2usize] = b"x\0";
pub const PRIx16: &[u8; 2usize] = b"x\0";
pub const PRIx32: &[u8; 2usize] = b"x\0";
pub const PRIx64: &[u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &[u8; 2usize] = b"x\0";
pub const PRIxFAST16: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &[u8; 3usize] = b"lx\0";
pub const PRIX8: &[u8; 2usize] = b"X\0";
pub const PRIX16: &[u8; 2usize] = b"X\0";
pub const PRIX32: &[u8; 2usize] = b"X\0";
pub const PRIX64: &[u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &[u8; 2usize] = b"X\0";
pub const PRIXFAST16: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &[u8; 3usize] = b"lX\0";
pub const PRIdMAX: &[u8; 3usize] = b"ld\0";
pub const PRIiMAX: &[u8; 3usize] = b"li\0";
pub const PRIoMAX: &[u8; 3usize] = b"lo\0";
pub const PRIuMAX: &[u8; 3usize] = b"lu\0";
pub const PRIxMAX: &[u8; 3usize] = b"lx\0";
pub const PRIXMAX: &[u8; 3usize] = b"lX\0";
pub const PRIdPTR: &[u8; 3usize] = b"ld\0";
pub const PRIiPTR: &[u8; 3usize] = b"li\0";
pub const PRIoPTR: &[u8; 3usize] = b"lo\0";
pub const PRIuPTR: &[u8; 3usize] = b"lu\0";
pub const PRIxPTR: &[u8; 3usize] = b"lx\0";
pub const PRIXPTR: &[u8; 3usize] = b"lX\0";
pub const SCNd8: &[u8; 4usize] = b"hhd\0";
pub const SCNd16: &[u8; 3usize] = b"hd\0";
pub const SCNd32: &[u8; 2usize] = b"d\0";
pub const SCNd64: &[u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &[u8; 3usize] = b"ld\0";
pub const SCNi8: &[u8; 4usize] = b"hhi\0";
pub const SCNi16: &[u8; 3usize] = b"hi\0";
pub const SCNi32: &[u8; 2usize] = b"i\0";
pub const SCNi64: &[u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &[u8; 3usize] = b"li\0";
pub const SCNiFAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3usize] = b"li\0";
pub const SCNiFAST32: &[u8; 3usize] = b"li\0";
pub const SCNiFAST64: &[u8; 3usize] = b"li\0";
pub const SCNu8: &[u8; 4usize] = b"hhu\0";
pub const SCNu16: &[u8; 3usize] = b"hu\0";
pub const SCNu32: &[u8; 2usize] = b"u\0";
pub const SCNu64: &[u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &[u8; 3usize] = b"lu\0";
pub const SCNo8: &[u8; 4usize] = b"hho\0";
pub const SCNo16: &[u8; 3usize] = b"ho\0";
pub const SCNo32: &[u8; 2usize] = b"o\0";
pub const SCNo64: &[u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &[u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &[u8; 3usize] = b"lo\0";
pub const SCNx8: &[u8; 4usize] = b"hhx\0";
pub const SCNx16: &[u8; 3usize] = b"hx\0";
pub const SCNx32: &[u8; 2usize] = b"x\0";
pub const SCNx64: &[u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &[u8; 3usize] = b"lx\0";
pub const SCNdMAX: &[u8; 3usize] = b"ld\0";
pub const SCNiMAX: &[u8; 3usize] = b"li\0";
pub const SCNoMAX: &[u8; 3usize] = b"lo\0";
pub const SCNuMAX: &[u8; 3usize] = b"lu\0";
pub const SCNxMAX: &[u8; 3usize] = b"lx\0";
pub const SCNdPTR: &[u8; 3usize] = b"ld\0";
pub const SCNiPTR: &[u8; 3usize] = b"li\0";
pub const SCNoPTR: &[u8; 3usize] = b"lo\0";
pub const SCNuPTR: &[u8; 3usize] = b"lu\0";
pub const SCNxPTR: &[u8; 3usize] = b"lx\0";
pub const RZ_MODE_PRINT: u32 = 0;
pub const RZ_MODE_RIZINCMD: u32 = 1;
pub const RZ_MODE_SET: u32 = 2;
pub const RZ_MODE_SIMPLE: u32 = 4;
pub const RZ_MODE_JSON: u32 = 8;
pub const RZ_MODE_ARRAY: u32 = 16;
pub const RZ_MODE_SIMPLEST: u32 = 32;
pub const RZ_MODE_CLASSDUMP: u32 = 64;
pub const RZ_MODE_EQUAL: u32 = 128;
pub const RZ_PERM_R: u32 = 4;
pub const RZ_PERM_W: u32 = 2;
pub const RZ_PERM_X: u32 = 1;
pub const RZ_PERM_RW: u32 = 6;
pub const RZ_PERM_RX: u32 = 5;
pub const RZ_PERM_RWX: u32 = 7;
pub const RZ_PERM_WX: u32 = 3;
pub const RZ_PERM_SHAR: u32 = 8;
pub const RZ_PERM_PRIV: u32 = 16;
pub const RZ_PERM_ACCESS: u32 = 32;
pub const RZ_PERM_CREAT: u32 = 64;
pub const __KFBSD__: u32 = 0;
pub const __BSD__: u32 = 0;
pub const __UNIX__: u32 = 1;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const _CTYPE_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &[u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const UT64_MAX: i32 = -1;
pub const UT64_GT0: i64 = -9223372036854775808;
pub const UT64_LT0: u64 = 9223372036854775807;
pub const UT64_MIN: u32 = 0;
pub const UT64_32U: i64 = -4294967296;
pub const UT64_16U: i32 = -65536;
pub const UT64_8U: i32 = -256;
pub const UT32_MIN: u32 = 0;
pub const UT16_MIN: u32 = 0;
pub const UT32_GT0: u32 = 2147483648;
pub const UT32_LT0: u32 = 2147483647;
pub const ST32_MAX: u32 = 2147483647;
pub const ST32_MIN: i32 = -2147483648;
pub const UT32_MAX: u32 = 4294967295;
pub const ST16_MAX: u32 = 32767;
pub const ST16_MIN: i32 = -32768;
pub const UT16_GT0: u32 = 32768;
pub const UT16_MAX: u32 = 65535;
pub const ST8_MAX: u32 = 127;
pub const ST8_MIN: i32 = -128;
pub const UT8_GT0: u32 = 128;
pub const UT8_MAX: u32 = 255;
pub const UT8_MIN: u32 = 0;
pub const ASCII_MIN: u32 = 32;
pub const ASCII_MAX: u32 = 127;
pub const SZT_MAX: i32 = -1;
pub const SZT_MIN: u32 = 0;
pub const B11111: u32 = 31;
pub const B11110: u32 = 30;
pub const B11101: u32 = 29;
pub const B11100: u32 = 28;
pub const B11011: u32 = 27;
pub const B11010: u32 = 26;
pub const B11001: u32 = 25;
pub const B11000: u32 = 24;
pub const B10111: u32 = 23;
pub const B10110: u32 = 22;
pub const B10101: u32 = 21;
pub const B10100: u32 = 20;
pub const B10011: u32 = 19;
pub const B10010: u32 = 18;
pub const B10001: u32 = 17;
pub const B10000: u32 = 16;
pub const B1111: u32 = 15;
pub const B1110: u32 = 14;
pub const B1101: u32 = 13;
pub const B1100: u32 = 12;
pub const B1011: u32 = 11;
pub const B1010: u32 = 10;
pub const B1001: u32 = 9;
pub const B1000: u32 = 8;
pub const B0111: u32 = 7;
pub const B0110: u32 = 6;
pub const B0101: u32 = 5;
pub const B0100: u32 = 4;
pub const B0011: u32 = 3;
pub const B0010: u32 = 2;
pub const B0001: u32 = 1;
pub const B0000: u32 = 0;
pub const RZ_HAS_CONSTRUCTORS: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const _BITS_STAT_H: u32 = 1;
pub const _STAT_VER_KERNEL: u32 = 0;
pub const _STAT_VER_LINUX: u32 = 1;
pub const _MKNOD_VER_LINUX: u32 = 0;
pub const _STAT_VER: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const RZ_SYS_DIR: &[u8; 2usize] = b"/\0";
pub const RZ_SYS_ENVSEP: &[u8; 2usize] = b":\0";
pub const RZ_SYS_HOME: &[u8; 5usize] = b"HOME\0";
pub const RZ_SYS_TMP: &[u8; 7usize] = b"TMPDIR\0";
pub const PERROR_WITH_FILELINE: u32 = 0;
pub const _SYS_STAT_H: u32 = 1;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const _MKNOD_VER: u32 = 0;
pub const _DIRENT_H: u32 = 1;
pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
pub const MAXNAMLEN: u32 = 255;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const _SYS_TIME_H: u32 = 1;
pub const HAVE_EPRINTF: u32 = 1;
pub const PFMT64x: &[u8; 4usize] = b"llx\0";
pub const PFMT64d: &[u8; 4usize] = b"lld\0";
pub const PFMT64u: &[u8; 4usize] = b"llu\0";
pub const PFMT64o: &[u8; 4usize] = b"llo\0";
pub const PFMTSZx: &[u8; 3usize] = b"zx\0";
pub const PFMTSZd: &[u8; 3usize] = b"zd\0";
pub const PFMTSZu: &[u8; 3usize] = b"zu\0";
pub const PFMTSZo: &[u8; 3usize] = b"zo\0";
pub const LDBLFMTg: &[u8; 3usize] = b"Lg\0";
pub const LDBLFMTf: &[u8; 3usize] = b"Lf\0";
pub const HHXFMT: &[u8; 4usize] = b"hhx\0";
pub const PFMTDPTR: &[u8; 3usize] = b"td\0";
pub const PFMT32x: &[u8; 2usize] = b"x\0";
pub const PFMT32d: &[u8; 2usize] = b"d\0";
pub const PFMT32u: &[u8; 2usize] = b"u\0";
pub const PFMT32o: &[u8; 2usize] = b"o\0";
pub const O_BINARY: u32 = 0;
pub const RZ_SYS_ARCH: &[u8; 4usize] = b"x86\0";
pub const RZ_SYS_ENDIAN: u32 = 0;
pub const RZ_SYS_ENDIAN_NONE: u32 = 0;
pub const RZ_SYS_ENDIAN_LITTLE: u32 = 1;
pub const RZ_SYS_ENDIAN_BIG: u32 = 2;
pub const RZ_SYS_ENDIAN_BI: u32 = 3;
pub const RZ_SYS_OS: &[u8; 6usize] = b"linux\0";
pub const HT_TYPE: u32 = 1;
pub const RZ_PRINT_JSON_DEPTH_LIMIT: u32 = 128;
pub const RZ_DIFF_DEFAULT_N_GROUPS: u32 = 3;
pub const RZ_REGEX_BASIC: u32 = 0;
pub const RZ_REGEX_EXTENDED: u32 = 1;
pub const RZ_REGEX_ICASE: u32 = 2;
pub const RZ_REGEX_NOSUB: u32 = 4;
pub const RZ_REGEX_NEWLINE: u32 = 8;
pub const RZ_REGEX_NOSPEC: u32 = 16;
pub const RZ_REGEX_PEND: u32 = 32;
pub const RZ_REGEX_DUMP: u32 = 128;
pub const RZ_REGEX_ENOSYS: i32 = -1;
pub const RZ_REGEX_NOMATCH: u32 = 1;
pub const RZ_REGEX_BADPAT: u32 = 2;
pub const RZ_REGEX_ECOLLATE: u32 = 3;
pub const RZ_REGEX_ECTYPE: u32 = 4;
pub const RZ_REGEX_EESCAPE: u32 = 5;
pub const RZ_REGEX_ESUBREG: u32 = 6;
pub const RZ_REGEX_EBRACK: u32 = 7;
pub const RZ_REGEX_EPAREN: u32 = 8;
pub const RZ_REGEX_EBRACE: u32 = 9;
pub const RZ_REGEX_BADBR: u32 = 10;
pub const RZ_REGEX_ERANGE: u32 = 11;
pub const RZ_REGEX_ESPACE: u32 = 12;
pub const RZ_REGEX_BADRPT: u32 = 13;
pub const RZ_REGEX_EMPTY: u32 = 14;
pub const RZ_REGEX_ASSERT: u32 = 15;
pub const RZ_REGEX_INVARG: u32 = 16;
pub const RZ_REGEX_ILLSEQ: u32 = 17;
pub const RZ_REGEX_ATOI: u32 = 255;
pub const RZ_REGEX_ITOA: u32 = 256;
pub const RZ_REGEX_NOTBOL: u32 = 1;
pub const RZ_REGEX_NOTEOL: u32 = 2;
pub const RZ_REGEX_STARTEND: u32 = 4;
pub const RZ_REGEX_TRACE: u32 = 256;
pub const RZ_REGEX_LARGE: u32 = 512;
pub const RZ_REGEX_BACKR: u32 = 1024;
pub const RZ_THREAD_POOL_ALL_CORES: u32 = 0;
pub const RZ_THREAD_QUEUE_UNLIMITED: u32 = 0;
pub const _BITS_SIGNUM_H: u32 = 1;
pub const _BITS_SIGNUM_GENERIC_H: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGILL: u32 = 4;
pub const SIGABRT: u32 = 6;
pub const SIGFPE: u32 = 8;
pub const SIGSEGV: u32 = 11;
pub const SIGTERM: u32 = 15;
pub const SIGHUP: u32 = 1;
pub const SIGQUIT: u32 = 3;
pub const SIGTRAP: u32 = 5;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGPOLL: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 23;
pub const SIGIOT: u32 = 6;
pub const SIGCLD: u32 = 20;
pub const __SIGRTMIN: u32 = 32;
pub const __SIGRTMAX: u32 = 32;
pub const _NSIG: u32 = 33;
pub const SIGSTKFLT: u32 = 16;
pub const SIGPWR: u32 = 30;
pub const __sig_atomic_t_defined: u32 = 1;
pub const __siginfo_t_defined: u32 = 1;
pub const __SI_MAX_SIZE: u32 = 128;
pub const _BITS_SIGINFO_ARCH_H: u32 = 1;
pub const __SI_ERRNO_THEN_CODE: u32 = 1;
pub const __SI_HAVE_SIGSYS: u32 = 1;
pub const _BITS_SIGINFO_CONSTS_H: u32 = 1;
pub const __SI_ASYNCIO_AFTER_SIGIO: u32 = 1;
pub const __sigevent_t_defined: u32 = 1;
pub const __SIGEV_MAX_SIZE: u32 = 64;
pub const _BITS_SIGEVENT_CONSTS_H: u32 = 1;
pub const NSIG: u32 = 33;
pub const _BITS_SIGACTION_H: u32 = 1;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_INTERRUPT: u32 = 536870912;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SA_STACK: u32 = 134217728;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const _BITS_SIGCONTEXT_H: u32 = 1;
pub const FP_XSTATE_MAGIC1: u32 = 1179670611;
pub const FP_XSTATE_MAGIC2: u32 = 1179670597;
pub const __stack_t_defined: u32 = 1;
pub const _SYS_UCONTEXT_H: u32 = 1;
pub const __NGREG: u32 = 23;
pub const NGREG: u32 = 23;
pub const _BITS_SIGSTACK_H: u32 = 1;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 8192;
pub const _BITS_SS_FLAGS_H: u32 = 1;
pub const __sigstack_defined: u32 = 1;
pub const _BITS_SIGTHREAD_H: u32 = 1;
pub const HT_NULL_VALUE: u32 = 0;
pub const RZ_RBTREE_MAX_HEIGHT: u32 = 62;
pub const RZ_BIG_WORD_SIZE: u32 = 4;
pub const RZ_BIG_ARRAY_SIZE: u32 = 128;
pub const RZ_BIG_SPRINTF_FORMAT_STR: &[u8; 6usize] = b"%.08x\0";
pub const RZ_BIG_FORMAT_STR_LEN: u32 = 9;
pub const RZ_BIG_SSCANF_FORMAT_STR: &[u8; 4usize] = b"%8x\0";
pub const RZ_BUF_SET: u32 = 0;
pub const RZ_BUF_CUR: u32 = 1;
pub const RZ_BUF_END: u32 = 2;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const RZ_NSEC_PER_SEC: u32 = 1000000000;
pub const RZ_NSEC_PER_MSEC: u32 = 1000000;
pub const RZ_USEC_PER_SEC: u32 = 1000000;
pub const RZ_NSEC_PER_USEC: u32 = 1000;
pub const RZ_USEC_PER_MSEC: u32 = 1000;
pub const ASCTIME_BUF_MINLEN: u32 = 26;
pub const RZ_TIME_PROFILE_ENABLED: u32 = 0;
pub const RZ_NUMCALC_STRSZ: u32 = 1024;
pub const RZ_SPACES_MAX: u32 = 512;
pub const RZ_KEY_PARSER_UNKNOWN: i32 = -1;
pub const KVLSZ: u32 = 4;
pub const CDB_MAX_KEY: u32 = 255;
pub const CDB_MAX_VALUE: u32 = 16777215;
pub const CDB_HASHSTART: u32 = 5381;
pub const BUFFER_INSIZE: u32 = 8192;
pub const BUFFER_OUTSIZE: u32 = 8192;
pub const CDB_HPLIST: u32 = 1000;
pub const SDB_CDB_MIN_VALUE: u32 = 1;
pub const SDB_CDB_MAX_VALUE: u32 = 16777215;
pub const SDB_CDB_MIN_KEY: u32 = 1;
pub const SDB_CDB_MAX_KEY: u32 = 255;
pub const SDB_MODE: u32 = 420;
pub const SDB_RS: u8 = 44u8;
pub const SDB_SS: &[u8; 2usize] = b",\0";
pub const SDB_MAX_PATH: u32 = 256;
pub const SDB_NUM_BASE: u32 = 16;
pub const SDB_NUM_BUFSZ: u32 = 64;
pub const SDB_OPTION_NONE: u32 = 0;
pub const SDB_OPTION_ALL: u32 = 255;
pub const SDB_OPTION_SYNC: u32 = 1;
pub const SDB_OPTION_NOSTAMP: u32 = 2;
pub const SDB_OPTION_FS: u32 = 4;
pub const SDB_OPTION_JOURNAL: u32 = 8;
pub const SDB_LIST_UNSORTED: u32 = 0;
pub const SDB_LIST_SORTED: u32 = 1;
pub const _WCHAR_H: u32 = 1;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const WEOF: u32 = 4294967295;
pub const RZ_STRPOOL_INC: u32 = 1024;
pub const RZ_SYS_DEVNULL: &[u8; 10usize] = b"/dev/null\0";
pub const RZ_ASN1_JSON_NULL: &[u8; 5usize] = b"null\0";
pub const RZ_ASN1_JSON_EMPTY: &[u8; 3usize] = b"{}\0";
pub const RZ_ASN1_OID_LEN: u32 = 64;
pub const RZ_ASN1_CLASS: u32 = 192;
pub const RZ_ASN1_FORM: u32 = 32;
pub const RZ_ASN1_TAG: u32 = 31;
pub const RZ_ASN1_LENLONG: u32 = 128;
pub const RZ_ASN1_LENSHORT: u32 = 127;
pub const RZ_ASN1_CLASS_UNIVERSAL: u32 = 0;
pub const RZ_ASN1_CLASS_APPLICATION: u32 = 64;
pub const RZ_ASN1_CLASS_CONTEXT: u32 = 128;
pub const RZ_ASN1_CLASS_PRIVATE: u32 = 192;
pub const RZ_ASN1_FORM_PRIMITIVE: u32 = 0;
pub const RZ_ASN1_FORM_CONSTRUCTED: u32 = 32;
pub const RZ_ASN1_TAG_EOC: u32 = 0;
pub const RZ_ASN1_TAG_BOOLEAN: u32 = 1;
pub const RZ_ASN1_TAG_INTEGER: u32 = 2;
pub const RZ_ASN1_TAG_BITSTRING: u32 = 3;
pub const RZ_ASN1_TAG_OCTETSTRING: u32 = 4;
pub const RZ_ASN1_TAG_NULL: u32 = 5;
pub const RZ_ASN1_TAG_OID: u32 = 6;
pub const RZ_ASN1_TAG_OBJDESCRIPTOR: u32 = 7;
pub const RZ_ASN1_TAG_EXTERNAL: u32 = 8;
pub const RZ_ASN1_TAG_REAL: u32 = 9;
pub const RZ_ASN1_TAG_ENUMERATED: u32 = 10;
pub const RZ_ASN1_TAG_EMBEDDED_PDV: u32 = 11;
pub const RZ_ASN1_TAG_UTF8STRING: u32 = 12;
pub const RZ_ASN1_TAG_SEQUENCE: u32 = 16;
pub const RZ_ASN1_TAG_SET: u32 = 17;
pub const RZ_ASN1_TAG_NUMERICSTRING: u32 = 18;
pub const RZ_ASN1_TAG_PRINTABLESTRING: u32 = 19;
pub const RZ_ASN1_TAG_T61STRING: u32 = 20;
pub const RZ_ASN1_TAG_VIDEOTEXSTRING: u32 = 21;
pub const RZ_ASN1_TAG_IA5STRING: u32 = 22;
pub const RZ_ASN1_TAG_UTCTIME: u32 = 23;
pub const RZ_ASN1_TAG_GENERALIZEDTIME: u32 = 24;
pub const RZ_ASN1_TAG_GRAPHICSTRING: u32 = 25;
pub const RZ_ASN1_TAG_VISIBLESTRING: u32 = 26;
pub const RZ_ASN1_TAG_GENERALSTRING: u32 = 27;
pub const RZ_ASN1_TAG_UNIVERSALSTRING: u32 = 28;
pub const RZ_ASN1_TAG_BMPSTRING: u32 = 30;
pub const RZ_SUBPROCESS_STDIN: u32 = 1;
pub const RZ_SUBPROCESS_STDOUT: u32 = 2;
pub const RZ_SUBPROCESS_STDERR: u32 = 4;
pub const _TERMIOS_H: u32 = 1;
pub const NCCS: u32 = 32;
pub const _HAVE_STRUCT_TERMIOS_C_ISPEED: u32 = 1;
pub const _HAVE_STRUCT_TERMIOS_C_OSPEED: u32 = 1;
pub const VINTR: u32 = 0;
pub const VQUIT: u32 = 1;
pub const VERASE: u32 = 2;
pub const VKILL: u32 = 3;
pub const VEOF: u32 = 4;
pub const VTIME: u32 = 5;
pub const VMIN: u32 = 6;
pub const VSWTC: u32 = 7;
pub const VSTART: u32 = 8;
pub const VSTOP: u32 = 9;
pub const VSUSP: u32 = 10;
pub const VEOL: u32 = 11;
pub const VREPRINT: u32 = 12;
pub const VDISCARD: u32 = 13;
pub const VWERASE: u32 = 14;
pub const VLNEXT: u32 = 15;
pub const VEOL2: u32 = 16;
pub const IGNBRK: u32 = 1;
pub const BRKINT: u32 = 2;
pub const IGNPAR: u32 = 4;
pub const PARMRK: u32 = 8;
pub const INPCK: u32 = 16;
pub const ISTRIP: u32 = 32;
pub const INLCR: u32 = 64;
pub const IGNCR: u32 = 128;
pub const ICRNL: u32 = 256;
pub const IUCLC: u32 = 512;
pub const IXON: u32 = 1024;
pub const IXANY: u32 = 2048;
pub const IXOFF: u32 = 4096;
pub const IMAXBEL: u32 = 8192;
pub const IUTF8: u32 = 16384;
pub const OPOST: u32 = 1;
pub const OLCUC: u32 = 2;
pub const ONLCR: u32 = 4;
pub const OCRNL: u32 = 8;
pub const ONOCR: u32 = 16;
pub const ONLRET: u32 = 32;
pub const OFILL: u32 = 64;
pub const OFDEL: u32 = 128;
pub const NLDLY: u32 = 256;
pub const NL0: u32 = 0;
pub const NL1: u32 = 256;
pub const CRDLY: u32 = 1536;
pub const CR0: u32 = 0;
pub const CR1: u32 = 512;
pub const CR2: u32 = 1024;
pub const CR3: u32 = 1536;
pub const TABDLY: u32 = 6144;
pub const TAB0: u32 = 0;
pub const TAB1: u32 = 2048;
pub const TAB2: u32 = 4096;
pub const TAB3: u32 = 6144;
pub const BSDLY: u32 = 8192;
pub const BS0: u32 = 0;
pub const BS1: u32 = 8192;
pub const FFDLY: u32 = 32768;
pub const FF0: u32 = 0;
pub const FF1: u32 = 32768;
pub const VTDLY: u32 = 16384;
pub const VT0: u32 = 0;
pub const VT1: u32 = 16384;
pub const XTABS: u32 = 6144;
pub const B0: u32 = 0;
pub const B50: u32 = 1;
pub const B75: u32 = 2;
pub const B110: u32 = 3;
pub const B134: u32 = 4;
pub const B150: u32 = 5;
pub const B200: u32 = 6;
pub const B300: u32 = 7;
pub const B600: u32 = 8;
pub const B1200: u32 = 9;
pub const B1800: u32 = 10;
pub const B2400: u32 = 11;
pub const B4800: u32 = 12;
pub const B9600: u32 = 13;
pub const B19200: u32 = 14;
pub const B38400: u32 = 15;
pub const EXTA: u32 = 14;
pub const EXTB: u32 = 15;
pub const CBAUD: u32 = 4111;
pub const CBAUDEX: u32 = 4096;
pub const CIBAUD: u32 = 269418496;
pub const CMSPAR: u32 = 1073741824;
pub const CRTSCTS: u32 = 2147483648;
pub const B57600: u32 = 4097;
pub const B115200: u32 = 4098;
pub const B230400: u32 = 4099;
pub const B460800: u32 = 4100;
pub const B500000: u32 = 4101;
pub const B576000: u32 = 4102;
pub const B921600: u32 = 4103;
pub const B1000000: u32 = 4104;
pub const B1152000: u32 = 4105;
pub const B1500000: u32 = 4106;
pub const B2000000: u32 = 4107;
pub const B2500000: u32 = 4108;
pub const B3000000: u32 = 4109;
pub const B3500000: u32 = 4110;
pub const B4000000: u32 = 4111;
pub const __MAX_BAUD: u32 = 4111;
pub const CSIZE: u32 = 48;
pub const CS5: u32 = 0;
pub const CS6: u32 = 16;
pub const CS7: u32 = 32;
pub const CS8: u32 = 48;
pub const CSTOPB: u32 = 64;
pub const CREAD: u32 = 128;
pub const PARENB: u32 = 256;
pub const PARODD: u32 = 512;
pub const HUPCL: u32 = 1024;
pub const CLOCAL: u32 = 2048;
pub const ISIG: u32 = 1;
pub const ICANON: u32 = 2;
pub const XCASE: u32 = 4;
pub const ECHO: u32 = 8;
pub const ECHOE: u32 = 16;
pub const ECHOK: u32 = 32;
pub const ECHONL: u32 = 64;
pub const NOFLSH: u32 = 128;
pub const TOSTOP: u32 = 256;
pub const ECHOCTL: u32 = 512;
pub const ECHOPRT: u32 = 1024;
pub const ECHOKE: u32 = 2048;
pub const FLUSHO: u32 = 4096;
pub const PENDIN: u32 = 16384;
pub const IEXTEN: u32 = 32768;
pub const EXTPROC: u32 = 65536;
pub const TIOCSER_TEMT: u32 = 1;
pub const TCOOFF: u32 = 0;
pub const TCOON: u32 = 1;
pub const TCIOFF: u32 = 2;
pub const TCION: u32 = 3;
pub const TCIFLUSH: u32 = 0;
pub const TCOFLUSH: u32 = 1;
pub const TCIOFLUSH: u32 = 2;
pub const TCSANOW: u32 = 0;
pub const TCSADRAIN: u32 = 1;
pub const TCSAFLUSH: u32 = 2;
pub const TTYDEF_IFLAG: u32 = 11554;
pub const TTYDEF_OFLAG: u32 = 6149;
pub const TTYDEF_LFLAG: u32 = 35355;
pub const TTYDEF_CFLAG: u32 = 1440;
pub const TTYDEF_SPEED: u32 = 13;
pub const CEOL: u8 = 0u8;
pub const CERASE: u32 = 127;
pub const CSTATUS: u8 = 0u8;
pub const CMIN: u32 = 1;
pub const CQUIT: u32 = 28;
pub const CTIME: u32 = 0;
pub const CBRK: u8 = 0u8;
pub const _SYS_IOCTL_H: u32 = 1;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const TCGETS: u32 = 21505;
pub const TCSETS: u32 = 21506;
pub const TCSETSW: u32 = 21507;
pub const TCSETSF: u32 = 21508;
pub const TCGETA: u32 = 21509;
pub const TCSETA: u32 = 21510;
pub const TCSETAW: u32 = 21511;
pub const TCSETAF: u32 = 21512;
pub const TCSBRK: u32 = 21513;
pub const TCXONC: u32 = 21514;
pub const TCFLSH: u32 = 21515;
pub const TIOCEXCL: u32 = 21516;
pub const TIOCNXCL: u32 = 21517;
pub const TIOCSCTTY: u32 = 21518;
pub const TIOCGPGRP: u32 = 21519;
pub const TIOCSPGRP: u32 = 21520;
pub const TIOCOUTQ: u32 = 21521;
pub const TIOCSTI: u32 = 21522;
pub const TIOCGWINSZ: u32 = 21523;
pub const TIOCSWINSZ: u32 = 21524;
pub const TIOCMGET: u32 = 21525;
pub const TIOCMBIS: u32 = 21526;
pub const TIOCMBIC: u32 = 21527;
pub const TIOCMSET: u32 = 21528;
pub const TIOCGSOFTCAR: u32 = 21529;
pub const TIOCSSOFTCAR: u32 = 21530;
pub const FIONREAD: u32 = 21531;
pub const TIOCINQ: u32 = 21531;
pub const TIOCLINUX: u32 = 21532;
pub const TIOCCONS: u32 = 21533;
pub const TIOCGSERIAL: u32 = 21534;
pub const TIOCSSERIAL: u32 = 21535;
pub const TIOCPKT: u32 = 21536;
pub const FIONBIO: u32 = 21537;
pub const TIOCNOTTY: u32 = 21538;
pub const TIOCSETD: u32 = 21539;
pub const TIOCGETD: u32 = 21540;
pub const TCSBRKP: u32 = 21541;
pub const TIOCSBRK: u32 = 21543;
pub const TIOCCBRK: u32 = 21544;
pub const TIOCGSID: u32 = 21545;
pub const TIOCGRS485: u32 = 21550;
pub const TIOCSRS485: u32 = 21551;
pub const TCGETX: u32 = 21554;
pub const TCSETX: u32 = 21555;
pub const TCSETXF: u32 = 21556;
pub const TCSETXW: u32 = 21557;
pub const TIOCVHANGUP: u32 = 21559;
pub const FIONCLEX: u32 = 21584;
pub const FIOCLEX: u32 = 21585;
pub const FIOASYNC: u32 = 21586;
pub const TIOCSERCONFIG: u32 = 21587;
pub const TIOCSERGWILD: u32 = 21588;
pub const TIOCSERSWILD: u32 = 21589;
pub const TIOCGLCKTRMIOS: u32 = 21590;
pub const TIOCSLCKTRMIOS: u32 = 21591;
pub const TIOCSERGSTRUCT: u32 = 21592;
pub const TIOCSERGETLSR: u32 = 21593;
pub const TIOCSERGETMULTI: u32 = 21594;
pub const TIOCSERSETMULTI: u32 = 21595;
pub const TIOCMIWAIT: u32 = 21596;
pub const TIOCGICOUNT: u32 = 21597;
pub const FIOQSIZE: u32 = 21600;
pub const TIOCPKT_DATA: u32 = 0;
pub const TIOCPKT_FLUSHREAD: u32 = 1;
pub const TIOCPKT_FLUSHWRITE: u32 = 2;
pub const TIOCPKT_STOP: u32 = 4;
pub const TIOCPKT_START: u32 = 8;
pub const TIOCPKT_NOSTOP: u32 = 16;
pub const TIOCPKT_DOSTOP: u32 = 32;
pub const TIOCPKT_IOCTL: u32 = 64;
pub const SIOCADDRT: u32 = 35083;
pub const SIOCDELRT: u32 = 35084;
pub const SIOCRTMSG: u32 = 35085;
pub const SIOCGIFNAME: u32 = 35088;
pub const SIOCSIFLINK: u32 = 35089;
pub const SIOCGIFCONF: u32 = 35090;
pub const SIOCGIFFLAGS: u32 = 35091;
pub const SIOCSIFFLAGS: u32 = 35092;
pub const SIOCGIFADDR: u32 = 35093;
pub const SIOCSIFADDR: u32 = 35094;
pub const SIOCGIFDSTADDR: u32 = 35095;
pub const SIOCSIFDSTADDR: u32 = 35096;
pub const SIOCGIFBRDADDR: u32 = 35097;
pub const SIOCSIFBRDADDR: u32 = 35098;
pub const SIOCGIFNETMASK: u32 = 35099;
pub const SIOCSIFNETMASK: u32 = 35100;
pub const SIOCGIFMETRIC: u32 = 35101;
pub const SIOCSIFMETRIC: u32 = 35102;
pub const SIOCGIFMEM: u32 = 35103;
pub const SIOCSIFMEM: u32 = 35104;
pub const SIOCGIFMTU: u32 = 35105;
pub const SIOCSIFMTU: u32 = 35106;
pub const SIOCSIFNAME: u32 = 35107;
pub const SIOCSIFHWADDR: u32 = 35108;
pub const SIOCGIFENCAP: u32 = 35109;
pub const SIOCSIFENCAP: u32 = 35110;
pub const SIOCGIFHWADDR: u32 = 35111;
pub const SIOCGIFSLAVE: u32 = 35113;
pub const SIOCSIFSLAVE: u32 = 35120;
pub const SIOCADDMULTI: u32 = 35121;
pub const SIOCDELMULTI: u32 = 35122;
pub const SIOCGIFINDEX: u32 = 35123;
pub const SIOGIFINDEX: u32 = 35123;
pub const SIOCSIFPFLAGS: u32 = 35124;
pub const SIOCGIFPFLAGS: u32 = 35125;
pub const SIOCDIFADDR: u32 = 35126;
pub const SIOCSIFHWBROADCAST: u32 = 35127;
pub const SIOCGIFCOUNT: u32 = 35128;
pub const SIOCGIFBR: u32 = 35136;
pub const SIOCSIFBR: u32 = 35137;
pub const SIOCGIFTXQLEN: u32 = 35138;
pub const SIOCSIFTXQLEN: u32 = 35139;
pub const SIOCDARP: u32 = 35155;
pub const SIOCGARP: u32 = 35156;
pub const SIOCSARP: u32 = 35157;
pub const SIOCDRARP: u32 = 35168;
pub const SIOCGRARP: u32 = 35169;
pub const SIOCSRARP: u32 = 35170;
pub const SIOCGIFMAP: u32 = 35184;
pub const SIOCSIFMAP: u32 = 35185;
pub const SIOCADDDLCI: u32 = 35200;
pub const SIOCDELDLCI: u32 = 35201;
pub const SIOCDEVPRIVATE: u32 = 35312;
pub const SIOCPROTOPRIVATE: u32 = 35296;
pub const NCC: u32 = 8;
pub const TIOCM_LE: u32 = 1;
pub const TIOCM_DTR: u32 = 2;
pub const TIOCM_RTS: u32 = 4;
pub const TIOCM_ST: u32 = 8;
pub const TIOCM_SR: u32 = 16;
pub const TIOCM_CTS: u32 = 32;
pub const TIOCM_CAR: u32 = 64;
pub const TIOCM_RNG: u32 = 128;
pub const TIOCM_DSR: u32 = 256;
pub const TIOCM_CD: u32 = 64;
pub const TIOCM_RI: u32 = 128;
pub const N_TTY: u32 = 0;
pub const N_SLIP: u32 = 1;
pub const N_MOUSE: u32 = 2;
pub const N_PPP: u32 = 3;
pub const N_STRIP: u32 = 4;
pub const N_AX25: u32 = 5;
pub const N_X25: u32 = 6;
pub const N_6PACK: u32 = 7;
pub const N_MASC: u32 = 8;
pub const N_R3964: u32 = 9;
pub const N_PROFIBUS_FDL: u32 = 10;
pub const N_IRDA: u32 = 11;
pub const N_SMSBLOCK: u32 = 12;
pub const N_HDLC: u32 = 13;
pub const N_SYNC_PPP: u32 = 14;
pub const N_HCI: u32 = 15;
pub const _SYS_WAIT_H: u32 = 1;
pub const WCOREFLAG: u32 = 128;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MAX: u32 = 45;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MAX: u32 = 45;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const CONS_MAX_USER: u32 = 102400;
pub const CONS_BUFSZ: u32 = 20224;
pub const CONS_PALETTE_SIZE: u32 = 22;
pub const CONS_COLORS_SIZE: u32 = 21;
pub const RZ_CONS_GREP_WORDS: u32 = 10;
pub const RZ_CONS_GREP_WORD_SIZE: u32 = 64;
pub const RZ_CONS_GREP_TOKENS: u32 = 64;
pub const RZ_CONS_CMD_DEPTH: u32 = 100;
pub const CONS_MAX_ATTR_SZ: u32 = 16;
pub const RUNECODE_MIN: u32 = 200;
pub const RUNECODE_LINE_VERT: u32 = 200;
pub const RUNECODE_LINE_CROSS: u32 = 201;
pub const RUNECODE_CORNER_BR: u32 = 202;
pub const RUNECODE_CORNER_BL: u32 = 203;
pub const RUNECODE_ARROW_RIGHT: u32 = 204;
pub const RUNECODE_ARROW_LEFT: u32 = 205;
pub const RUNECODE_LINE_HORIZ: u32 = 206;
pub const RUNECODE_CORNER_TL: u32 = 207;
pub const RUNECODE_CORNER_TR: u32 = 208;
pub const RUNECODE_LINE_UP: u32 = 209;
pub const RUNECODE_CURVE_CORNER_TL: u32 = 210;
pub const RUNECODE_CURVE_CORNER_TR: u32 = 211;
pub const RUNECODE_CURVE_CORNER_BR: u32 = 212;
pub const RUNECODE_CURVE_CORNER_BL: u32 = 213;
pub const RUNECODE_MAX: u32 = 214;
pub const RUNECODESTR_MIN: u32 = 200;
pub const RUNECODESTR_LINE_VERT: [u8; 2usize] = [200u8, 0u8];
pub const RUNECODESTR_LINE_CROSS: [u8; 2usize] = [201u8, 0u8];
pub const RUNECODESTR_CORNER_BR: [u8; 2usize] = [202u8, 0u8];
pub const RUNECODESTR_CORNER_BL: [u8; 2usize] = [203u8, 0u8];
pub const RUNECODESTR_ARROW_RIGHT: [u8; 2usize] = [204u8, 0u8];
pub const RUNECODESTR_ARROW_LEFT: [u8; 2usize] = [205u8, 0u8];
pub const RUNECODESTR_LINE_HORIZ: [u8; 2usize] = [206u8, 0u8];
pub const RUNECODESTR_CORNER_TL: [u8; 2usize] = [207u8, 0u8];
pub const RUNECODESTR_CORNER_TR: [u8; 2usize] = [208u8, 0u8];
pub const RUNECODESTR_LINE_UP: [u8; 2usize] = [209u8, 0u8];
pub const RUNECODESTR_CURVE_CORNER_TL: [u8; 2usize] = [210u8, 0u8];
pub const RUNECODESTR_CURVE_CORNER_TR: [u8; 2usize] = [211u8, 0u8];
pub const RUNECODESTR_CURVE_CORNER_BR: [u8; 2usize] = [212u8, 0u8];
pub const RUNECODESTR_CURVE_CORNER_BL: [u8; 2usize] = [213u8, 0u8];
pub const RUNECODESTR_MAX: u32 = 213;
pub const RUNE_LINE_VERT: &[u8; 4usize] = b"\xE2\x94\x82\0";
pub const RUNE_LINE_CROSS: &[u8; 4usize] = b"\xE2\x94\xBC\0";
pub const RUNE_LINE_HORIZ: &[u8; 4usize] = b"\xE2\x94\x80\0";
pub const RUNE_LINE_UP: &[u8; 4usize] = b"\xE2\x86\x91\0";
pub const RUNE_CORNER_BR: &[u8; 4usize] = b"\xE2\x94\x98\0";
pub const RUNE_CORNER_BL: &[u8; 4usize] = b"\xE2\x94\x94\0";
pub const RUNE_CORNER_TL: &[u8; 4usize] = b"\xE2\x94\x8C\0";
pub const RUNE_CORNER_TR: &[u8; 4usize] = b"\xE2\x94\x90\0";
pub const RUNE_ARROW_RIGHT: &[u8; 4usize] = b"\xE1\x90\xB3\0";
pub const RUNE_ARROW_LEFT: &[u8; 4usize] = b"\xE1\x90\xB8\0";
pub const RUNE_ARROW_UP: &[u8; 4usize] = b"\xE1\x90\xB1\0";
pub const RUNE_ARROW_DOWN: &[u8; 4usize] = b"\xE1\x90\xAF\0";
pub const RUNE_CURVE_CORNER_TL: &[u8; 4usize] = b"\xE2\x95\xAD\0";
pub const RUNE_CURVE_CORNER_TR: &[u8; 4usize] = b"\xE2\x95\xAE\0";
pub const RUNE_CURVE_CORNER_BR: &[u8; 4usize] = b"\xE2\x95\xAF\0";
pub const RUNE_CURVE_CORNER_BL: &[u8; 4usize] = b"\xE2\x95\xB0\0";
pub const RUNE_LONG_LINE_HORIZ: &[u8; 4usize] = b"\xE2\x80\x95\0";
pub const UTF_CIRCLE: &[u8; 4usize] = b"\xE2\x97\xAF\0";
pub const UTF_BLOCK: &[u8; 4usize] = b"\xE2\x96\x88\0";
pub const UTF8_POLICE_CARS_REVOLVING_LIGHT: &[u8; 5usize] = b"\xF0\x9F\x9A\xA8\0";
pub const UTF8_WHITE_HEAVY_CHECK_MARK: &[u8; 4usize] = b"\xE2\x9C\x85\0";
pub const UTF8_SEE_NO_EVIL_MONKEY: &[u8; 5usize] = b"\xF0\x9F\x99\x88\0";
pub const UTF8_SKULL_AND_CROSSBONES: &[u8; 4usize] = b"\xE2\x98\xA0\0";
pub const UTF8_KEYBOARD: &[u8; 4usize] = b"\xE2\x8C\xA8\0";
pub const UTF8_LEFT_POINTING_MAGNIFYING_GLASS: &[u8; 5usize] = b"\xF0\x9F\x94\x8D\0";
pub const UTF8_DOOR: &[u8; 5usize] = b"\xF0\x9F\x9A\xAA\0";
pub const UTF8_VS16: &[u8; 4usize] = b"\xEF\xB8\x8F\0";
pub const HUD_BUF_SIZE: u32 = 512;
pub const RZ_CONS_SEARCH_CASE_SENSITIVE: u32 = 0;
pub const RZ_CONS_SEARCH_CASE_INSENSITIVE: u32 = 1;
pub const RZ_CONS_SEARCH_CASE_SMART: u32 = 2;
pub const RZ_CONS_KEY_F1: u32 = 241;
pub const RZ_CONS_KEY_F2: u32 = 242;
pub const RZ_CONS_KEY_F3: u32 = 243;
pub const RZ_CONS_KEY_F4: u32 = 244;
pub const RZ_CONS_KEY_F5: u32 = 245;
pub const RZ_CONS_KEY_F6: u32 = 246;
pub const RZ_CONS_KEY_F7: u32 = 247;
pub const RZ_CONS_KEY_F8: u32 = 248;
pub const RZ_CONS_KEY_F9: u32 = 249;
pub const RZ_CONS_KEY_F10: u32 = 250;
pub const RZ_CONS_KEY_F11: u32 = 251;
pub const RZ_CONS_KEY_F12: u32 = 252;
pub const RZ_CONS_KEY_ESC: u32 = 27;
pub const RZ_CONS_CLEAR_LINE: &[u8; 6usize] = b"\x1B[2K\r\0";
pub const RZ_CONS_CLEAR_SCREEN: &[u8; 6usize] = b"\x1B[2J\r\0";
pub const RZ_CONS_CLEAR_FROM_CURSOR_TO_END: &[u8; 6usize] = b"\x1B[0J\r\0";
pub const RZ_CONS_CURSOR_SAVE: &[u8; 4usize] = b"\x1B[s\0";
pub const RZ_CONS_CURSOR_RESTORE: &[u8; 4usize] = b"\x1B[u\0";
pub const RZ_CONS_GET_CURSOR_POSITION: &[u8; 5usize] = b"\x1B[6n\0";
pub const RZ_CONS_CURSOR_UP: &[u8; 4usize] = b"\x1B[A\0";
pub const RZ_CONS_CURSOR_DOWN: &[u8; 4usize] = b"\x1B[B\0";
pub const RZ_CONS_CURSOR_RIGHT: &[u8; 4usize] = b"\x1B[C\0";
pub const RZ_CONS_CURSOR_LEFT: &[u8; 4usize] = b"\x1B[D\0";
pub const Color_BLINK: &[u8; 5usize] = b"\x1B[5m\0";
pub const Color_INVERT: &[u8; 5usize] = b"\x1B[7m\0";
pub const Color_INVERT_RESET: &[u8; 6usize] = b"\x1B[27m\0";
pub const Color_RESET_TERMINAL: &[u8; 19usize] = b"\x1Bc\x1B(K\x1B[0m\x1B[J\x1B[?25h\0";
pub const Color_RESET: &[u8; 5usize] = b"\x1B[0m\0";
pub const Color_RESET_NOBG: &[u8; 21usize] = b"\x1B[27;22;24;25;28;39m\0";
pub const Color_RESET_BG: &[u8; 6usize] = b"\x1B[49m\0";
pub const Color_RESET_ALL: &[u8; 10usize] = b"\x1B[0m\x1B[49m\0";
pub const Color_BLACK: &[u8; 6usize] = b"\x1B[30m\0";
pub const Color_BGBLACK: &[u8; 6usize] = b"\x1B[40m\0";
pub const Color_RED: &[u8; 6usize] = b"\x1B[31m\0";
pub const Color_BGRED: &[u8; 6usize] = b"\x1B[41m\0";
pub const Color_WHITE: &[u8; 6usize] = b"\x1B[37m\0";
pub const Color_BGWHITE: &[u8; 6usize] = b"\x1B[47m\0";
pub const Color_GREEN: &[u8; 6usize] = b"\x1B[32m\0";
pub const Color_BGGREEN: &[u8; 6usize] = b"\x1B[42m\0";
pub const Color_MAGENTA: &[u8; 6usize] = b"\x1B[35m\0";
pub const Color_BGMAGENTA: &[u8; 6usize] = b"\x1B[45m\0";
pub const Color_YELLOW: &[u8; 6usize] = b"\x1B[33m\0";
pub const Color_BGYELLOW: &[u8; 6usize] = b"\x1B[43m\0";
pub const Color_CYAN: &[u8; 6usize] = b"\x1B[36m\0";
pub const Color_BGCYAN: &[u8; 6usize] = b"\x1B[46m\0";
pub const Color_BLUE: &[u8; 6usize] = b"\x1B[34m\0";
pub const Color_BGBLUE: &[u8; 6usize] = b"\x1B[44m\0";
pub const Color_GRAY: &[u8; 6usize] = b"\x1B[90m\0";
pub const Color_BGGRAY: &[u8; 7usize] = b"\x1B[100m\0";
pub const Color_BBLACK: &[u8; 6usize] = b"\x1B[90m\0";
pub const Color_BBGBLACK: &[u8; 7usize] = b"\x1B[100m\0";
pub const Color_BRED: &[u8; 6usize] = b"\x1B[91m\0";
pub const Color_BBGRED: &[u8; 7usize] = b"\x1B[101m\0";
pub const Color_BWHITE: &[u8; 6usize] = b"\x1B[97m\0";
pub const Color_BBGWHITE: &[u8; 7usize] = b"\x1B[107m\0";
pub const Color_BGREEN: &[u8; 6usize] = b"\x1B[92m\0";
pub const Color_BBGGREEN: &[u8; 7usize] = b"\x1B[102m\0";
pub const Color_BMAGENTA: &[u8; 6usize] = b"\x1B[95m\0";
pub const Color_BBGMAGENTA: &[u8; 7usize] = b"\x1B[105m\0";
pub const Color_BYELLOW: &[u8; 6usize] = b"\x1B[93m\0";
pub const Color_BBGYELLOW: &[u8; 7usize] = b"\x1B[103m\0";
pub const Color_BCYAN: &[u8; 6usize] = b"\x1B[96m\0";
pub const Color_BBGCYAN: &[u8; 7usize] = b"\x1B[106m\0";
pub const Color_BBLUE: &[u8; 6usize] = b"\x1B[94m\0";
pub const Color_BBGBLUE: &[u8; 7usize] = b"\x1B[104m\0";
pub const DOT_STYLE_NORMAL: u32 = 0;
pub const DOT_STYLE_CONDITIONAL: u32 = 1;
pub const DOT_STYLE_BACKEDGE: u32 = 2;
pub const LINE_VERT: u32 = 0;
pub const LINE_CROSS: u32 = 1;
pub const LINE_HORIZ: u32 = 2;
pub const LINE_UP: u32 = 3;
pub const CORNER_TL: u32 = 6;
pub const CORNER_BR: u32 = 4;
pub const CORNER_BL: u32 = 5;
pub const CORNER_TR: u32 = 6;
pub const ARROW_RIGHT: u32 = 8;
pub const ARROW_LEFT: u32 = 9;
pub const SELF_LOOP: u32 = 10;
pub const RZ_LINE_BUFSIZE: u32 = 4096;
pub const RZ_LINE_HISTSIZE: u32 = 256;
pub const RZ_LINE_UNDOSIZE: u32 = 512;
pub const RZ_EDGES_X_INC: u32 = 4;
pub const RZ_SELWIDGET_MAXH: u32 = 15;
pub const RZ_SELWIDGET_MAXW: u32 = 30;
pub const RZ_SELWIDGET_DIR_UP: u32 = 0;
pub const RZ_SELWIDGET_DIR_DOWN: u32 = 1;
pub const RZ_IO_SEEK_SET: u32 = 0;
pub const RZ_IO_SEEK_CUR: u32 = 1;
pub const RZ_IO_SEEK_END: u32 = 2;
pub const _SYS_PTRACE_H: u32 = 1;
pub const RZ_REG_COND_EQ: u32 = 0;
pub const RZ_REG_COND_NE: u32 = 1;
pub const RZ_REG_COND_CF: u32 = 2;
pub const RZ_REG_COND_CARRY: u32 = 2;
pub const RZ_REG_COND_NEG: u32 = 3;
pub const RZ_REG_COND_NEGATIVE: u32 = 3;
pub const RZ_REG_COND_OF: u32 = 4;
pub const RZ_REG_COND_OVERFLOW: u32 = 4;
pub const RZ_REG_COND_HI: u32 = 5;
pub const RZ_REG_COND_HE: u32 = 6;
pub const RZ_REG_COND_LO: u32 = 7;
pub const RZ_REG_COND_LOE: u32 = 8;
pub const RZ_REG_COND_GE: u32 = 9;
pub const RZ_REG_COND_GT: u32 = 10;
pub const RZ_REG_COND_LT: u32 = 11;
pub const RZ_REG_COND_LE: u32 = 12;
pub const RZ_REG_COND_LAST: u32 = 13;
pub const RZ_PRINT_FLAGS_COLOR: u32 = 1;
pub const RZ_PRINT_FLAGS_ADDRMOD: u32 = 2;
pub const RZ_PRINT_FLAGS_CURSOR: u32 = 4;
pub const RZ_PRINT_FLAGS_HEADER: u32 = 8;
pub const RZ_PRINT_FLAGS_SPARSE: u32 = 16;
pub const RZ_PRINT_FLAGS_SEGOFF: u32 = 32;
pub const RZ_PRINT_FLAGS_OFFSET: u32 = 64;
pub const RZ_PRINT_FLAGS_REFS: u32 = 128;
pub const RZ_PRINT_FLAGS_DIFFOUT: u32 = 256;
pub const RZ_PRINT_FLAGS_ADDRDEC: u32 = 512;
pub const RZ_PRINT_FLAGS_COMMENT: u32 = 1024;
pub const RZ_PRINT_FLAGS_COMPACT: u32 = 2048;
pub const RZ_PRINT_FLAGS_NONHEX: u32 = 4096;
pub const RZ_PRINT_FLAGS_SECSUB: u32 = 8192;
pub const RZ_PRINT_FLAGS_RAINBOW: u32 = 16384;
pub const RZ_PRINT_FLAGS_HDROFF: u32 = 32768;
pub const RZ_PRINT_FLAGS_STYLE: u32 = 65536;
pub const RZ_PRINT_FLAGS_NONASCII: u32 = 131072;
pub const RZ_PRINT_FLAGS_ALIGN: u32 = 262144;
pub const RZ_PRINT_FLAGS_UNALLOC: u32 = 524288;
pub const RZ_PRINT_FLAGS_BGFILL: u32 = 1048576;
pub const RZ_PRINT_FLAGS_SECTION: u32 = 2097152;
pub const SEEFLAG: i32 = -2;
pub const JSONOUTPUT: i32 = -3;
pub const RZ_PRINT_MUSTSEE: u32 = 1;
pub const RZ_PRINT_ISFIELD: u32 = 2;
pub const RZ_PRINT_SEEFLAGS: u32 = 4;
pub const RZ_PRINT_JSON: u32 = 8;
pub const RZ_PRINT_MUSTSET: u32 = 16;
pub const RZ_PRINT_UNIONMODE: u32 = 32;
pub const RZ_PRINT_VALUE: u32 = 64;
pub const RZ_PRINT_DOT: u32 = 128;
pub const RZ_PRINT_QUIET: u32 = 256;
pub const RZ_PRINT_STRUCT: u32 = 512;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    ) -> !;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub const RzOutputMode_RZ_OUTPUT_MODE_STANDARD: RzOutputMode = 1;
pub const RzOutputMode_RZ_OUTPUT_MODE_JSON: RzOutputMode = 2;
pub const RzOutputMode_RZ_OUTPUT_MODE_RIZIN: RzOutputMode = 4;
pub const RzOutputMode_RZ_OUTPUT_MODE_QUIET: RzOutputMode = 8;
pub const RzOutputMode_RZ_OUTPUT_MODE_SDB: RzOutputMode = 16;
pub const RzOutputMode_RZ_OUTPUT_MODE_LONG: RzOutputMode = 32;
pub const RzOutputMode_RZ_OUTPUT_MODE_LONG_JSON: RzOutputMode = 64;
pub const RzOutputMode_RZ_OUTPUT_MODE_TABLE: RzOutputMode = 128;
pub const RzOutputMode_RZ_OUTPUT_MODE_QUIETEST: RzOutputMode = 256;
#[doc = " \\brief Enum to describe the way data are printed"]
pub type RzOutputMode = ::std::os::raw::c_uint;
pub const _ISupper: _bindgen_ty_1 = 256;
pub const _ISlower: _bindgen_ty_1 = 512;
pub const _ISalpha: _bindgen_ty_1 = 1024;
pub const _ISdigit: _bindgen_ty_1 = 2048;
pub const _ISxdigit: _bindgen_ty_1 = 4096;
pub const _ISspace: _bindgen_ty_1 = 8192;
pub const _ISprint: _bindgen_ty_1 = 16384;
pub const _ISgraph: _bindgen_ty_1 = 32768;
pub const _ISblank: _bindgen_ty_1 = 1;
pub const _IScntrl: _bindgen_ty_1 = 2;
pub const _ISpunct: _bindgen_ty_1 = 4;
pub const _ISalnum: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt64_t;
pub type fsblkcnt_t = __fsblkcnt64_t;
pub type fsfilcnt_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
//pub const FP_NAN: _bindgen_ty_2 = 0;
//pub const FP_INFINITE: _bindgen_ty_2 = 1;
//pub const FP_ZERO: _bindgen_ty_2 = 2;
//pub const FP_SUBNORMAL: _bindgen_ty_2 = 3;
//pub const FP_NORMAL: _bindgen_ty_2 = 4;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ut80 {
    pub Low: ::std::os::raw::c_ulonglong,
    pub High: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__ut80() {
    const UNINIT: ::std::mem::MaybeUninit<_ut80> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ut80>(),
        16usize,
        concat!("Size of: ", stringify!(_ut80))
    );
    assert_eq!(
        ::std::mem::align_of::<_ut80>(),
        8usize,
        concat!("Alignment of ", stringify!(_ut80))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut80),
            "::",
            stringify!(Low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).High) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut80),
            "::",
            stringify!(High)
        )
    );
}
pub type ut80 = _ut80;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ut96 {
    pub Low: ::std::os::raw::c_ulonglong,
    pub High: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__ut96() {
    const UNINIT: ::std::mem::MaybeUninit<_ut96> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ut96>(),
        16usize,
        concat!("Size of: ", stringify!(_ut96))
    );
    assert_eq!(
        ::std::mem::align_of::<_ut96>(),
        8usize,
        concat!("Alignment of ", stringify!(_ut96))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut96),
            "::",
            stringify!(Low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).High) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut96),
            "::",
            stringify!(High)
        )
    );
}
pub type ut96 = _ut96;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ut128 {
    pub Low: ::std::os::raw::c_ulonglong,
    pub High: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__ut128() {
    const UNINIT: ::std::mem::MaybeUninit<_ut128> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ut128>(),
        16usize,
        concat!("Size of: ", stringify!(_ut128))
    );
    assert_eq!(
        ::std::mem::align_of::<_ut128>(),
        8usize,
        concat!("Alignment of ", stringify!(_ut128))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut128),
            "::",
            stringify!(Low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).High) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut128),
            "::",
            stringify!(High)
        )
    );
}
pub type ut128 = _ut128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ut256 {
    pub Low: ut128,
    pub High: ut128,
}
#[test]
fn bindgen_test_layout__ut256() {
    const UNINIT: ::std::mem::MaybeUninit<_ut256> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ut256>(),
        32usize,
        concat!("Size of: ", stringify!(_ut256))
    );
    assert_eq!(
        ::std::mem::align_of::<_ut256>(),
        8usize,
        concat!("Alignment of ", stringify!(_ut256))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut256),
            "::",
            stringify!(Low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).High) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut256),
            "::",
            stringify!(High)
        )
    );
}
pub type ut256 = _ut256;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _utX {
    pub v80: ut80,
    pub v96: ut96,
    pub v128: ut128,
    pub v256: ut256,
}
#[test]
fn bindgen_test_layout__utX() {
    const UNINIT: ::std::mem::MaybeUninit<_utX> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_utX>(),
        80usize,
        concat!("Size of: ", stringify!(_utX))
    );
    assert_eq!(
        ::std::mem::align_of::<_utX>(),
        8usize,
        concat!("Alignment of ", stringify!(_utX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v80) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_utX), "::", stringify!(v80))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v96) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_utX), "::", stringify!(v96))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v128) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_utX),
            "::",
            stringify!(v128)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v256) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_utX),
            "::",
            stringify!(v256)
        )
    );
}
pub type utX = _utX;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type fpos_t = __fpos64_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}tmpfile64"]
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}fopen64"]
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}freopen64"]
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}fseeko64"]
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}ftello64"]
    pub fn ftello(__stream: *mut FILE) -> __off64_t;
}
extern "C" {
    #[link_name = "\u{1}fgetpos64"]
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}fsetpos64"]
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::std::mem::MaybeUninit<random_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::std::mem::MaybeUninit<drand48_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}mkstemp64"]
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}mkstemps64"]
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off64_t,
    pub l_len: __off64_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    const UNINIT: ::std::mem::MaybeUninit<flock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::std::mem::MaybeUninit<stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}fcntl64"]
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}open64"]
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}openat64"]
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}creat64"]
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}lockf64"]
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}posix_fadvise64"]
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: __off64_t,
        __len: __off64_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}posix_fallocate64"]
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: __off64_t,
        __len: __off64_t,
    ) -> ::std::os::raw::c_int;
}
pub type PrintfCallback = ::std::option::Option<
    unsafe extern "C" fn(str_: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[link_name = "\u{1}stat64"]
    pub fn stat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}fstat64"]
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}fstatat64"]
    pub fn fstatat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}lstat64"]
    pub fn lstat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__fxstat64"]
    pub fn __fxstat(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__xstat64"]
    pub fn __xstat(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__lxstat64"]
    pub fn __lxstat(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__fxstatat64"]
    pub fn __fxstatat(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknod(
        __ver: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknodat(
        __ver: ::std::os::raw::c_int,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __ino64_t,
    pub d_off: __off64_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    const UNINIT: ::std::mem::MaybeUninit<dirent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        280usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        8usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_ino) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_off) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_reclen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_type) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_name) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
pub const DT_UNKNOWN: _bindgen_ty_3 = 0;
pub const DT_FIFO: _bindgen_ty_3 = 1;
pub const DT_CHR: _bindgen_ty_3 = 2;
pub const DT_DIR: _bindgen_ty_3 = 4;
pub const DT_BLK: _bindgen_ty_3 = 6;
pub const DT_REG: _bindgen_ty_3 = 8;
pub const DT_LNK: _bindgen_ty_3 = 10;
pub const DT_SOCK: _bindgen_ty_3 = 12;
pub const DT_WHT: _bindgen_ty_3 = 14;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
extern "C" {
    pub fn opendir(__name: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    pub fn fdopendir(__fd: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    pub fn closedir(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}readdir64"]
    pub fn readdir(__dirp: *mut DIR) -> *mut dirent;
}
extern "C" {
    #[link_name = "\u{1}readdir64_r"]
    pub fn readdir_r(
        __dirp: *mut DIR,
        __entry: *mut dirent,
        __result: *mut *mut dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewinddir(__dirp: *mut DIR);
}
extern "C" {
    pub fn seekdir(__dirp: *mut DIR, __pos: ::std::os::raw::c_long);
}
extern "C" {
    pub fn telldir(__dirp: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dirfd(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}scandir64"]
    pub fn scandir(
        __dir: *const ::std::os::raw::c_char,
        __namelist: *mut *mut *mut dirent,
        __selector: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        __cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}alphasort64"]
    pub fn alphasort(__e1: *mut *const dirent, __e2: *mut *const dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}getdirentries64"]
    pub fn getdirentries(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
        __basep: *mut __off64_t,
    ) -> __ssize_t;
}
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}lseek64"]
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}pread64"]
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off64_t,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}pwrite64"]
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off64_t,
    ) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_4 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_4 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_4 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_4 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_4 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_4 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_4 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_4 = 7;
pub const _PC_VDISABLE: _bindgen_ty_4 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_4 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_4 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_4 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_4 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_4 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_4 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_4 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_4 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_4 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_4 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_4 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_4 = 20;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_5 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_5 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_5 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_5 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_5 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_5 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_5 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_5 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_5 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_5 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_5 = 10;
pub const _SC_TIMERS: _bindgen_ty_5 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_5 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_5 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_5 = 14;
pub const _SC_FSYNC: _bindgen_ty_5 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_5 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_5 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_5 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_5 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_5 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_5 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_5 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_5 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_5 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_5 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_5 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_5 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_5 = 28;
pub const _SC_VERSION: _bindgen_ty_5 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_5 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_5 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_5 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_5 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_5 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_5 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_5 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_5 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_5 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_5 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_5 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_5 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_5 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_5 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_5 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_5 = 45;
pub const _SC_2_VERSION: _bindgen_ty_5 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_5 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_5 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_5 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_5 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_5 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_5 = 52;
pub const _SC_PII: _bindgen_ty_5 = 53;
pub const _SC_PII_XTI: _bindgen_ty_5 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_5 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_5 = 56;
pub const _SC_PII_OSI: _bindgen_ty_5 = 57;
pub const _SC_POLL: _bindgen_ty_5 = 58;
pub const _SC_SELECT: _bindgen_ty_5 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_5 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_5 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_5 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_5 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_5 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_5 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_5 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_5 = 66;
pub const _SC_THREADS: _bindgen_ty_5 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_5 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_5 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_5 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_5 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_5 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_5 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_5 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_5 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_5 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_5 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_5 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_5 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_5 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_5 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_5 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_5 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_5 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_5 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_5 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_5 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_5 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_5 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_5 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_5 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_5 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_5 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_5 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_5 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_5 = 96;
pub const _SC_2_UPE: _bindgen_ty_5 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_5 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_5 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_5 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_5 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_5 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_5 = 103;
pub const _SC_INT_MAX: _bindgen_ty_5 = 104;
pub const _SC_INT_MIN: _bindgen_ty_5 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_5 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_5 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_5 = 108;
pub const _SC_NZERO: _bindgen_ty_5 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_5 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_5 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_5 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_5 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_5 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_5 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_5 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_5 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_5 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_5 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_5 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_5 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_5 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_5 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_5 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_5 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_5 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_5 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_5 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_5 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_5 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_5 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_5 = 132;
pub const _SC_BARRIERS: _bindgen_ty_5 = 133;
pub const _SC_BASE: _bindgen_ty_5 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_5 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_5 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_5 = 137;
pub const _SC_CPUTIME: _bindgen_ty_5 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_5 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_5 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_5 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_5 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_5 = 143;
pub const _SC_FIFO: _bindgen_ty_5 = 144;
pub const _SC_PIPE: _bindgen_ty_5 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_5 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_5 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_5 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_5 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_5 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_5 = 151;
pub const _SC_NETWORKING: _bindgen_ty_5 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_5 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_5 = 154;
pub const _SC_REGEXP: _bindgen_ty_5 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_5 = 156;
pub const _SC_SHELL: _bindgen_ty_5 = 157;
pub const _SC_SIGNALS: _bindgen_ty_5 = 158;
pub const _SC_SPAWN: _bindgen_ty_5 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_5 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_5 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_5 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_5 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_5 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_5 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_5 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_5 = 167;
pub const _SC_2_PBS: _bindgen_ty_5 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_5 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_5 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_5 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_5 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_5 = 173;
pub const _SC_STREAMS: _bindgen_ty_5 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_5 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_5 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_5 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_5 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_5 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_5 = 180;
pub const _SC_TRACE: _bindgen_ty_5 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_5 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_5 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_5 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_5 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_5 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_5 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_5 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_5 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_5 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_5 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_5 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_5 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_5 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_5 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_5 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_5 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_5 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_5 = 199;
pub const _SC_IPV6: _bindgen_ty_5 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_5 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_5 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_5 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_5 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_5 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_5 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_5 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_5 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_5 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_5 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_5 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_5 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_5 = 248;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_6 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_6 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_6 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_6 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_6 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_6 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_6 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_6 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_6 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_6 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_6 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_6 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_6 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_6 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_6 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_6 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_6 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_6 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_6 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_6 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_6 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_6 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_6 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_6 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_6 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_6 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_6 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_6 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_6 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_6 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_6 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_6 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_6 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_6 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_6 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_6 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_6 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_6 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_6 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_6 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_6 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_6 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_6 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_6 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_6 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_6 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_6 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_6 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_6 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_6 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_6 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_6 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_6 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_6 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_6 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_6 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_6 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_6 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_6 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_6 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_6 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_6 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_6 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_6 = 1149;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}truncate64"]
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}ftruncate64"]
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    const UNINIT: ::std::mem::MaybeUninit<timezone> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_minuteswest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_dsttime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
extern "C" {
    pub fn gettimeofday(
        __tv: *mut timeval,
        __tz: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::std::os::raw::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    const UNINIT: ::std::mem::MaybeUninit<itimerval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = ::std::os::raw::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval) -> ::std::os::raw::c_int;
}
pub const RzSysArch_RZ_SYS_ARCH_NONE: RzSysArch = 0;
pub const RzSysArch_RZ_SYS_ARCH_X86: RzSysArch = 1;
pub const RzSysArch_RZ_SYS_ARCH_ARM: RzSysArch = 2;
pub const RzSysArch_RZ_SYS_ARCH_PPC: RzSysArch = 3;
pub const RzSysArch_RZ_SYS_ARCH_M68K: RzSysArch = 4;
pub const RzSysArch_RZ_SYS_ARCH_JAVA: RzSysArch = 5;
pub const RzSysArch_RZ_SYS_ARCH_MIPS: RzSysArch = 6;
pub const RzSysArch_RZ_SYS_ARCH_SPARC: RzSysArch = 7;
pub const RzSysArch_RZ_SYS_ARCH_XAP: RzSysArch = 8;
pub const RzSysArch_RZ_SYS_ARCH_MSIL: RzSysArch = 9;
pub const RzSysArch_RZ_SYS_ARCH_OBJD: RzSysArch = 10;
pub const RzSysArch_RZ_SYS_ARCH_BF: RzSysArch = 11;
pub const RzSysArch_RZ_SYS_ARCH_SH: RzSysArch = 12;
pub const RzSysArch_RZ_SYS_ARCH_AVR: RzSysArch = 13;
pub const RzSysArch_RZ_SYS_ARCH_DALVIK: RzSysArch = 14;
pub const RzSysArch_RZ_SYS_ARCH_Z80: RzSysArch = 15;
pub const RzSysArch_RZ_SYS_ARCH_ARC: RzSysArch = 16;
pub const RzSysArch_RZ_SYS_ARCH_I8080: RzSysArch = 17;
pub const RzSysArch_RZ_SYS_ARCH_RAR: RzSysArch = 18;
pub const RzSysArch_RZ_SYS_ARCH_8051: RzSysArch = 19;
pub const RzSysArch_RZ_SYS_ARCH_TMS320: RzSysArch = 20;
pub const RzSysArch_RZ_SYS_ARCH_EBC: RzSysArch = 21;
pub const RzSysArch_RZ_SYS_ARCH_H8300: RzSysArch = 22;
pub const RzSysArch_RZ_SYS_ARCH_CR16: RzSysArch = 23;
pub const RzSysArch_RZ_SYS_ARCH_V850: RzSysArch = 24;
pub const RzSysArch_RZ_SYS_ARCH_SYSZ: RzSysArch = 25;
pub const RzSysArch_RZ_SYS_ARCH_XCORE: RzSysArch = 26;
pub const RzSysArch_RZ_SYS_ARCH_PROPELLER: RzSysArch = 27;
pub const RzSysArch_RZ_SYS_ARCH_MSP430: RzSysArch = 28;
pub const RzSysArch_RZ_SYS_ARCH_CRIS: RzSysArch = 29;
pub const RzSysArch_RZ_SYS_ARCH_HPPA: RzSysArch = 30;
pub const RzSysArch_RZ_SYS_ARCH_V810: RzSysArch = 31;
pub const RzSysArch_RZ_SYS_ARCH_LM32: RzSysArch = 32;
pub const RzSysArch_RZ_SYS_ARCH_RISCV: RzSysArch = 33;
pub type RzSysArch = ::std::os::raw::c_uint;
pub type RzRef = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_core_t {
    _unused: [u8; 0],
}
pub type RzCore = rz_core_t;
#[doc = "  \\struct bitvector_t\n  \\brief structure for bitvector\n\n  Ref : https://web.cs.dal.ca/~jamie/UWO/BitVectors/README.html"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bitvector_t {
    pub bits: bitvector_t__bindgen_ty_1,
    #[doc = "< length of ut8 array (bits.large_a) -- real / physical"]
    pub _elem_len: ::std::os::raw::c_uint,
    #[doc = "< number of bits -- virtual / logical"]
    pub len: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bitvector_t__bindgen_ty_1 {
    #[doc = "< little endian array of bytes for bitvectors > 64 bits whose size is defined in _elem_len"]
    pub large_a: *mut ::std::os::raw::c_uchar,
    #[doc = "< value of the bitvector when the size is <= 64 bits"]
    pub small_u: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_bitvector_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<bitvector_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bitvector_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(bitvector_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<bitvector_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(bitvector_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).large_a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bitvector_t__bindgen_ty_1),
            "::",
            stringify!(large_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).small_u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bitvector_t__bindgen_ty_1),
            "::",
            stringify!(small_u)
        )
    );
}
#[test]
fn bindgen_test_layout_bitvector_t() {
    const UNINIT: ::std::mem::MaybeUninit<bitvector_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bitvector_t>(),
        16usize,
        concat!("Size of: ", stringify!(bitvector_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bitvector_t>(),
        8usize,
        concat!("Alignment of ", stringify!(bitvector_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bitvector_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._elem_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bitvector_t),
            "::",
            stringify!(_elem_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bitvector_t),
            "::",
            stringify!(len)
        )
    );
}
#[doc = "  \\struct bitvector_t\n  \\brief structure for bitvector\n\n  Ref : https://web.cs.dal.ca/~jamie/UWO/BitVectors/README.html"]
pub type RzBitVector = bitvector_t;
extern "C" {
    pub fn rz_bv_init(bv: *mut RzBitVector, length: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn rz_bv_new(length: ::std::os::raw::c_uint) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_dup(bv: *const RzBitVector) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_append(bv1: *mut RzBitVector, bv2: *mut RzBitVector) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_copy(src: *const RzBitVector, dst: *mut RzBitVector) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_bv_copy_nbits(
        src: *const RzBitVector,
        src_start_pos: ::std::os::raw::c_uint,
        dst: *mut RzBitVector,
        dst_start_pos: ::std::os::raw::c_uint,
        nbit: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_bv_fini(bv: *mut RzBitVector);
}
extern "C" {
    pub fn rz_bv_free(bv: *mut RzBitVector);
}
extern "C" {
    pub fn rz_bv_set(bv: *mut RzBitVector, pos: ::std::os::raw::c_uint, b: bool) -> bool;
}
extern "C" {
    pub fn rz_bv_set_all(bv: *mut RzBitVector, b: bool) -> bool;
}
extern "C" {
    pub fn rz_bv_set_range(
        bv: *mut RzBitVector,
        pos_start: ::std::os::raw::c_uint,
        pos_end: ::std::os::raw::c_uint,
        b: bool,
    ) -> bool;
}
extern "C" {
    pub fn rz_bv_toggle(bv: *mut RzBitVector, pos: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn rz_bv_toggle_all(bv: *mut RzBitVector) -> bool;
}
extern "C" {
    pub fn rz_bv_append_zero(
        bv: *mut RzBitVector,
        delta_len: ::std::os::raw::c_uint,
    ) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_prepend_zero(
        bv: *mut RzBitVector,
        delta_len: ::std::os::raw::c_uint,
    ) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_cut_head(
        bv: *mut RzBitVector,
        delta_len: ::std::os::raw::c_uint,
    ) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_cut_tail(
        bv: *mut RzBitVector,
        delta_len: ::std::os::raw::c_uint,
    ) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_get(bv: *const RzBitVector, pos: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn rz_bv_lshift(bv: *mut RzBitVector, size: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn rz_bv_rshift(bv: *mut RzBitVector, size: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn rz_bv_lshift_fill(
        bv: *mut RzBitVector,
        size: ::std::os::raw::c_uint,
        fill_bit: bool,
    ) -> bool;
}
extern "C" {
    pub fn rz_bv_rshift_fill(
        bv: *mut RzBitVector,
        size: ::std::os::raw::c_uint,
        fill_bit: bool,
    ) -> bool;
}
extern "C" {
    pub fn rz_bv_and(x: *mut RzBitVector, y: *mut RzBitVector) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_or(x: *mut RzBitVector, y: *mut RzBitVector) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_xor(x: *mut RzBitVector, y: *mut RzBitVector) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_complement_1(bv: *mut RzBitVector) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_complement_2(bv: *mut RzBitVector) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_add(
        x: *mut RzBitVector,
        y: *mut RzBitVector,
        carry: *mut bool,
    ) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_sub(
        x: *mut RzBitVector,
        y: *mut RzBitVector,
        borrow: *mut bool,
    ) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_mul(x: *mut RzBitVector, y: *mut RzBitVector) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_div(x: *mut RzBitVector, y: *mut RzBitVector) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_mod(x: *mut RzBitVector, y: *mut RzBitVector) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_sdiv(x: *mut RzBitVector, y: *mut RzBitVector) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_smod(x: *mut RzBitVector, y: *mut RzBitVector) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_msb(bv: *mut RzBitVector) -> bool;
}
extern "C" {
    pub fn rz_bv_lsb(bv: *mut RzBitVector) -> bool;
}
extern "C" {
    pub fn rz_bv_eq(x: *mut RzBitVector, y: *mut RzBitVector) -> bool;
}
extern "C" {
    pub fn rz_bv_ule(x: *mut RzBitVector, y: *mut RzBitVector) -> bool;
}
extern "C" {
    pub fn rz_bv_sle(x: *mut RzBitVector, y: *mut RzBitVector) -> bool;
}
extern "C" {
    pub fn rz_bv_clz(bv: *mut RzBitVector) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_bv_ctz(bv: *mut RzBitVector) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_bv_to_ut8(x: *const RzBitVector) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_bv_to_ut16(x: *const RzBitVector) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn rz_bv_to_ut32(x: *const RzBitVector) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_bv_to_ut64(x: *const RzBitVector) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_bv_is_zero_vector(x: *const RzBitVector) -> bool;
}
extern "C" {
    pub fn rz_bv_is_all_one(x: *const RzBitVector) -> bool;
}
extern "C" {
    pub fn rz_bv_new_from_ut64(
        length: ::std::os::raw::c_uint,
        value: ::std::os::raw::c_ulonglong,
    ) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_new_from_st64(
        length: ::std::os::raw::c_uint,
        value: ::std::os::raw::c_longlong,
    ) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_new_from_bytes_le(
        buf: *const ::std::os::raw::c_uchar,
        bit_offset: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
    ) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_new_from_bytes_be(
        buf: *const ::std::os::raw::c_uchar,
        bit_offset: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
    ) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_bv_set_from_ut64(bv: *mut RzBitVector, value: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn rz_bv_set_from_st64(bv: *mut RzBitVector, value: ::std::os::raw::c_longlong) -> bool;
}
extern "C" {
    pub fn rz_bv_set_from_bytes_le(
        bv: *mut RzBitVector,
        buf: *const ::std::os::raw::c_uchar,
        bit_offset: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rz_bv_set_from_bytes_be(
        bv: *mut RzBitVector,
        buf: *const ::std::os::raw::c_uchar,
        bit_offset: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rz_bv_set_to_bytes_le(bv: *const RzBitVector, buf: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn rz_bv_set_to_bytes_be(bv: *const RzBitVector, buf: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn rz_bv_as_string(bv: *const RzBitVector) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_bv_as_hex_string(bv: *const RzBitVector, pad: bool) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_bv_len(bv: *const RzBitVector) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_bv_len_bytes(bv: *const RzBitVector) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_bv_cmp(x: *mut RzBitVector, y: *mut RzBitVector) -> bool;
}
extern "C" {
    pub fn rz_bv_hash(x: *mut RzBitVector) -> ::std::os::raw::c_uint;
}
pub type SdbListFree =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
pub type SdbListComparator = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ls_iter_t {
    pub data: *mut ::std::os::raw::c_void,
    pub n: *mut ls_iter_t,
    pub p: *mut ls_iter_t,
}
#[test]
fn bindgen_test_layout_ls_iter_t() {
    const UNINIT: ::std::mem::MaybeUninit<ls_iter_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ls_iter_t>(),
        24usize,
        concat!("Size of: ", stringify!(ls_iter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ls_iter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ls_iter_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_iter_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_iter_t),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_iter_t),
            "::",
            stringify!(p)
        )
    );
}
pub type SdbListIter = ls_iter_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ls_t {
    pub length: usize,
    pub head: *mut SdbListIter,
    pub tail: *mut SdbListIter,
    pub free: SdbListFree,
    pub cmp: SdbListComparator,
    pub sorted: bool,
}
#[test]
fn bindgen_test_layout_ls_t() {
    const UNINIT: ::std::mem::MaybeUninit<ls_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ls_t>(),
        48usize,
        concat!("Size of: ", stringify!(ls_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ls_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ls_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_t),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_t),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmp) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(ls_t), "::", stringify!(cmp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sorted) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_t),
            "::",
            stringify!(sorted)
        )
    );
}
pub type SdbList = ls_t;
extern "C" {
    pub fn ls_new() -> *mut SdbList;
}
extern "C" {
    pub fn ls_newf(freefn: SdbListFree) -> *mut SdbList;
}
extern "C" {
    pub fn ls_append(list: *mut SdbList, data: *mut ::std::os::raw::c_void) -> *mut SdbListIter;
}
extern "C" {
    pub fn ls_prepend(list: *mut SdbList, data: *mut ::std::os::raw::c_void) -> *mut SdbListIter;
}
extern "C" {
    pub fn ls_sort(list: *mut SdbList, cmp: SdbListComparator) -> bool;
}
extern "C" {
    pub fn ls_merge_sort(list: *mut SdbList, cmp: SdbListComparator) -> bool;
}
extern "C" {
    pub fn ls_delete(list: *mut SdbList, iter: *mut SdbListIter);
}
extern "C" {
    pub fn ls_delete_data(list: *mut SdbList, ptr: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn ls_iter_init(iter: *mut SdbListIter, list: *mut SdbList);
}
extern "C" {
    pub fn ls_destroy(list: *mut SdbList);
}
extern "C" {
    pub fn ls_free(list: *mut SdbList);
}
extern "C" {
    pub fn ls_item_new(data: *mut ::std::os::raw::c_void) -> *mut SdbListIter;
}
extern "C" {
    pub fn ls_unlink(list: *mut SdbList, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ls_split(list: *mut SdbList, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ls_split_iter(list: *mut SdbList, iter: *mut SdbListIter);
}
extern "C" {
    pub fn ls_get_n(list: *mut SdbList, n: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ls_get_top(list: *mut SdbList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ls_pop(list: *mut SdbList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ls_reverse(list: *mut SdbList);
}
extern "C" {
    pub fn ls_clone(list: *mut SdbList) -> *mut SdbList;
}
extern "C" {
    pub fn ls_join(first: *mut SdbList, second: *mut SdbList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ls_del_n(list: *mut SdbList, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ls_insert(
        list: *mut SdbList,
        n: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut SdbListIter;
}
extern "C" {
    pub fn ls_pop_head(list: *mut SdbList) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_pp_kv {
    pub key: *mut ::std::os::raw::c_void,
    pub value: *mut ::std::os::raw::c_void,
    pub key_len: ::std::os::raw::c_uint,
    pub value_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ht_pp_kv() {
    const UNINIT: ::std::mem::MaybeUninit<ht_pp_kv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ht_pp_kv>(),
        24usize,
        concat!("Size of: ", stringify!(ht_pp_kv))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_pp_kv>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_pp_kv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_kv),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_kv),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_kv),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_len) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_kv),
            "::",
            stringify!(value_len)
        )
    );
}
pub type HtPPKv = ht_pp_kv;
pub type HtPPKvFreeFunc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut HtPPKv)>;
pub type HtPPDupKey = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type HtPPDupValue = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type HtPPCalcSizeK = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
pub type HtPPCalcSizeV = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
pub type HtPPHashFunction = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
pub type HtPPListComparator = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type HtPPForeachCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_pp_bucket_t {
    pub arr: *mut HtPPKv,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ht_pp_bucket_t() {
    const UNINIT: ::std::mem::MaybeUninit<ht_pp_bucket_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ht_pp_bucket_t>(),
        16usize,
        concat!("Size of: ", stringify!(ht_pp_bucket_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_pp_bucket_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_pp_bucket_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_bucket_t),
            "::",
            stringify!(arr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_bucket_t),
            "::",
            stringify!(count)
        )
    );
}
pub type HtPPBucket = ht_pp_bucket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_pp_options_t {
    pub cmp: HtPPListComparator,
    pub hashfn: HtPPHashFunction,
    pub dupkey: HtPPDupKey,
    pub dupvalue: HtPPDupValue,
    pub calcsizeK: HtPPCalcSizeK,
    pub calcsizeV: HtPPCalcSizeV,
    pub freefn: HtPPKvFreeFunc,
    pub elem_size: usize,
}
#[test]
fn bindgen_test_layout_ht_pp_options_t() {
    const UNINIT: ::std::mem::MaybeUninit<ht_pp_options_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ht_pp_options_t>(),
        64usize,
        concat!("Size of: ", stringify!(ht_pp_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_pp_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_pp_options_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(cmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashfn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(hashfn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dupkey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(dupkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dupvalue) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(dupvalue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calcsizeK) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(calcsizeK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calcsizeV) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(calcsizeV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freefn) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(freefn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elem_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(elem_size)
        )
    );
}
pub type HtPPOptions = ht_pp_options_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_pp_t {
    pub size: ::std::os::raw::c_uint,
    pub count: ::std::os::raw::c_uint,
    pub table: *mut HtPPBucket,
    pub prime_idx: ::std::os::raw::c_uint,
    pub opt: HtPPOptions,
}
#[test]
fn bindgen_test_layout_ht_pp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ht_pp_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ht_pp_t>(),
        88usize,
        concat!("Size of: ", stringify!(ht_pp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_pp_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_pp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_t),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prime_idx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_t),
            "::",
            stringify!(prime_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_t),
            "::",
            stringify!(opt)
        )
    );
}
pub type HtPP = ht_pp_t;
extern "C" {
    pub fn ht_pp_new_opt(opt: *mut HtPPOptions) -> *mut HtPP;
}
extern "C" {
    pub fn ht_pp_free(ht: *mut HtPP);
}
extern "C" {
    pub fn ht_pp_insert(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ht_pp_update(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ht_pp_update_key(
        ht: *mut HtPP,
        old_key: *const ::std::os::raw::c_void,
        new_key: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ht_pp_delete(ht: *mut HtPP, key: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn ht_pp_find(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_void,
        found: *mut bool,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ht_pp_foreach(ht: *mut HtPP, cb: HtPPForeachCallback, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ht_pp_find_kv(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_void,
        found: *mut bool,
    ) -> *mut HtPPKv;
}
extern "C" {
    pub fn ht_pp_insert_kv(ht: *mut HtPP, kv: *mut HtPPKv, update: bool) -> bool;
}
extern "C" {
    pub fn ht_pp_new0() -> *mut HtPP;
}
extern "C" {
    pub fn ht_pp_new(
        valdup: HtPPDupValue,
        pair_free: HtPPKvFreeFunc,
        valueSize: HtPPCalcSizeV,
    ) -> *mut HtPP;
}
extern "C" {
    pub fn ht_pp_new_size(
        initial_size: ::std::os::raw::c_uint,
        valdup: HtPPDupValue,
        pair_free: HtPPKvFreeFunc,
        valueSize: HtPPCalcSizeV,
    ) -> *mut HtPP;
}
pub type RzListFree = ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_list_iter_t {
    pub data: *mut ::std::os::raw::c_void,
    pub n: *mut rz_list_iter_t,
    pub p: *mut rz_list_iter_t,
}
#[test]
fn bindgen_test_layout_rz_list_iter_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_list_iter_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_list_iter_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_list_iter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_list_iter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_list_iter_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_list_iter_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_list_iter_t),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_list_iter_t),
            "::",
            stringify!(p)
        )
    );
}
pub type RzListIter = rz_list_iter_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_list_t {
    pub head: *mut RzListIter,
    pub tail: *mut RzListIter,
    pub free: RzListFree,
    pub length: ::std::os::raw::c_uint,
    pub sorted: bool,
}
#[test]
fn bindgen_test_layout_rz_list_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_list_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_list_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_list_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_list_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_list_t),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_list_t),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_list_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_list_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sorted) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_list_t),
            "::",
            stringify!(sorted)
        )
    );
}
pub type RzList = rz_list_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_list_range_t {
    pub h: *mut HtPP,
    pub l: *mut RzList,
}
#[test]
fn bindgen_test_layout_rz_list_range_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_list_range_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_list_range_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_list_range_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_list_range_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_list_range_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_list_range_t),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_list_range_t),
            "::",
            stringify!(l)
        )
    );
}
pub type RzListRange = rz_list_range_t;
pub type RzListComparator = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        list_data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn rz_list_new() -> *mut RzList;
}
extern "C" {
    pub fn rz_list_newf(f: RzListFree) -> *mut RzList;
}
extern "C" {
    pub fn rz_list_new_from_array(
        arr: *mut *const ::std::os::raw::c_void,
        arr_size: usize,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_list_iter_get_next(iter: *mut RzListIter) -> *mut RzListIter;
}
extern "C" {
    pub fn rz_list_iter_get_next_data(iter: *mut RzListIter) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_list_set_n(
        list: *mut RzList,
        n: ::std::os::raw::c_uint,
        p: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_list_iter_get_data(iter: *mut RzListIter) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_list_append(list: *mut RzList, data: *mut ::std::os::raw::c_void) -> *mut RzListIter;
}
extern "C" {
    pub fn rz_list_prepend(list: *mut RzList, data: *mut ::std::os::raw::c_void)
        -> *mut RzListIter;
}
extern "C" {
    pub fn rz_list_insert(
        list: *mut RzList,
        n: ::std::os::raw::c_uint,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RzListIter;
}
extern "C" {
    pub fn rz_list_length(list: *const RzList) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_list_first(list: *const RzList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_list_last(list: *const RzList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_list_add_sorted(
        list: *mut RzList,
        data: *mut ::std::os::raw::c_void,
        cmp: RzListComparator,
    ) -> *mut RzListIter;
}
extern "C" {
    pub fn rz_list_sort(list: *mut RzList, cmp: RzListComparator);
}
extern "C" {
    pub fn rz_list_merge_sort(list: *mut RzList, cmp: RzListComparator);
}
extern "C" {
    pub fn rz_list_insertion_sort(list: *mut RzList, cmp: RzListComparator);
}
extern "C" {
    pub fn rz_list_uniq(list: *const RzList, cmp: RzListComparator) -> *mut RzList;
}
extern "C" {
    pub fn rz_list_init(list: *mut RzList);
}
extern "C" {
    pub fn rz_list_delete(list: *mut RzList, iter: *mut RzListIter);
}
extern "C" {
    pub fn rz_list_delete_data(list: *mut RzList, ptr: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn rz_list_purge(list: *mut RzList);
}
extern "C" {
    pub fn rz_list_free(list: *mut RzList);
}
extern "C" {
    pub fn rz_list_item_new(data: *mut ::std::os::raw::c_void) -> *mut RzListIter;
}
extern "C" {
    pub fn rz_list_split(list: *mut RzList, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rz_list_split_iter(list: *mut RzList, iter: *mut RzListIter);
}
extern "C" {
    pub fn rz_list_join(list1: *mut RzList, list2: *mut RzList) -> bool;
}
extern "C" {
    pub fn rz_list_get_n(
        list: *const RzList,
        n: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_list_del_n(list: *mut RzList, n: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_list_get_top(list: *const RzList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_list_get_bottom(list: *const RzList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_list_iterator(list: *const RzList) -> *mut RzListIter;
}
extern "C" {
    pub fn rz_list_push(list: *mut RzList, item: *mut ::std::os::raw::c_void) -> *mut RzListIter;
}
extern "C" {
    pub fn rz_list_pop(list: *mut RzList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_list_pop_head(list: *mut RzList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_list_reverse(list: *mut RzList);
}
extern "C" {
    pub fn rz_list_clone(list: *const RzList) -> *mut RzList;
}
extern "C" {
    pub fn rz_list_to_str(
        list: *mut RzList,
        ch: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_list_of_sdblist(sl: *mut SdbList) -> *mut RzList;
}
extern "C" {
    pub fn rz_list_contains(
        list: *const RzList,
        ptr: *const ::std::os::raw::c_void,
    ) -> *mut RzListIter;
}
extern "C" {
    pub fn rz_list_find_ptr(
        list: *const RzList,
        ptr: *const ::std::os::raw::c_void,
    ) -> *mut RzListIter;
}
extern "C" {
    pub fn rz_list_find(
        list: *const RzList,
        p: *const ::std::os::raw::c_void,
        cmp: RzListComparator,
    ) -> *mut RzListIter;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzStrBuf {
    pub buf: [::std::os::raw::c_char; 32usize],
    pub len: usize,
    pub ptr: *mut ::std::os::raw::c_char,
    pub ptrlen: usize,
    pub weakref: bool,
}
#[test]
fn bindgen_test_layout_RzStrBuf() {
    const UNINIT: ::std::mem::MaybeUninit<RzStrBuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzStrBuf>(),
        64usize,
        concat!("Size of: ", stringify!(RzStrBuf))
    );
    assert_eq!(
        ::std::mem::align_of::<RzStrBuf>(),
        8usize,
        concat!("Alignment of ", stringify!(RzStrBuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzStrBuf),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RzStrBuf),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RzStrBuf),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptrlen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RzStrBuf),
            "::",
            stringify!(ptrlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weakref) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RzStrBuf),
            "::",
            stringify!(weakref)
        )
    );
}
extern "C" {
    pub fn rz_strbuf_new(s: *const ::std::os::raw::c_char) -> *mut RzStrBuf;
}
extern "C" {
    pub fn rz_strbuf_set(
        sb: *mut RzStrBuf,
        s: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_strbuf_slice(sb: *mut RzStrBuf, from: usize, len: usize) -> bool;
}
extern "C" {
    pub fn rz_strbuf_setbin(
        sb: *mut RzStrBuf,
        s: *const ::std::os::raw::c_uchar,
        len: usize,
    ) -> bool;
}
extern "C" {
    pub fn rz_strbuf_getbin(
        sb: *mut RzStrBuf,
        len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_strbuf_setf(
        sb: *mut RzStrBuf,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_strbuf_vsetf(
        sb: *mut RzStrBuf,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_strbuf_append(sb: *mut RzStrBuf, s: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_strbuf_append_n(
        sb: *mut RzStrBuf,
        s: *const ::std::os::raw::c_char,
        l: usize,
    ) -> bool;
}
extern "C" {
    pub fn rz_strbuf_prepend(sb: *mut RzStrBuf, s: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_strbuf_appendf(sb: *mut RzStrBuf, fmt: *const ::std::os::raw::c_char, ...) -> bool;
}
extern "C" {
    pub fn rz_strbuf_vappendf(
        sb: *mut RzStrBuf,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> bool;
}
extern "C" {
    pub fn rz_strbuf_get(sb: *mut RzStrBuf) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_strbuf_drain(sb: *mut RzStrBuf) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_strbuf_drain_nofree(sb: *mut RzStrBuf) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_strbuf_length(sb: *mut RzStrBuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_strbuf_free(sb: *mut RzStrBuf);
}
extern "C" {
    pub fn rz_strbuf_fini(sb: *mut RzStrBuf);
}
extern "C" {
    pub fn rz_strbuf_init(sb: *mut RzStrBuf);
}
extern "C" {
    pub fn rz_strbuf_initf(
        sb: *mut RzStrBuf,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_strbuf_copy(dst: *mut RzStrBuf, src: *mut RzStrBuf) -> bool;
}
extern "C" {
    pub fn rz_strbuf_equals(sa: *mut RzStrBuf, sb: *mut RzStrBuf) -> bool;
}
extern "C" {
    pub fn rz_strbuf_reserve(sb: *mut RzStrBuf, len: usize) -> bool;
}
extern "C" {
    pub fn rz_strbuf_is_empty(sb: *mut RzStrBuf) -> bool;
}
extern "C" {
    pub fn rz_strbuf_setptr(
        sb: *mut RzStrBuf,
        p: *mut ::std::os::raw::c_char,
        l: ::std::os::raw::c_int,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_t {
    pub sb: RzStrBuf,
    pub is_first: bool,
    pub is_key: bool,
    pub braces: [::std::os::raw::c_char; 128usize],
    pub level: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pj_t() {
    const UNINIT: ::std::mem::MaybeUninit<pj_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pj_t>(),
        200usize,
        concat!("Size of: ", stringify!(pj_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pj_t), "::", stringify!(sb))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_first) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_t),
            "::",
            stringify!(is_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_key) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_t),
            "::",
            stringify!(is_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).braces) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_t),
            "::",
            stringify!(braces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_t),
            "::",
            stringify!(level)
        )
    );
}
pub type PJ = pj_t;
extern "C" {
    pub fn pj_new() -> *mut PJ;
}
extern "C" {
    pub fn pj_free(j: *mut PJ);
}
extern "C" {
    pub fn pj_reset(j: *mut PJ);
}
extern "C" {
    pub fn pj_drain(j: *mut PJ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_string(pj: *mut PJ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_raw(j: *mut PJ, k: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn pj_end(j: *mut PJ) -> *mut PJ;
}
extern "C" {
    pub fn pj_o(j: *mut PJ) -> *mut PJ;
}
extern "C" {
    pub fn pj_a(j: *mut PJ) -> *mut PJ;
}
extern "C" {
    pub fn pj_k(j: *mut PJ, k: *const ::std::os::raw::c_char) -> *mut PJ;
}
extern "C" {
    pub fn pj_knull(j: *mut PJ, k: *const ::std::os::raw::c_char) -> *mut PJ;
}
extern "C" {
    pub fn pj_kn(
        j: *mut PJ,
        k: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulonglong,
    ) -> *mut PJ;
}
extern "C" {
    pub fn pj_kN(
        j: *mut PJ,
        k: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_longlong,
    ) -> *mut PJ;
}
extern "C" {
    pub fn pj_ks(
        j: *mut PJ,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> *mut PJ;
}
extern "C" {
    pub fn pj_ka(j: *mut PJ, k: *const ::std::os::raw::c_char) -> *mut PJ;
}
extern "C" {
    pub fn pj_ko(j: *mut PJ, k: *const ::std::os::raw::c_char) -> *mut PJ;
}
extern "C" {
    pub fn pj_ki(j: *mut PJ, k: *const ::std::os::raw::c_char, d: ::std::os::raw::c_int)
        -> *mut PJ;
}
extern "C" {
    pub fn pj_kd(j: *mut PJ, k: *const ::std::os::raw::c_char, d: f64) -> *mut PJ;
}
extern "C" {
    pub fn pj_kf(j: *mut PJ, k: *const ::std::os::raw::c_char, d: f32) -> *mut PJ;
}
extern "C" {
    pub fn pj_kb(j: *mut PJ, k: *const ::std::os::raw::c_char, v: bool) -> *mut PJ;
}
extern "C" {
    pub fn pj_null(j: *mut PJ) -> *mut PJ;
}
extern "C" {
    pub fn pj_r(j: *mut PJ, v: *const ::std::os::raw::c_uchar, v_len: usize) -> *mut PJ;
}
extern "C" {
    pub fn pj_kr(
        j: *mut PJ,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_uchar,
        v_len: usize,
    ) -> *mut PJ;
}
extern "C" {
    pub fn pj_s(j: *mut PJ, k: *const ::std::os::raw::c_char) -> *mut PJ;
}
extern "C" {
    pub fn pj_S(j: *mut PJ, k: *const ::std::os::raw::c_char) -> *mut PJ;
}
extern "C" {
    pub fn pj_j(j: *mut PJ, k: *const ::std::os::raw::c_char) -> *mut PJ;
}
extern "C" {
    pub fn pj_n(j: *mut PJ, n: ::std::os::raw::c_ulonglong) -> *mut PJ;
}
extern "C" {
    pub fn pj_N(j: *mut PJ, n: ::std::os::raw::c_longlong) -> *mut PJ;
}
extern "C" {
    pub fn pj_i(j: *mut PJ, d: ::std::os::raw::c_int) -> *mut PJ;
}
extern "C" {
    pub fn pj_d(j: *mut PJ, d: f64) -> *mut PJ;
}
extern "C" {
    pub fn pj_f(j: *mut PJ, d: f32) -> *mut PJ;
}
extern "C" {
    pub fn pj_b(j: *mut PJ, v: bool) -> *mut PJ;
}
extern "C" {
    pub fn rz_diff_version() -> *const ::std::os::raw::c_char;
}
pub const rz_diff_op_type_t_RZ_DIFF_OP_INVALID: rz_diff_op_type_t = 0;
pub const rz_diff_op_type_t_RZ_DIFF_OP_DELETE: rz_diff_op_type_t = 1;
pub const rz_diff_op_type_t_RZ_DIFF_OP_EQUAL: rz_diff_op_type_t = 2;
pub const rz_diff_op_type_t_RZ_DIFF_OP_INSERT: rz_diff_op_type_t = 3;
pub const rz_diff_op_type_t_RZ_DIFF_OP_REPLACE: rz_diff_op_type_t = 4;
pub type rz_diff_op_type_t = ::std::os::raw::c_uint;
pub use self::rz_diff_op_type_t as RzDiffOpType;
#[doc = " This interface allows to analyze any data using the same algorithm\n elem_at(array, index)   [required] must return the an element of the array at position 'index'\n elem_hash(elem)         [required] must return the hash value of the element (use rz_diff_hash_data)\n compare(a_elem, b_elem) [required] must return true if the two elements are the same\n stringify(elem, sb)     [required] appends into sb the stringified element of the array\n ignore(elem)            [optional] must return true if the element matches the user define\n                                     rule (if set to NULL, it will be considered as always false)"]
pub type RzDiffMethodElemAt = ::std::option::Option<
    unsafe extern "C" fn(
        array: *const ::std::os::raw::c_void,
        index: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_void,
>;
pub type RzDiffMethodElemHash = ::std::option::Option<
    unsafe extern "C" fn(elem: *const ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
pub type RzDiffMethodCompare = ::std::option::Option<
    unsafe extern "C" fn(
        a_elem: *const ::std::os::raw::c_void,
        b_elem: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type RzDiffMethodIgnore =
    ::std::option::Option<unsafe extern "C" fn(elem: *const ::std::os::raw::c_void) -> bool>;
pub type RzDiffMethodStringify = ::std::option::Option<
    unsafe extern "C" fn(elem: *const ::std::os::raw::c_void, sb: *mut RzStrBuf),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_diff_methods_t {
    #[doc = "< can be either be an element of A or B"]
    pub elem_at: RzDiffMethodElemAt,
    #[doc = "< can be either be an element of A or B"]
    pub elem_hash: RzDiffMethodElemHash,
    #[doc = "< elements from A and B"]
    pub compare: RzDiffMethodCompare,
    #[doc = "< elements from A and B"]
    pub stringify: RzDiffMethodStringify,
    #[doc = "< elements from A and B"]
    pub ignore: RzDiffMethodIgnore,
}
#[test]
fn bindgen_test_layout_rz_diff_methods_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_diff_methods_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_diff_methods_t>(),
        40usize,
        concat!("Size of: ", stringify!(rz_diff_methods_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_diff_methods_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_diff_methods_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elem_at) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_diff_methods_t),
            "::",
            stringify!(elem_at)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elem_hash) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_diff_methods_t),
            "::",
            stringify!(elem_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compare) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_diff_methods_t),
            "::",
            stringify!(compare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringify) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_diff_methods_t),
            "::",
            stringify!(stringify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignore) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_diff_methods_t),
            "::",
            stringify!(ignore)
        )
    );
}
pub type RzDiffMethods = rz_diff_methods_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_diff_op_t {
    pub type_: RzDiffOpType,
    pub a_beg: ::std::os::raw::c_int,
    pub a_end: ::std::os::raw::c_int,
    pub b_beg: ::std::os::raw::c_int,
    pub b_end: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_diff_op_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_diff_op_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_diff_op_t>(),
        20usize,
        concat!("Size of: ", stringify!(rz_diff_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_diff_op_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rz_diff_op_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_diff_op_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_beg) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_diff_op_t),
            "::",
            stringify!(a_beg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_diff_op_t),
            "::",
            stringify!(a_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_beg) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_diff_op_t),
            "::",
            stringify!(b_beg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_diff_op_t),
            "::",
            stringify!(b_end)
        )
    );
}
pub type RzDiffOp = rz_diff_op_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct match_p_t {
    pub a: ::std::os::raw::c_uint,
    pub b: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_match_p_t() {
    const UNINIT: ::std::mem::MaybeUninit<match_p_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<match_p_t>(),
        12usize,
        concat!("Size of: ", stringify!(match_p_t))
    );
    assert_eq!(
        ::std::mem::align_of::<match_p_t>(),
        4usize,
        concat!("Alignment of ", stringify!(match_p_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(match_p_t),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(match_p_t),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(match_p_t),
            "::",
            stringify!(size)
        )
    );
}
pub type RzDiffMatch = match_p_t;
pub type RzDiffIgnoreByte =
    ::std::option::Option<unsafe extern "C" fn(byte: ::std::os::raw::c_ulonglong) -> bool>;
pub type RzDiffIgnoreLine =
    ::std::option::Option<unsafe extern "C" fn(line: *const ::std::os::raw::c_char) -> bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_diff_t {
    _unused: [u8; 0],
}
pub type RzDiff = rz_diff_t;
extern "C" {
    pub fn rz_diff_hash_data(
        buffer: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_diff_bytes_new(
        a: *const ::std::os::raw::c_uchar,
        a_size: ::std::os::raw::c_uint,
        b: *const ::std::os::raw::c_uchar,
        b_size: ::std::os::raw::c_uint,
        ignore: RzDiffIgnoreByte,
    ) -> *mut RzDiff;
}
extern "C" {
    pub fn rz_diff_lines_new(
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
        ignore: RzDiffIgnoreLine,
    ) -> *mut RzDiff;
}
extern "C" {
    pub fn rz_diff_generic_new(
        a: *const ::std::os::raw::c_void,
        a_size: ::std::os::raw::c_uint,
        b: *const ::std::os::raw::c_void,
        b_size: ::std::os::raw::c_uint,
        methods: *mut RzDiffMethods,
    ) -> *mut RzDiff;
}
extern "C" {
    pub fn rz_diff_free(diff: *mut RzDiff);
}
extern "C" {
    pub fn rz_diff_get_a(diff: *mut RzDiff) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_diff_get_b(diff: *mut RzDiff) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_diff_matches_new(diff: *mut RzDiff) -> *mut RzList;
}
extern "C" {
    pub fn rz_diff_opcodes_new(diff: *mut RzDiff) -> *mut RzList;
}
extern "C" {
    pub fn rz_diff_opcodes_grouped_new(
        diff: *mut RzDiff,
        n_groups: ::std::os::raw::c_uint,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_diff_ratio(diff: *mut RzDiff, result: *mut f64) -> bool;
}
extern "C" {
    pub fn rz_diff_sizes_ratio(diff: *mut RzDiff, result: *mut f64) -> bool;
}
extern "C" {
    pub fn rz_diff_unified_text(
        diff: *mut RzDiff,
        from: *const ::std::os::raw::c_char,
        to: *const ::std::os::raw::c_char,
        show_time: bool,
        color: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_diff_unified_json(
        diff: *mut RzDiff,
        from: *const ::std::os::raw::c_char,
        to: *const ::std::os::raw::c_char,
        show_time: bool,
    ) -> *mut PJ;
}
extern "C" {
    pub fn rz_diff_myers_distance(
        a: *const ::std::os::raw::c_uchar,
        size_a: ::std::os::raw::c_uint,
        b: *const ::std::os::raw::c_uchar,
        size_b: ::std::os::raw::c_uint,
        distance: *mut ::std::os::raw::c_uint,
        similarity: *mut f64,
    ) -> bool;
}
extern "C" {
    pub fn rz_diff_levenshtein_distance(
        a: *const ::std::os::raw::c_uchar,
        size_a: ::std::os::raw::c_uint,
        b: *const ::std::os::raw::c_uchar,
        size_b: ::std::os::raw::c_uint,
        distance: *mut ::std::os::raw::c_uint,
        similarity: *mut f64,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_regex_t {
    pub re_magic: ::std::os::raw::c_int,
    pub re_nsub: usize,
    pub re_endp: *const ::std::os::raw::c_char,
    pub re_g: *mut re_guts,
    pub re_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_regex_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_regex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_regex_t>(),
        40usize,
        concat!("Size of: ", stringify!(rz_regex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_regex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_regex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_regex_t),
            "::",
            stringify!(re_magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_nsub) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_regex_t),
            "::",
            stringify!(re_nsub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_endp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_regex_t),
            "::",
            stringify!(re_endp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_g) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_regex_t),
            "::",
            stringify!(re_g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_regex_t),
            "::",
            stringify!(re_flags)
        )
    );
}
pub type RzRegex = rz_regex_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_regmatch_t {
    pub rm_so: ::std::os::raw::c_longlong,
    pub rm_eo: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_rz_regmatch_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_regmatch_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_regmatch_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_regmatch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_regmatch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_regmatch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm_so) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_regmatch_t),
            "::",
            stringify!(rm_so)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm_eo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_regmatch_t),
            "::",
            stringify!(rm_eo)
        )
    );
}
pub type RzRegexMatch = rz_regmatch_t;
extern "C" {
    pub fn rz_regex_new(
        pattern: *const ::std::os::raw::c_char,
        cflags: *const ::std::os::raw::c_char,
    ) -> *mut RzRegex;
}
extern "C" {
    pub fn rz_regex_match(
        pattern: *const ::std::os::raw::c_char,
        flags: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_regex_match_extract(
        str_: *const ::std::os::raw::c_char,
        match_: *mut RzRegexMatch,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_regex_get_match_list(
        pattern: *const ::std::os::raw::c_char,
        flags: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_regex_flags(flags: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_regex_comp(
        arg1: *mut RzRegex,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_regex_error(
        arg1: ::std::os::raw::c_int,
        arg2: *const RzRegex,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> usize;
}
extern "C" {
    pub fn rz_regex_check(rr: *const RzRegex, str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_regex_exec(
        preg: *const RzRegex,
        string: *const ::std::os::raw::c_char,
        nmatch: usize,
        __pmatch: *mut RzRegexMatch,
        eflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_regex_free(arg1: *mut RzRegex);
}
extern "C" {
    pub fn rz_regex_fini(arg1: *mut RzRegex);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_getopt_t {
    pub err: ::std::os::raw::c_int,
    pub ind: ::std::os::raw::c_int,
    pub opt: ::std::os::raw::c_int,
    pub reset: ::std::os::raw::c_int,
    pub arg: *const ::std::os::raw::c_char,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *const ::std::os::raw::c_char,
    pub ostr: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rz_getopt_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_getopt_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_getopt_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_getopt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_getopt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_getopt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_getopt_t),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ind) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_getopt_t),
            "::",
            stringify!(ind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_getopt_t),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_getopt_t),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_getopt_t),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_getopt_t),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argv) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_getopt_t),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ostr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_getopt_t),
            "::",
            stringify!(ostr)
        )
    );
}
pub type RzGetopt = rz_getopt_t;
extern "C" {
    pub fn rz_getopt_init(
        go: *mut RzGetopt,
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
        ostr: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rz_getopt_next(opt: *mut RzGetopt) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_skiplist_node_t {
    pub data: *mut ::std::os::raw::c_void,
    pub forward: *mut *mut rz_skiplist_node_t,
}
#[test]
fn bindgen_test_layout_rz_skiplist_node_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_skiplist_node_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_skiplist_node_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_skiplist_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_skiplist_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_skiplist_node_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_skiplist_node_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forward) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_skiplist_node_t),
            "::",
            stringify!(forward)
        )
    );
}
pub type RzSkipListNode = rz_skiplist_node_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_skiplist_t {
    pub head: *mut RzSkipListNode,
    pub list_level: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub freefn: RzListFree,
    pub compare: RzListComparator,
}
#[test]
fn bindgen_test_layout_rz_skiplist_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_skiplist_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_skiplist_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_skiplist_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_skiplist_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_skiplist_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_skiplist_t),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_level) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_skiplist_t),
            "::",
            stringify!(list_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_skiplist_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freefn) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_skiplist_t),
            "::",
            stringify!(freefn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compare) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_skiplist_t),
            "::",
            stringify!(compare)
        )
    );
}
pub type RzSkipList = rz_skiplist_t;
extern "C" {
    pub fn rz_skiplist_new(freefn: RzListFree, comparefn: RzListComparator) -> *mut RzSkipList;
}
extern "C" {
    pub fn rz_skiplist_free(list: *mut RzSkipList);
}
extern "C" {
    pub fn rz_skiplist_purge(list: *mut RzSkipList);
}
extern "C" {
    pub fn rz_skiplist_insert(
        list: *mut RzSkipList,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RzSkipListNode;
}
extern "C" {
    pub fn rz_skiplist_delete(list: *mut RzSkipList, data: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn rz_skiplist_delete_node(list: *mut RzSkipList, node: *mut RzSkipListNode) -> bool;
}
extern "C" {
    pub fn rz_skiplist_find(
        list: *mut RzSkipList,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RzSkipListNode;
}
extern "C" {
    pub fn rz_skiplist_find_geq(
        list: *mut RzSkipList,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RzSkipListNode;
}
extern "C" {
    pub fn rz_skiplist_find_leq(
        list: *mut RzSkipList,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RzSkipListNode;
}
extern "C" {
    pub fn rz_skiplist_join(l1: *mut RzSkipList, l2: *mut RzSkipList);
}
extern "C" {
    pub fn rz_skiplist_get_first(list: *mut RzSkipList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_skiplist_get_n(
        list: *mut RzSkipList,
        n: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_skiplist_get_geq(
        list: *mut RzSkipList,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_skiplist_get_leq(
        list: *mut RzSkipList,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_skiplist_empty(list: *mut RzSkipList) -> bool;
}
extern "C" {
    pub fn rz_skiplist_to_list(list: *mut RzSkipList) -> *mut RzList;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_th_sem_t {
    _unused: [u8; 0],
}
pub type RzThreadSemaphore = rz_th_sem_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_th_lock_t {
    _unused: [u8; 0],
}
pub type RzThreadLock = rz_th_lock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_th_cond_t {
    _unused: [u8; 0],
}
pub type RzThreadCond = rz_th_cond_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_th_t {
    _unused: [u8; 0],
}
pub type RzThread = rz_th_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_th_pool_t {
    _unused: [u8; 0],
}
pub type RzThreadPool = rz_th_pool_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_th_queue_t {
    _unused: [u8; 0],
}
pub type RzThreadQueue = rz_th_queue_t;
pub type RzThreadFunction = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_atomic_bool_t {
    _unused: [u8; 0],
}
pub type RzAtomicBool = rz_atomic_bool_t;
extern "C" {
    pub fn rz_th_new(
        function: RzThreadFunction,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut RzThread;
}
extern "C" {
    pub fn rz_th_get_user(th: *mut RzThread) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_th_get_retv(th: *mut RzThread) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_th_wait(th: *mut RzThread) -> bool;
}
extern "C" {
    pub fn rz_th_free(th: *mut RzThread);
}
extern "C" {
    pub fn rz_th_set_name(th: *mut RzThread, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_th_get_name(th: *mut RzThread, name: *mut ::std::os::raw::c_char, len: usize)
        -> bool;
}
extern "C" {
    pub fn rz_th_set_affinity(th: *mut RzThread, cpuid: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn rz_th_yield() -> bool;
}
extern "C" {
    pub fn rz_th_sem_new(initial: ::std::os::raw::c_uint) -> *mut RzThreadSemaphore;
}
extern "C" {
    pub fn rz_th_sem_free(sem: *mut RzThreadSemaphore);
}
extern "C" {
    pub fn rz_th_sem_post(sem: *mut RzThreadSemaphore);
}
extern "C" {
    pub fn rz_th_sem_wait(sem: *mut RzThreadSemaphore);
}
extern "C" {
    pub fn rz_th_lock_new(recursive: bool) -> *mut RzThreadLock;
}
extern "C" {
    pub fn rz_th_lock_tryenter(thl: *mut RzThreadLock) -> bool;
}
extern "C" {
    pub fn rz_th_lock_enter(thl: *mut RzThreadLock);
}
extern "C" {
    pub fn rz_th_lock_leave(thl: *mut RzThreadLock);
}
extern "C" {
    pub fn rz_th_lock_free(thl: *mut RzThreadLock);
}
extern "C" {
    pub fn rz_th_cond_new() -> *mut RzThreadCond;
}
extern "C" {
    pub fn rz_th_cond_signal(cond: *mut RzThreadCond);
}
extern "C" {
    pub fn rz_th_cond_signal_all(cond: *mut RzThreadCond);
}
extern "C" {
    pub fn rz_th_cond_wait(cond: *mut RzThreadCond, lock: *mut RzThreadLock);
}
extern "C" {
    pub fn rz_th_cond_free(cond: *mut RzThreadCond);
}
extern "C" {
    pub fn rz_th_physical_core_number() -> usize;
}
extern "C" {
    pub fn rz_th_request_physical_cores(max_cores: usize) -> usize;
}
extern "C" {
    pub fn rz_th_pool_new(max_threads: usize) -> *mut RzThreadPool;
}
extern "C" {
    pub fn rz_th_pool_free(pool: *mut RzThreadPool);
}
extern "C" {
    pub fn rz_th_pool_add_thread(pool: *mut RzThreadPool, thread: *mut RzThread) -> bool;
}
extern "C" {
    pub fn rz_th_pool_get_thread(pool: *mut RzThreadPool, index: usize) -> *mut RzThread;
}
extern "C" {
    pub fn rz_th_pool_wait(pool: *mut RzThreadPool) -> bool;
}
extern "C" {
    pub fn rz_th_pool_size(pool: *mut RzThreadPool) -> usize;
}
extern "C" {
    pub fn rz_th_queue_new(max_size: usize, qfree: RzListFree) -> *mut RzThreadQueue;
}
extern "C" {
    pub fn rz_th_queue_new2(list: *mut RzList) -> *mut RzThreadQueue;
}
extern "C" {
    pub fn rz_th_queue_free(queue: *mut RzThreadQueue);
}
extern "C" {
    pub fn rz_th_queue_push(
        queue: *mut RzThreadQueue,
        user: *mut ::std::os::raw::c_void,
        tail: bool,
    ) -> bool;
}
extern "C" {
    pub fn rz_th_queue_pop(queue: *mut RzThreadQueue, tail: bool) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_th_queue_wait_pop(
        queue: *mut RzThreadQueue,
        tail: bool,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_th_queue_pop_all(queue: *mut RzThreadQueue) -> *mut RzList;
}
extern "C" {
    pub fn rz_th_queue_is_empty(queue: *mut RzThreadQueue) -> bool;
}
extern "C" {
    pub fn rz_th_queue_is_full(queue: *mut RzThreadQueue) -> bool;
}
extern "C" {
    pub fn rz_atomic_bool_new(value: bool) -> *mut RzAtomicBool;
}
extern "C" {
    pub fn rz_atomic_bool_free(tbool: *mut RzAtomicBool);
}
extern "C" {
    pub fn rz_atomic_bool_get(tbool: *mut RzAtomicBool) -> bool;
}
extern "C" {
    pub fn rz_atomic_bool_set(tbool: *mut RzAtomicBool, value: bool);
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::std::mem::MaybeUninit<sigval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
pub type __sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub __pad0: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_overrun) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_overrun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_utime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_utime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_stime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_stime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _pkey: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lower) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_lower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._upper) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_upper)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._addr_bnd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_addr_bnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_pkey)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr_lsb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr_lsb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bounds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(_bounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_band) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._call_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_call_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._syscall) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_syscall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._arch) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_arch)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1>(),
        112usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._kill) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_kill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._timer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._rt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_rt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigchld) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigchld)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigfault) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigfault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigpoll) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigpoll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigsys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigsys)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t>(),
        128usize,
        concat!("Size of: ", stringify!(siginfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sifields) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(_sifields)
        )
    );
}
pub const SI_ASYNCNL: _bindgen_ty_7 = -60;
pub const SI_DETHREAD: _bindgen_ty_7 = -7;
pub const SI_TKILL: _bindgen_ty_7 = -6;
pub const SI_SIGIO: _bindgen_ty_7 = -5;
pub const SI_ASYNCIO: _bindgen_ty_7 = -4;
pub const SI_MESGQ: _bindgen_ty_7 = -3;
pub const SI_TIMER: _bindgen_ty_7 = -2;
pub const SI_QUEUE: _bindgen_ty_7 = -1;
pub const SI_USER: _bindgen_ty_7 = 0;
pub const SI_KERNEL: _bindgen_ty_7 = 128;
pub type _bindgen_ty_7 = ::std::os::raw::c_int;
pub const ILL_ILLOPC: _bindgen_ty_8 = 1;
pub const ILL_ILLOPN: _bindgen_ty_8 = 2;
pub const ILL_ILLADR: _bindgen_ty_8 = 3;
pub const ILL_ILLTRP: _bindgen_ty_8 = 4;
pub const ILL_PRVOPC: _bindgen_ty_8 = 5;
pub const ILL_PRVREG: _bindgen_ty_8 = 6;
pub const ILL_COPROC: _bindgen_ty_8 = 7;
pub const ILL_BADSTK: _bindgen_ty_8 = 8;
pub const ILL_BADIADDR: _bindgen_ty_8 = 9;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const FPE_INTDIV: _bindgen_ty_9 = 1;
pub const FPE_INTOVF: _bindgen_ty_9 = 2;
pub const FPE_FLTDIV: _bindgen_ty_9 = 3;
pub const FPE_FLTOVF: _bindgen_ty_9 = 4;
pub const FPE_FLTUND: _bindgen_ty_9 = 5;
pub const FPE_FLTRES: _bindgen_ty_9 = 6;
pub const FPE_FLTINV: _bindgen_ty_9 = 7;
pub const FPE_FLTSUB: _bindgen_ty_9 = 8;
pub const FPE_FLTUNK: _bindgen_ty_9 = 14;
pub const FPE_CONDTRAP: _bindgen_ty_9 = 15;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const SEGV_MAPERR: _bindgen_ty_10 = 1;
pub const SEGV_ACCERR: _bindgen_ty_10 = 2;
pub const SEGV_BNDERR: _bindgen_ty_10 = 3;
pub const SEGV_PKUERR: _bindgen_ty_10 = 4;
pub const SEGV_ACCADI: _bindgen_ty_10 = 5;
pub const SEGV_ADIDERR: _bindgen_ty_10 = 6;
pub const SEGV_ADIPERR: _bindgen_ty_10 = 7;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const BUS_ADRALN: _bindgen_ty_11 = 1;
pub const BUS_ADRERR: _bindgen_ty_11 = 2;
pub const BUS_OBJERR: _bindgen_ty_11 = 3;
pub const BUS_MCEERR_AR: _bindgen_ty_11 = 4;
pub const BUS_MCEERR_AO: _bindgen_ty_11 = 5;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const CLD_EXITED: _bindgen_ty_12 = 1;
pub const CLD_KILLED: _bindgen_ty_12 = 2;
pub const CLD_DUMPED: _bindgen_ty_12 = 3;
pub const CLD_TRAPPED: _bindgen_ty_12 = 4;
pub const CLD_STOPPED: _bindgen_ty_12 = 5;
pub const CLD_CONTINUED: _bindgen_ty_12 = 6;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub const POLL_IN: _bindgen_ty_13 = 1;
pub const POLL_OUT: _bindgen_ty_13 = 2;
pub const POLL_MSG: _bindgen_ty_13 = 3;
pub const POLL_ERR: _bindgen_ty_13 = 4;
pub const POLL_PRI: _bindgen_ty_13 = 5;
pub const POLL_HUP: _bindgen_ty_13 = 6;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub type sigval_t = __sigval_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: __sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 12usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: __sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._function) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._attribute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_attribute)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigev_thread) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_sigev_thread)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        64usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigev_un) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(_sigev_un)
        )
    );
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_14 = 0;
pub const SIGEV_NONE: _bindgen_ty_14 = 1;
pub const SIGEV_THREAD: _bindgen_ty_14 = 2;
pub const SIGEV_THREAD_ID: _bindgen_ty_14 = 4;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
pub type __sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
        -> __sighandler_t;
}
extern "C" {
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(__sig: ::std::os::raw::c_int, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sig_t = __sighandler_t;
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(
        __set: *const sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigaction__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_sigaction) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_sigaction)
        )
    );
}
#[test]
fn bindgen_test_layout_sigaction() {
    const UNINIT: ::std::mem::MaybeUninit<sigaction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        152usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sigaction_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_restorer) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_restorer)
        )
    );
}
extern "C" {
    pub fn sigprocmask(
        __how: ::std::os::raw::c_int,
        __set: *const sigset_t,
        __oset: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        __sig: ::std::os::raw::c_int,
        __act: *const sigaction,
        __oact: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        __set: *const sigset_t,
        __sig: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigtimedwait(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigqueue(
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
        __val: sigval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub __glibc_reserved1: [__uint32_t; 7usize],
}
#[test]
fn bindgen_test_layout__fpx_sw_bytes() {
    const UNINIT: ::std::mem::MaybeUninit<_fpx_sw_bytes> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_fpx_sw_bytes>(),
        48usize,
        concat!("Size of: ", stringify!(_fpx_sw_bytes))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpx_sw_bytes>(),
        8usize,
        concat!("Alignment of ", stringify!(_fpx_sw_bytes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(magic1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extended_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(extended_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xstate_bv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(xstate_bv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xstate_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(xstate_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__fpreg() {
    const UNINIT: ::std::mem::MaybeUninit<_fpreg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_fpreg>(),
        10usize,
        concat!("Size of: ", stringify!(_fpreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_fpreg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).significand) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exponent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpreg),
            "::",
            stringify!(exponent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__fpxreg() {
    const UNINIT: ::std::mem::MaybeUninit<_fpxreg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_fpxreg>(),
        16usize,
        concat!("Size of: ", stringify!(_fpxreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpxreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_fpxreg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).significand) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exponent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__xmmreg() {
    const UNINIT: ::std::mem::MaybeUninit<_xmmreg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_xmmreg>(),
        16usize,
        concat!("Size of: ", stringify!(_xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(_xmmreg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmmreg),
            "::",
            stringify!(element)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__fpstate() {
    const UNINIT: ::std::mem::MaybeUninit<_fpstate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_fpstate>(),
        512usize,
        concat!("Size of: ", stringify!(_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_fpstate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cwd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swd) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftw) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fop) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rip) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mxcsr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mxcr_mask) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(mxcr_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._st) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._xmm) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(_xmm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub __bindgen_anon_1: sigcontext__bindgen_ty_1,
    pub __reserved1: [__uint64_t; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigcontext__bindgen_ty_1 {
    pub fpstate: *mut _fpstate,
    pub __fpstate_word: __uint64_t,
}
#[test]
fn bindgen_test_layout_sigcontext__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigcontext__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigcontext__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpstate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext__bindgen_ty_1),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpstate_word) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext__bindgen_ty_1),
            "::",
            stringify!(__fpstate_word)
        )
    );
}
#[test]
fn bindgen_test_layout_sigcontext() {
    const UNINIT: ::std::mem::MaybeUninit<sigcontext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigcontext>(),
        256usize,
        concat!("Size of: ", stringify!(sigcontext))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext>(),
        8usize,
        concat!("Alignment of ", stringify!(sigcontext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r9) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r10) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r12) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r13) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r14) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r15) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdi) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rdi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsi) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rsi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbp) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rbp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbx) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rbx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdx) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rax) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcx) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rcx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsp) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rip) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eflags) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gs) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(gs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trapno) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(trapno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldmask) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(oldmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cr2) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(cr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved1) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub __glibc_reserved1: [__uint64_t; 2usize],
    pub __glibc_reserved2: [__uint64_t; 5usize],
}
#[test]
fn bindgen_test_layout__xsave_hdr() {
    const UNINIT: ::std::mem::MaybeUninit<_xsave_hdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_xsave_hdr>(),
        64usize,
        concat!("Size of: ", stringify!(_xsave_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsave_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsave_hdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xstate_bv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(xstate_bv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(__glibc_reserved2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
#[test]
fn bindgen_test_layout__ymmh_state() {
    const UNINIT: ::std::mem::MaybeUninit<_ymmh_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ymmh_state>(),
        256usize,
        concat!("Size of: ", stringify!(_ymmh_state))
    );
    assert_eq!(
        ::std::mem::align_of::<_ymmh_state>(),
        4usize,
        concat!("Alignment of ", stringify!(_ymmh_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ymmh_space) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ymmh_state),
            "::",
            stringify!(ymmh_space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
#[test]
fn bindgen_test_layout__xstate() {
    const UNINIT: ::std::mem::MaybeUninit<_xstate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_xstate>(),
        832usize,
        concat!("Size of: ", stringify!(_xstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_xstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_xstate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpstate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xstate_hdr) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(xstate_hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ymmh) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(ymmh)
        )
    );
}
extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_t {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: usize,
}
#[test]
fn bindgen_test_layout_stack_t() {
    const UNINIT: ::std::mem::MaybeUninit<stack_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stack_t>(),
        24usize,
        concat!("Size of: ", stringify!(stack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<stack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(stack_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_size)
        )
    );
}
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__libc_fpxreg() {
    const UNINIT: ::std::mem::MaybeUninit<_libc_fpxreg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_libc_fpxreg>(),
        16usize,
        concat!("Size of: ", stringify!(_libc_fpxreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpxreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_libc_fpxreg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).significand) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exponent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__libc_xmmreg() {
    const UNINIT: ::std::mem::MaybeUninit<_libc_xmmreg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_libc_xmmreg>(),
        16usize,
        concat!("Size of: ", stringify!(_libc_xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(_libc_xmmreg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_xmmreg),
            "::",
            stringify!(element)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__libc_fpstate() {
    const UNINIT: ::std::mem::MaybeUninit<_libc_fpstate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_libc_fpstate>(),
        512usize,
        concat!("Size of: ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cwd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swd) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftw) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fop) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rip) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mxcsr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mxcr_mask) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(mxcr_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._st) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._xmm) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(_xmm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcontext_t {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
#[test]
fn bindgen_test_layout_mcontext_t() {
    const UNINIT: ::std::mem::MaybeUninit<mcontext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mcontext_t>(),
        256usize,
        concat!("Size of: ", stringify!(mcontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mcontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mcontext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gregs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(gregs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpregs) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(fpregs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved1) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(__reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucontext_t {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext_t,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: sigset_t,
    pub __fpregs_mem: _libc_fpstate,
    pub __ssp: [::std::os::raw::c_ulonglong; 4usize],
}
#[test]
fn bindgen_test_layout_ucontext_t() {
    const UNINIT: ::std::mem::MaybeUninit<ucontext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ucontext_t>(),
        968usize,
        concat!("Size of: ", stringify!(ucontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ucontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ucontext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_mcontext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpregs_mem) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(__fpregs_mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ssp) as usize - ptr as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(__ssp)
        )
    );
}
extern "C" {
    pub fn siginterrupt(
        __sig: ::std::os::raw::c_int,
        __interrupt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const SS_ONSTACK: _bindgen_ty_15 = 1;
pub const SS_DISABLE: _bindgen_ty_15 = 2;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
extern "C" {
    pub fn sigaltstack(__ss: *const stack_t, __oss: *mut stack_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    const UNINIT: ::std::mem::MaybeUninit<sigstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_onstack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        __how: ::std::os::raw::c_int,
        __newmask: *const __sigset_t,
        __oldmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(
        __threadid: pthread_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_axml_decode(
        buffer: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_up_kv {
    pub key: ::std::os::raw::c_ulonglong,
    pub value: *mut ::std::os::raw::c_void,
    pub key_len: ::std::os::raw::c_uint,
    pub value_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ht_up_kv() {
    const UNINIT: ::std::mem::MaybeUninit<ht_up_kv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ht_up_kv>(),
        24usize,
        concat!("Size of: ", stringify!(ht_up_kv))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_up_kv>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_up_kv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_kv),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_kv),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_kv),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_len) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_kv),
            "::",
            stringify!(value_len)
        )
    );
}
pub type HtUPKv = ht_up_kv;
pub type HtUPKvFreeFunc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut HtUPKv)>;
pub type HtUPDupKey = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong,
>;
pub type HtUPDupValue = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type HtUPCalcSizeK = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint,
>;
pub type HtUPCalcSizeV = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
pub type HtUPHashFunction = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint,
>;
pub type HtUPListComparator = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int,
>;
pub type HtUPForeachCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        arg1: ::std::os::raw::c_ulonglong,
        arg2: *const ::std::os::raw::c_void,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_up_bucket_t {
    pub arr: *mut HtUPKv,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ht_up_bucket_t() {
    const UNINIT: ::std::mem::MaybeUninit<ht_up_bucket_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ht_up_bucket_t>(),
        16usize,
        concat!("Size of: ", stringify!(ht_up_bucket_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_up_bucket_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_up_bucket_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_bucket_t),
            "::",
            stringify!(arr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_bucket_t),
            "::",
            stringify!(count)
        )
    );
}
pub type HtUPBucket = ht_up_bucket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_up_options_t {
    pub cmp: HtUPListComparator,
    pub hashfn: HtUPHashFunction,
    pub dupkey: HtUPDupKey,
    pub dupvalue: HtUPDupValue,
    pub calcsizeK: HtUPCalcSizeK,
    pub calcsizeV: HtUPCalcSizeV,
    pub freefn: HtUPKvFreeFunc,
    pub elem_size: usize,
}
#[test]
fn bindgen_test_layout_ht_up_options_t() {
    const UNINIT: ::std::mem::MaybeUninit<ht_up_options_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ht_up_options_t>(),
        64usize,
        concat!("Size of: ", stringify!(ht_up_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_up_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_up_options_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(cmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashfn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(hashfn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dupkey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(dupkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dupvalue) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(dupvalue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calcsizeK) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(calcsizeK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calcsizeV) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(calcsizeV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freefn) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(freefn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elem_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(elem_size)
        )
    );
}
pub type HtUPOptions = ht_up_options_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_up_t {
    pub size: ::std::os::raw::c_uint,
    pub count: ::std::os::raw::c_uint,
    pub table: *mut HtUPBucket,
    pub prime_idx: ::std::os::raw::c_uint,
    pub opt: HtUPOptions,
}
#[test]
fn bindgen_test_layout_ht_up_t() {
    const UNINIT: ::std::mem::MaybeUninit<ht_up_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ht_up_t>(),
        88usize,
        concat!("Size of: ", stringify!(ht_up_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_up_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_up_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_t),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prime_idx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_t),
            "::",
            stringify!(prime_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_t),
            "::",
            stringify!(opt)
        )
    );
}
pub type HtUP = ht_up_t;
extern "C" {
    pub fn ht_up_new_opt(opt: *mut HtUPOptions) -> *mut HtUP;
}
extern "C" {
    pub fn ht_up_free(ht: *mut HtUP);
}
extern "C" {
    pub fn ht_up_insert(
        ht: *mut HtUP,
        key: ::std::os::raw::c_ulonglong,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ht_up_update(
        ht: *mut HtUP,
        key: ::std::os::raw::c_ulonglong,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ht_up_update_key(
        ht: *mut HtUP,
        old_key: ::std::os::raw::c_ulonglong,
        new_key: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn ht_up_delete(ht: *mut HtUP, key: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn ht_up_find(
        ht: *mut HtUP,
        key: ::std::os::raw::c_ulonglong,
        found: *mut bool,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ht_up_foreach(ht: *mut HtUP, cb: HtUPForeachCallback, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ht_up_find_kv(
        ht: *mut HtUP,
        key: ::std::os::raw::c_ulonglong,
        found: *mut bool,
    ) -> *mut HtUPKv;
}
extern "C" {
    pub fn ht_up_insert_kv(ht: *mut HtUP, kv: *mut HtUPKv, update: bool) -> bool;
}
extern "C" {
    pub fn ht_up_new0() -> *mut HtUP;
}
extern "C" {
    pub fn ht_up_new(
        valdup: HtUPDupValue,
        pair_free: HtUPKvFreeFunc,
        valueSize: HtUPCalcSizeV,
    ) -> *mut HtUP;
}
extern "C" {
    pub fn ht_up_new_size(
        initial_size: ::std::os::raw::c_uint,
        valdup: HtUPDupValue,
        pair_free: HtUPKvFreeFunc,
        valueSize: HtUPCalcSizeV,
    ) -> *mut HtUP;
}
pub const rz_log_level_RZ_LOGLVL_SILLY: rz_log_level = 0;
pub const rz_log_level_RZ_LOGLVL_DEBUG: rz_log_level = 1;
pub const rz_log_level_RZ_LOGLVL_VERBOSE: rz_log_level = 2;
pub const rz_log_level_RZ_LOGLVL_INFO: rz_log_level = 3;
pub const rz_log_level_RZ_LOGLVL_WARN: rz_log_level = 4;
pub const rz_log_level_RZ_LOGLVL_ERROR: rz_log_level = 5;
pub const rz_log_level_RZ_LOGLVL_FATAL: rz_log_level = 6;
pub const rz_log_level_RZ_LOGLVL_NONE: rz_log_level = 255;
pub type rz_log_level = ::std::os::raw::c_uint;
pub use self::rz_log_level as RzLogLevel;
pub type RzLogCallback = ::std::option::Option<
    unsafe extern "C" fn(
        output: *const ::std::os::raw::c_char,
        funcname: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_uint,
        level: RzLogLevel,
        tag: *const ::std::os::raw::c_char,
        fmtstr: *const ::std::os::raw::c_char,
        ...
    ),
>;
extern "C" {
    pub fn rz_log_set_level(level: RzLogLevel);
}
extern "C" {
    pub fn rz_log_set_file(filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_log_set_srcinfo(show_info: bool);
}
extern "C" {
    pub fn rz_log_set_colors(show_colors: bool);
}
extern "C" {
    pub fn rz_log_set_traplevel(level: RzLogLevel);
}
extern "C" {
    pub fn rz_log_add_callback(cbfunc: RzLogCallback);
}
extern "C" {
    pub fn rz_log_del_callback(cbfunc: RzLogCallback);
}
extern "C" {
    pub fn rz_log(
        funcname: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_uint,
        level: RzLogLevel,
        tag: *const ::std::os::raw::c_char,
        fmtstr: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn rz_vlog(
        funcname: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_uint,
        level: RzLogLevel,
        tag: *const ::std::os::raw::c_char,
        fmtstr: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn rz_assert_log(level: RzLogLevel, fmt: *const ::std::os::raw::c_char, ...);
}
pub type RzPVectorComparator = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type RzVectorComparator = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type RzVectorFree = ::std::option::Option<
    unsafe extern "C" fn(e: *mut ::std::os::raw::c_void, user: *mut ::std::os::raw::c_void),
>;
pub type RzPVectorFree =
    ::std::option::Option<unsafe extern "C" fn(e: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_vector_t {
    pub a: *mut ::std::os::raw::c_void,
    pub len: usize,
    pub capacity: usize,
    pub elem_size: usize,
    pub free: RzVectorFree,
    pub free_user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rz_vector_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_vector_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_vector_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_vector_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_vector_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_vector_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_vector_t),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_vector_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_vector_t),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elem_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_vector_t),
            "::",
            stringify!(elem_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_vector_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_user) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_vector_t),
            "::",
            stringify!(free_user)
        )
    );
}
pub type RzVector = rz_vector_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_pvector_t {
    pub v: RzVector,
}
#[test]
fn bindgen_test_layout_rz_pvector_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_pvector_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_pvector_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_pvector_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_pvector_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_pvector_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pvector_t),
            "::",
            stringify!(v)
        )
    );
}
pub type RzPVector = rz_pvector_t;
extern "C" {
    pub fn rz_vector_init(
        vec: *mut RzVector,
        elem_size: usize,
        free: RzVectorFree,
        free_user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rz_vector_new(
        elem_size: usize,
        free: RzVectorFree,
        free_user: *mut ::std::os::raw::c_void,
    ) -> *mut RzVector;
}
extern "C" {
    pub fn rz_vector_fini(vec: *mut RzVector);
}
extern "C" {
    pub fn rz_vector_free(vec: *mut RzVector);
}
extern "C" {
    pub fn rz_vector_clone(vec: *mut RzVector) -> *mut RzVector;
}
extern "C" {
    pub fn rz_vector_clear(vec: *mut RzVector);
}
extern "C" {
    pub fn rz_vector_assign(
        vec: *mut RzVector,
        p: *mut ::std::os::raw::c_void,
        elem: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rz_vector_assign_at(
        vec: *mut RzVector,
        index: usize,
        elem: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_vector_remove_at(vec: *mut RzVector, index: usize, into: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " remove all elements in the given range and write the contents to into (must be appropriately large).\n It is the caller's responsibility to free potential resources associated with the elements."]
    pub fn rz_vector_remove_range(
        vec: *mut RzVector,
        index: usize,
        count: usize,
        into: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rz_vector_insert(
        vec: *mut RzVector,
        index: usize,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_vector_insert_range(
        vec: *mut RzVector,
        index: usize,
        first: *mut ::std::os::raw::c_void,
        count: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_vector_pop(vec: *mut RzVector, into: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rz_vector_pop_front(vec: *mut RzVector, into: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rz_vector_push(
        vec: *mut RzVector,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_vector_push_front(
        vec: *mut RzVector,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_vector_reserve(vec: *mut RzVector, capacity: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_vector_shrink(vec: *mut RzVector) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " \\brief Turn the vector into a fixed-size array.\n This will clear the vector and return an array of its original contents whose\n ownership is transferred to the caller.\n This is useful when RzVector is used for its dynamically growing functionality as an\n intermediate step to generate a fixed-size array in the end."]
    pub fn rz_vector_flush(vec: *mut RzVector) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_vector_sort(vec: *mut RzVector, cmp: RzVectorComparator, reverse: bool);
}
extern "C" {
    pub fn rz_pvector_init(vec: *mut RzPVector, free: RzPVectorFree);
}
extern "C" {
    pub fn rz_pvector_fini(vec: *mut RzPVector);
}
extern "C" {
    pub fn rz_pvector_new(free: RzPVectorFree) -> *mut RzPVector;
}
extern "C" {
    pub fn rz_pvector_new_with_len(free: RzPVectorFree, length: usize) -> *mut RzPVector;
}
extern "C" {
    pub fn rz_pvector_clear(vec: *mut RzPVector);
}
extern "C" {
    pub fn rz_pvector_free(vec: *mut RzPVector);
}
extern "C" {
    pub fn rz_pvector_contains(
        vec: *mut RzPVector,
        x: *const ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_pvector_remove_at(vec: *mut RzPVector, index: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_pvector_remove_data(vec: *mut RzPVector, x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rz_pvector_pop(vec: *mut RzPVector) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_pvector_pop_front(vec: *mut RzPVector) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_pvector_sort(vec: *mut RzPVector, cmp: RzPVectorComparator);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_event_t {
    pub user: *mut ::std::os::raw::c_void,
    pub incall: bool,
    pub callbacks: *mut HtUP,
    pub all_callbacks: RzVector,
    #[doc = "< while inside of a call and a handle is unhooked, the unhook is deferred and saved here"]
    pub pending_unhook: RzVector,
    pub next_handle: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_event_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_event_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_event_t>(),
        128usize,
        concat!("Size of: ", stringify!(rz_event_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_event_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_event_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).incall) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_t),
            "::",
            stringify!(incall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callbacks) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_t),
            "::",
            stringify!(callbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_callbacks) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_t),
            "::",
            stringify!(all_callbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pending_unhook) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_t),
            "::",
            stringify!(pending_unhook)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_handle) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_t),
            "::",
            stringify!(next_handle)
        )
    );
}
pub type RzEvent = rz_event_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_event_callback_handle_t {
    pub handle: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_event_callback_handle_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_event_callback_handle_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_event_callback_handle_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_event_callback_handle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_event_callback_handle_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rz_event_callback_handle_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_callback_handle_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_callback_handle_t),
            "::",
            stringify!(type_)
        )
    );
}
pub type RzEventCallbackHandle = rz_event_callback_handle_t;
pub type RzEventCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ev: *mut RzEvent,
        type_: ::std::os::raw::c_int,
        user: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub const RzEventType_RZ_EVENT_ALL: RzEventType = 0;
pub const RzEventType_RZ_EVENT_META_SET: RzEventType = 1;
pub const RzEventType_RZ_EVENT_META_DEL: RzEventType = 2;
pub const RzEventType_RZ_EVENT_META_CLEAR: RzEventType = 3;
pub const RzEventType_RZ_EVENT_CLASS_NEW: RzEventType = 4;
pub const RzEventType_RZ_EVENT_CLASS_DEL: RzEventType = 5;
pub const RzEventType_RZ_EVENT_CLASS_RENAME: RzEventType = 6;
pub const RzEventType_RZ_EVENT_CLASS_ATTR_SET: RzEventType = 7;
pub const RzEventType_RZ_EVENT_CLASS_ATTR_DEL: RzEventType = 8;
pub const RzEventType_RZ_EVENT_CLASS_ATTR_RENAME: RzEventType = 9;
pub const RzEventType_RZ_EVENT_DEBUG_PROCESS_FINISHED: RzEventType = 10;
pub const RzEventType_RZ_EVENT_IO_WRITE: RzEventType = 11;
pub const RzEventType_RZ_EVENT_IO_DESC_CLOSE: RzEventType = 12;
pub const RzEventType_RZ_EVENT_IO_MAP_DEL: RzEventType = 13;
pub const RzEventType_RZ_EVENT_BIN_FILE_DEL: RzEventType = 14;
pub const RzEventType_RZ_EVENT_MAX: RzEventType = 15;
pub type RzEventType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_event_meta_t {
    pub type_: ::std::os::raw::c_int,
    pub addr: ::std::os::raw::c_ulonglong,
    pub string: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rz_event_meta_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_event_meta_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_event_meta_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_event_meta_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_event_meta_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_event_meta_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_meta_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_meta_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_meta_t),
            "::",
            stringify!(string)
        )
    );
}
pub type RzEventMeta = rz_event_meta_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_event_class_t {
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rz_event_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_event_class_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_event_class_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_event_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_event_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_event_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_class_t),
            "::",
            stringify!(name)
        )
    );
}
pub type RzEventClass = rz_event_class_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_event_class_rename_t {
    pub name_old: *const ::std::os::raw::c_char,
    pub name_new: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rz_event_class_rename_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_event_class_rename_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_event_class_rename_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_event_class_rename_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_event_class_rename_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_event_class_rename_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_old) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_class_rename_t),
            "::",
            stringify!(name_old)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_new) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_class_rename_t),
            "::",
            stringify!(name_new)
        )
    );
}
pub type RzEventClassRename = rz_event_class_rename_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_event_class_attr_t {
    pub class_name: *const ::std::os::raw::c_char,
    pub attr_type: ::std::os::raw::c_int,
    pub attr_id: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rz_event_class_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_event_class_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_event_class_attr_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_event_class_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_event_class_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_event_class_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_class_attr_t),
            "::",
            stringify!(class_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_class_attr_t),
            "::",
            stringify!(attr_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_class_attr_t),
            "::",
            stringify!(attr_id)
        )
    );
}
pub type RzEventClassAttr = rz_event_class_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_event_class_attr_set_t {
    pub attr: RzEventClassAttr,
    pub content: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rz_event_class_attr_set_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_event_class_attr_set_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_event_class_attr_set_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_event_class_attr_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_event_class_attr_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_event_class_attr_set_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_class_attr_set_t),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_class_attr_set_t),
            "::",
            stringify!(content)
        )
    );
}
pub type RzEventClassAttrSet = rz_event_class_attr_set_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_event_class_attr_rename_t {
    pub attr: RzEventClassAttr,
    pub attr_id_new: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rz_event_class_attr_rename_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_event_class_attr_rename_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_event_class_attr_rename_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_event_class_attr_rename_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_event_class_attr_rename_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_event_class_attr_rename_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_class_attr_rename_t),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_id_new) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_class_attr_rename_t),
            "::",
            stringify!(attr_id_new)
        )
    );
}
pub type RzEventClassAttrRename = rz_event_class_attr_rename_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_event_debug_process_finished_t {
    pub pid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_event_debug_process_finished_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_event_debug_process_finished_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_event_debug_process_finished_t>(),
        4usize,
        concat!("Size of: ", stringify!(rz_event_debug_process_finished_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_event_debug_process_finished_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(rz_event_debug_process_finished_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_debug_process_finished_t),
            "::",
            stringify!(pid)
        )
    );
}
pub type RzEventDebugProcessFinished = rz_event_debug_process_finished_t;
extern "C" {
    pub fn rz_event_new(user: *mut ::std::os::raw::c_void) -> *mut RzEvent;
}
extern "C" {
    pub fn rz_event_free(ev: *mut RzEvent);
}
extern "C" {
    pub fn rz_event_hook(
        ev: *mut RzEvent,
        type_: ::std::os::raw::c_int,
        cb: RzEventCallback,
        user: *mut ::std::os::raw::c_void,
    ) -> RzEventCallbackHandle;
}
extern "C" {
    pub fn rz_event_unhook(ev: *mut RzEvent, handle: RzEventCallbackHandle);
}
extern "C" {
    pub fn rz_event_send(
        ev: *mut RzEvent,
        type_: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_interval_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_rz_interval_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_interval_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_interval_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_interval_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_interval_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_interval_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_interval_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_interval_t),
            "::",
            stringify!(size)
        )
    );
}
pub type RzInterval = rz_interval_t;
pub type rz_itv_t = RzInterval;
extern "C" {
    pub fn rz_signal_from_string(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_signal_to_string(code: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_signal_sigmask(
        how: ::std::os::raw::c_int,
        newmask: *const sigset_t,
        oldmask: *mut sigset_t,
    );
}
extern "C" {
    pub fn rz_mem_alloc(sz: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_mem_free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rz_malloc_aligned(size: usize, alignment: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_free_aligned(p: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_rb_node_t {
    pub child: [*mut rz_rb_node_t; 2usize],
    pub red: bool,
}
#[test]
fn bindgen_test_layout_rz_rb_node_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_rb_node_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_rb_node_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_rb_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_rb_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_rb_node_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_rb_node_t),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).red) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_rb_node_t),
            "::",
            stringify!(red)
        )
    );
}
pub type RBNode = rz_rb_node_t;
pub type RBTree = *mut RBNode;
pub type RBComparator = ::std::option::Option<
    unsafe extern "C" fn(
        incoming: *const ::std::os::raw::c_void,
        in_tree: *const RBNode,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type RBNodeFree = ::std::option::Option<
    unsafe extern "C" fn(node: *mut RBNode, user: *mut ::std::os::raw::c_void),
>;
pub type RBNodeSum = ::std::option::Option<unsafe extern "C" fn(node: *mut RBNode)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_rb_iter_t {
    pub len: ::std::os::raw::c_int,
    pub path: [*mut RBNode; 62usize],
}
#[test]
fn bindgen_test_layout_rz_rb_iter_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_rb_iter_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_rb_iter_t>(),
        504usize,
        concat!("Size of: ", stringify!(rz_rb_iter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_rb_iter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_rb_iter_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_rb_iter_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_rb_iter_t),
            "::",
            stringify!(path)
        )
    );
}
pub type RBIter = rz_rb_iter_t;
pub type RContRBCmp = ::std::option::Option<
    unsafe extern "C" fn(
        incoming: *mut ::std::os::raw::c_void,
        in_: *mut ::std::os::raw::c_void,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type RContRBFree =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_containing_rb_node_t {
    pub node: RBNode,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rz_containing_rb_node_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_containing_rb_node_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_containing_rb_node_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_containing_rb_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_containing_rb_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_containing_rb_node_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_containing_rb_node_t),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_containing_rb_node_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RContRBNode = rz_containing_rb_node_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_containing_rb_tree_t {
    pub root: *mut RContRBNode,
    pub free: RContRBFree,
}
#[test]
fn bindgen_test_layout_rz_containing_rb_tree_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_containing_rb_tree_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_containing_rb_tree_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_containing_rb_tree_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_containing_rb_tree_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_containing_rb_tree_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_containing_rb_tree_t),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_containing_rb_tree_t),
            "::",
            stringify!(free)
        )
    );
}
pub type RContRBTree = rz_containing_rb_tree_t;
extern "C" {
    pub fn rz_rbtree_aug_delete(
        root: *mut *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        cmp: RBComparator,
        cmp_user: *mut ::std::os::raw::c_void,
        freefn: RBNodeFree,
        free_user: *mut ::std::os::raw::c_void,
        sum: RBNodeSum,
    ) -> bool;
}
extern "C" {
    pub fn rz_rbtree_aug_insert(
        root: *mut *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        node: *mut RBNode,
        cmp: RBComparator,
        cmp_user: *mut ::std::os::raw::c_void,
        sum: RBNodeSum,
    ) -> bool;
}
extern "C" {
    pub fn rz_rbtree_aug_update_sum(
        root: *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        node: *mut RBNode,
        cmp: RBComparator,
        cmp_user: *mut ::std::os::raw::c_void,
        sum: RBNodeSum,
    ) -> bool;
}
extern "C" {
    pub fn rz_rbtree_delete(
        root: *mut *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        cmp: RBComparator,
        cmp_user: *mut ::std::os::raw::c_void,
        freefn: RBNodeFree,
        free_user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rz_rbtree_find(
        root: *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        cmp: RBComparator,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut RBNode;
}
extern "C" {
    pub fn rz_rbtree_free(root: *mut RBNode, freefn: RBNodeFree, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rz_rbtree_insert(
        root: *mut *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        node: *mut RBNode,
        cmp: RBComparator,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rz_rbtree_lower_bound(
        root: *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        cmp: RBComparator,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut RBNode;
}
extern "C" {
    pub fn rz_rbtree_upper_bound(
        root: *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        cmp: RBComparator,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut RBNode;
}
extern "C" {
    pub fn rz_rbtree_first(root: *mut RBNode) -> RBIter;
}
extern "C" {
    pub fn rz_rbtree_last(root: *mut RBNode) -> RBIter;
}
extern "C" {
    pub fn rz_rbtree_lower_bound_forward(
        root: *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        cmp: RBComparator,
        user: *mut ::std::os::raw::c_void,
    ) -> RBIter;
}
extern "C" {
    pub fn rz_rbtree_upper_bound_backward(
        root: *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        cmp: RBComparator,
        user: *mut ::std::os::raw::c_void,
    ) -> RBIter;
}
extern "C" {
    pub fn rz_rbtree_iter_next(it: *mut RBIter);
}
extern "C" {
    pub fn rz_rbtree_iter_prev(it: *mut RBIter);
}
extern "C" {
    pub fn rz_rbtree_cont_new() -> *mut RContRBTree;
}
extern "C" {
    pub fn rz_rbtree_cont_newf(f: RContRBFree) -> *mut RContRBTree;
}
extern "C" {
    pub fn rz_rbtree_cont_insert(
        tree: *mut RContRBTree,
        data: *mut ::std::os::raw::c_void,
        cmp: RContRBCmp,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rz_rbtree_cont_delete(
        tree: *mut RContRBTree,
        data: *mut ::std::os::raw::c_void,
        cmp: RContRBCmp,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rz_rbtree_cont_find(
        tree: *mut RContRBTree,
        data: *mut ::std::os::raw::c_void,
        cmp: RContRBCmp,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_rbtree_cont_free(tree: *mut RContRBTree);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_interval_node_t {
    pub node: RBNode,
    pub start: ::std::os::raw::c_ulonglong,
    pub end: ::std::os::raw::c_ulonglong,
    pub max_end: ::std::os::raw::c_ulonglong,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rz_interval_node_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_interval_node_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_interval_node_t>(),
        56usize,
        concat!("Size of: ", stringify!(rz_interval_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_interval_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_interval_node_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_interval_node_t),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_interval_node_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_interval_node_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_end) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_interval_node_t),
            "::",
            stringify!(max_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_interval_node_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RzIntervalNode = rz_interval_node_t;
pub type RzIntervalNodeFree =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_interval_tree_t {
    pub root: *mut RzIntervalNode,
    pub free: RzIntervalNodeFree,
}
#[test]
fn bindgen_test_layout_rz_interval_tree_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_interval_tree_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_interval_tree_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_interval_tree_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_interval_tree_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_interval_tree_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_interval_tree_t),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_interval_tree_t),
            "::",
            stringify!(free)
        )
    );
}
pub type RzIntervalTree = rz_interval_tree_t;
extern "C" {
    pub fn rz_interval_tree_init(tree: *mut RzIntervalTree, free: RzIntervalNodeFree);
}
extern "C" {
    pub fn rz_interval_tree_fini(tree: *mut RzIntervalTree);
}
extern "C" {
    pub fn rz_interval_tree_insert(
        tree: *mut RzIntervalTree,
        start: ::std::os::raw::c_ulonglong,
        end: ::std::os::raw::c_ulonglong,
        data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rz_interval_tree_delete(
        tree: *mut RzIntervalTree,
        node: *mut RzIntervalNode,
        free: bool,
    ) -> bool;
}
extern "C" {
    pub fn rz_interval_tree_resize(
        tree: *mut RzIntervalTree,
        node: *mut RzIntervalNode,
        new_start: ::std::os::raw::c_ulonglong,
        new_end: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_interval_tree_first_at(
        tree: *mut RzIntervalTree,
        start: ::std::os::raw::c_ulonglong,
    ) -> RBIter;
}
extern "C" {
    pub fn rz_interval_tree_node_at(
        tree: *mut RzIntervalTree,
        start: ::std::os::raw::c_ulonglong,
    ) -> *mut RzIntervalNode;
}
extern "C" {
    pub fn rz_interval_tree_node_at_data(
        tree: *mut RzIntervalTree,
        start: ::std::os::raw::c_ulonglong,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RzIntervalNode;
}
pub type RzIntervalIterCb = ::std::option::Option<
    unsafe extern "C" fn(node: *mut RzIntervalNode, user: *mut ::std::os::raw::c_void) -> bool,
>;
extern "C" {
    pub fn rz_interval_tree_all_at(
        tree: *mut RzIntervalTree,
        start: ::std::os::raw::c_ulonglong,
        cb: RzIntervalIterCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rz_interval_tree_all_in(
        tree: *mut RzIntervalTree,
        value: ::std::os::raw::c_ulonglong,
        end_inclusive: bool,
        cb: RzIntervalIterCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rz_interval_tree_all_intersect(
        tree: *mut RzIntervalTree,
        start: ::std::os::raw::c_ulonglong,
        end: ::std::os::raw::c_ulonglong,
        end_inclusive: bool,
        cb: RzIntervalIterCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
pub type RzIntervalTreeIter = RBIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_num_big_t {
    pub array: [::std::os::raw::c_uint; 128usize],
    pub sign: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_num_big_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_num_big_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_num_big_t>(),
        516usize,
        concat!("Size of: ", stringify!(rz_num_big_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_num_big_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rz_num_big_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_big_t),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sign) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_big_t),
            "::",
            stringify!(sign)
        )
    );
}
pub type RzNumBig = rz_num_big_t;
extern "C" {
    pub fn rz_big_new() -> *mut RzNumBig;
}
extern "C" {
    pub fn rz_big_free(b: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_init(b: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_fini(b: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_from_int(b: *mut RzNumBig, v: ::std::os::raw::c_longlong);
}
extern "C" {
    pub fn rz_big_to_int(b: *mut RzNumBig) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_big_from_hexstr(b: *mut RzNumBig, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_big_to_hexstr(b: *mut RzNumBig) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_big_assign(dst: *mut RzNumBig, src: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_add(c: *mut RzNumBig, a: *mut RzNumBig, b: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_sub(c: *mut RzNumBig, a: *mut RzNumBig, b: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_mul(c: *mut RzNumBig, a: *mut RzNumBig, b: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_div(c: *mut RzNumBig, a: *mut RzNumBig, b: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_mod(c: *mut RzNumBig, a: *mut RzNumBig, b: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_divmod(c: *mut RzNumBig, d: *mut RzNumBig, a: *mut RzNumBig, b: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_and(c: *mut RzNumBig, a: *mut RzNumBig, b: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_or(c: *mut RzNumBig, a: *mut RzNumBig, b: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_xor(c: *mut RzNumBig, a: *mut RzNumBig, b: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_lshift(c: *mut RzNumBig, a: *mut RzNumBig, nbits: usize);
}
extern "C" {
    pub fn rz_big_rshift(c: *mut RzNumBig, a: *mut RzNumBig, nbits: usize);
}
extern "C" {
    pub fn rz_big_cmp(a: *mut RzNumBig, b: *mut RzNumBig) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_big_is_zero(a: *mut RzNumBig) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_big_inc(a: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_dec(a: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_powm(c: *mut RzNumBig, a: *mut RzNumBig, b: *mut RzNumBig, m: *mut RzNumBig);
}
extern "C" {
    pub fn rz_big_isqrt(c: *mut RzNumBig, a: *mut RzNumBig);
}
extern "C" {
    pub fn rz_base64_encode(
        bout: *mut ::std::os::raw::c_char,
        bin: *const ::std::os::raw::c_uchar,
        sz: usize,
    ) -> usize;
}
extern "C" {
    pub fn rz_base64_decode(
        bout: *mut ::std::os::raw::c_uchar,
        bin: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_base64_decode_dyn(
        in_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_base64_encode_dyn(
        bin: *const ::std::os::raw::c_uchar,
        sz: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_base91_encode(
        bout: *mut ::std::os::raw::c_char,
        bin: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_base91_decode(
        bout: *mut ::std::os::raw::c_uchar,
        bin: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_mem_pool_t {
    pub nodes: *mut *mut ::std::os::raw::c_uchar,
    pub ncount: ::std::os::raw::c_int,
    pub npool: ::std::os::raw::c_int,
    pub nodesize: ::std::os::raw::c_int,
    pub poolsize: ::std::os::raw::c_int,
    pub poolcount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_mem_pool_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_mem_pool_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_mem_pool_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_mem_pool_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_mem_pool_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_mem_pool_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_mem_pool_t),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_mem_pool_t),
            "::",
            stringify!(ncount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).npool) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_mem_pool_t),
            "::",
            stringify!(npool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodesize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_mem_pool_t),
            "::",
            stringify!(nodesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poolsize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_mem_pool_t),
            "::",
            stringify!(poolsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poolcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_mem_pool_t),
            "::",
            stringify!(poolcount)
        )
    );
}
pub type RMemoryPool = rz_mem_pool_t;
extern "C" {
    pub fn rz_mem_get_num(
        b: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_mem_dup(
        s: *const ::std::os::raw::c_void,
        l: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_mem_memzero(arg1: *mut ::std::os::raw::c_void, arg2: usize);
}
extern "C" {
    pub fn rz_mem_reverse(b: *mut ::std::os::raw::c_uchar, l: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_mem_protect(
        ptr: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        prot: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_mem_set_num(
        dest: *mut ::std::os::raw::c_uchar,
        dest_size: ::std::os::raw::c_int,
        num: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_mem_eq(
        a: *const ::std::os::raw::c_uchar,
        b: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_mem_eq_masked(
        a: *const ::std::os::raw::c_uchar,
        b: *const ::std::os::raw::c_uchar,
        mask: *const ::std::os::raw::c_uchar,
        size: usize,
    ) -> bool;
}
extern "C" {
    pub fn rz_mem_copybits(
        dst: *mut ::std::os::raw::c_uchar,
        src: *const ::std::os::raw::c_uchar,
        bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rz_mem_copybits_delta(
        dst: *mut ::std::os::raw::c_uchar,
        doff: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_uchar,
        soff: ::std::os::raw::c_int,
        bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rz_mem_copyloop(
        dest: *mut ::std::os::raw::c_uchar,
        orig: *const ::std::os::raw::c_uchar,
        dsize: ::std::os::raw::c_int,
        osize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rz_mem_copy(
        dest: *mut ::std::os::raw::c_void,
        dmax: usize,
        src: *const ::std::os::raw::c_void,
        smax: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_mem_mem(
        haystack: *const ::std::os::raw::c_uchar,
        hlen: ::std::os::raw::c_int,
        needle: *const ::std::os::raw::c_uchar,
        nlen: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_mem_mem_aligned(
        haystack: *const ::std::os::raw::c_uchar,
        hlen: ::std::os::raw::c_int,
        needle: *const ::std::os::raw::c_uchar,
        nlen: ::std::os::raw::c_int,
        align: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_mem_count(addr: *mut *const ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_mem_is_printable(
        a: *const ::std::os::raw::c_uchar,
        la: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_mem_is_zero(b: *const ::std::os::raw::c_uchar, l: ::std::os::raw::c_int) -> bool;
}
pub type RzBuffer = rz_buf_t;
pub type RzBufferInit = ::std::option::Option<
    unsafe extern "C" fn(b: *mut RzBuffer, user: *const ::std::os::raw::c_void) -> bool,
>;
pub type RzBufferFini = ::std::option::Option<unsafe extern "C" fn(b: *mut RzBuffer) -> bool>;
pub type RzBufferRead = ::std::option::Option<
    unsafe extern "C" fn(
        b: *mut RzBuffer,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong,
>;
pub type RzBufferWrite = ::std::option::Option<
    unsafe extern "C" fn(
        b: *mut RzBuffer,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong,
>;
pub type RzBufferGetSize =
    ::std::option::Option<unsafe extern "C" fn(b: *mut RzBuffer) -> ::std::os::raw::c_ulonglong>;
pub type RzBufferResize = ::std::option::Option<
    unsafe extern "C" fn(b: *mut RzBuffer, newsize: ::std::os::raw::c_ulonglong) -> bool,
>;
pub type RzBufferSeek = ::std::option::Option<
    unsafe extern "C" fn(
        b: *mut RzBuffer,
        addr: ::std::os::raw::c_longlong,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong,
>;
pub type RzBufferGetWholeBuf = ::std::option::Option<
    unsafe extern "C" fn(
        b: *mut RzBuffer,
        sz: *mut ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_uchar,
>;
pub type RzBufferFreeWholeBuf = ::std::option::Option<unsafe extern "C" fn(b: *mut RzBuffer)>;
pub type RzBufferNonEmptyList =
    ::std::option::Option<unsafe extern "C" fn(b: *mut RzBuffer) -> *mut RzList>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_buffer_methods_t {
    pub init: RzBufferInit,
    pub fini: RzBufferFini,
    pub read: RzBufferRead,
    pub write: RzBufferWrite,
    pub get_size: RzBufferGetSize,
    pub resize: RzBufferResize,
    pub seek: RzBufferSeek,
    pub get_whole_buf: RzBufferGetWholeBuf,
    pub free_whole_buf: RzBufferFreeWholeBuf,
}
#[test]
fn bindgen_test_layout_rz_buffer_methods_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_buffer_methods_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_buffer_methods_t>(),
        72usize,
        concat!("Size of: ", stringify!(rz_buffer_methods_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_buffer_methods_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_buffer_methods_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buffer_methods_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fini) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buffer_methods_t),
            "::",
            stringify!(fini)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buffer_methods_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buffer_methods_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buffer_methods_t),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buffer_methods_t),
            "::",
            stringify!(resize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buffer_methods_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_whole_buf) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buffer_methods_t),
            "::",
            stringify!(get_whole_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_whole_buf) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buffer_methods_t),
            "::",
            stringify!(free_whole_buf)
        )
    );
}
pub type RzBufferMethods = rz_buffer_methods_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_buf_t {
    pub methods: *const RzBufferMethods,
    pub priv_: *mut ::std::os::raw::c_void,
    pub whole_buf: *mut ::std::os::raw::c_uchar,
    pub readonly: bool,
    pub Oxff_priv: ::std::os::raw::c_uchar,
    pub refctr: ::std::os::raw::c_int,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_buf_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_buf_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_buf_t>(),
        40usize,
        concat!("Size of: ", stringify!(rz_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_buf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methods) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buf_t),
            "::",
            stringify!(methods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priv_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buf_t),
            "::",
            stringify!(priv_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).whole_buf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buf_t),
            "::",
            stringify!(whole_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readonly) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buf_t),
            "::",
            stringify!(readonly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Oxff_priv) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buf_t),
            "::",
            stringify!(Oxff_priv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refctr) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buf_t),
            "::",
            stringify!(refctr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buf_t),
            "::",
            stringify!(fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_buf_sparse_chunk_t {
    #[doc = "< inclusive"]
    pub from: ::std::os::raw::c_ulonglong,
    #[doc = "< inclusive, there can't be chunks with size == 0"]
    pub to: ::std::os::raw::c_ulonglong,
    #[doc = "< size == to - from + 1"]
    pub data: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_rz_buf_sparse_chunk_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_buf_sparse_chunk_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_buf_sparse_chunk_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_buf_sparse_chunk_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_buf_sparse_chunk_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_buf_sparse_chunk_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buf_sparse_chunk_t),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buf_sparse_chunk_t),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_buf_sparse_chunk_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RzBufferSparseChunk = rz_buf_sparse_chunk_t;
#[doc = "< all writes are performed in the sparse overlay"]
pub const RzBufferSparseWriteMode_RZ_BUF_SPARSE_WRITE_MODE_SPARSE: RzBufferSparseWriteMode = 0;
#[doc = "< all writes are performed in the underlying base buffer"]
pub const RzBufferSparseWriteMode_RZ_BUF_SPARSE_WRITE_MODE_THROUGH: RzBufferSparseWriteMode = 1;
pub type RzBufferSparseWriteMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn rz_buf_new_empty(len: ::std::os::raw::c_ulonglong) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_new_file(
        file: *const ::std::os::raw::c_char,
        perm: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_new_mmap(
        file: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_new_slice(
        b: *mut RzBuffer,
        offset: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_new_slurp(file: *const ::std::os::raw::c_char) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_new_sparse(Oxff: ::std::os::raw::c_uchar) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_new_sparse_overlay(
        b: *mut RzBuffer,
        write_mode: RzBufferSparseWriteMode,
    ) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_new_with_buf(b: *mut RzBuffer) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_new_with_bytes(
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_new_with_io_fd(
        iob: *mut ::std::os::raw::c_void,
        fd: ::std::os::raw::c_int,
    ) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_new_with_io(iob: *mut ::std::os::raw::c_void) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_new_with_methods(
        methods: *const RzBufferMethods,
        init_user: *mut ::std::os::raw::c_void,
    ) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_new_with_pointers(
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
        steal: bool,
    ) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_new_with_string(msg: *const ::std::os::raw::c_char) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_get_nstring(
        b: *mut RzBuffer,
        addr: ::std::os::raw::c_ulonglong,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_buf_get_string(
        b: *mut RzBuffer,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_buf_to_string(b: *mut RzBuffer) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_buf_ref(b: *mut RzBuffer) -> *mut RzBuffer;
}
extern "C" {
    pub fn rz_buf_append_buf(b: *mut RzBuffer, a: *mut RzBuffer) -> bool;
}
extern "C" {
    pub fn rz_buf_append_buf_slice(
        b: *mut RzBuffer,
        a: *mut RzBuffer,
        offset: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_buf_append_bytes(
        b: *mut RzBuffer,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_buf_append_nbytes(b: *mut RzBuffer, len: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn rz_buf_append_ut16(b: *mut RzBuffer, n: ::std::os::raw::c_ushort) -> bool;
}
extern "C" {
    pub fn rz_buf_append_ut32(b: *mut RzBuffer, n: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn rz_buf_append_ut64(b: *mut RzBuffer, n: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn rz_buf_dump(buf: *mut RzBuffer, file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_buf_fini(b: *mut RzBuffer) -> bool;
}
extern "C" {
    pub fn rz_buf_prepend_bytes(
        b: *mut RzBuffer,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_buf_read8(b: *mut RzBuffer, result: *mut ::std::os::raw::c_uchar) -> bool;
}
extern "C" {
    pub fn rz_buf_read8_at(
        b: *mut RzBuffer,
        addr: ::std::os::raw::c_ulonglong,
        result: *mut ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn rz_buf_resize(b: *mut RzBuffer, newsize: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn rz_buf_set_bytes(
        b: *mut RzBuffer,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_buf_write8(b: *mut RzBuffer, value: ::std::os::raw::c_uchar) -> bool;
}
extern "C" {
    pub fn rz_buf_write8_at(
        b: *mut RzBuffer,
        addr: ::std::os::raw::c_ulonglong,
        value: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn rz_buf_append_string(
        b: *mut RzBuffer,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_buf_fread(
        b: *mut RzBuffer,
        buf: *mut ::std::os::raw::c_uchar,
        fmt: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_buf_fread_at(
        b: *mut RzBuffer,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        fmt: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_buf_fwrite(
        b: *mut RzBuffer,
        buf: *const ::std::os::raw::c_uchar,
        fmt: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_buf_fwrite_at(
        b: *mut RzBuffer,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        fmt: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_buf_insert_bytes(
        b: *mut RzBuffer,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_buf_read(
        b: *mut RzBuffer,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_buf_read_at(
        b: *mut RzBuffer,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_buf_seek(
        b: *mut RzBuffer,
        addr: ::std::os::raw::c_longlong,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_buf_write(
        b: *mut RzBuffer,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_buf_write_at(
        b: *mut RzBuffer,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_buf_size(b: *mut RzBuffer) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_buf_tell(b: *mut RzBuffer) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_buf_free(b: *mut RzBuffer);
}
extern "C" {
    pub fn rz_buf_set_overflow_byte(b: *mut RzBuffer, Oxff: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn rz_buf_data(
        b: *mut RzBuffer,
        size: *mut ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_uchar;
}
pub type RzBufferFwdScan = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_ulonglong,
>;
extern "C" {
    pub fn rz_buf_fwd_scan(
        b: *mut RzBuffer,
        start: ::std::os::raw::c_ulonglong,
        amount: ::std::os::raw::c_ulonglong,
        fwd_scan: RzBufferFwdScan,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_buf_uleb128(
        buffer: *mut RzBuffer,
        value: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_buf_sleb128(
        buffer: *mut RzBuffer,
        value: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_buf_sparse_get_chunks(
        b: *mut RzBuffer,
        count: *mut usize,
    ) -> *const RzBufferSparseChunk;
}
extern "C" {
    pub fn rz_buf_sparse_set_write_mode(b: *mut RzBuffer, mode: RzBufferSparseWriteMode);
}
extern "C" {
    pub fn rz_buf_sparse_populated_in(
        b: *mut RzBuffer,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_deflatew_buf(
        src: *mut RzBuffer,
        dst: *mut RzBuffer,
        block_size: ::std::os::raw::c_ulonglong,
        src_consumed: *mut ::std::os::raw::c_uchar,
        wbits: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_deflate_buf(
        src: *mut RzBuffer,
        dst: *mut RzBuffer,
        block_size: ::std::os::raw::c_ulonglong,
        src_consumed: *mut ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn rz_inflatew_buf(
        src: *mut RzBuffer,
        dst: *mut RzBuffer,
        block_size: ::std::os::raw::c_ulonglong,
        src_consumed: *mut ::std::os::raw::c_uchar,
        wbits: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_inflate_buf(
        src: *mut RzBuffer,
        dst: *mut RzBuffer,
        block_size: ::std::os::raw::c_ulonglong,
        src_consumed: *mut ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn rz_lzma_dec_buf(
        src: *mut RzBuffer,
        dst: *mut RzBuffer,
        block_size: ::std::os::raw::c_ulonglong,
        src_consumed: *mut ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn rz_lzma_enc_buf(
        src: *mut RzBuffer,
        dst: *mut RzBuffer,
        block_size: ::std::os::raw::c_ulonglong,
        src_consumed: *mut ::std::os::raw::c_uchar,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::std::mem::MaybeUninit<itimerspec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_time_gettimeofday(p: *mut timeval, tz: *mut timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_time_now() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_time_now_mono() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_time_stamp_to_str(timestamp: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_time_dos_time_stamp_to_posix(
        timestamp: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_time_stamp_is_dos_format(
        certainPosixTimeStamp: ::std::os::raw::c_uint,
        possiblePosixOrDosTimeStamp: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn rz_time_date_dos_to_string(
        timestamp: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_time_date_hfs_to_string(
        timestamp: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_time_date_w32_to_string(
        timestamp: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_time_date_now_to_string() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_asctime_r(
        tm: *const tm,
        buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_ctime_r(
        timer: *const time_t,
        buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_localtime_r(time: *const time_t, res: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn rz_gmtime_r(time: *const time_t, res: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn rz_debruijn_pattern(
        size: ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_debruijn_offset(
        start: ::std::os::raw::c_int,
        charset: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_ulonglong,
        is_big_endian: bool,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_mmap_t {
    pub buf: *mut ::std::os::raw::c_uchar,
    pub base: ::std::os::raw::c_ulonglong,
    pub len: ::std::os::raw::c_ulonglong,
    pub perm: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub filename: *mut ::std::os::raw::c_char,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_mmap_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_mmap_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_mmap_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_mmap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_mmap_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_mmap_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_mmap_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_mmap_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_mmap_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perm) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_mmap_t),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_mmap_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_mmap_t),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_mmap_t),
            "::",
            stringify!(fd)
        )
    );
}
pub type RzMmap = rz_mmap_t;
extern "C" {
    pub fn rz_file_is_abspath(file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_file_is_c(file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_file_is_directory(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_file_is_regular(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_file_truncate(
        filename: *const ::std::os::raw::c_char,
        newsize: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_file_size(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_file_root(
        root: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_mmap(
        file: *const ::std::os::raw::c_char,
        perm: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        base: ::std::os::raw::c_ulonglong,
    ) -> *mut RzMmap;
}
extern "C" {
    pub fn rz_file_mmap_resize(
        m: *mut RzMmap,
        newsize: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_file_mmap_free(m: *mut RzMmap);
}
extern "C" {
    pub fn rz_file_chmod(
        file: *const ::std::os::raw::c_char,
        mod_: *const ::std::os::raw::c_char,
        recursive: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_file_temp(prefix: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_path(bin: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_path_join(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_basename(path: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_dos_basename(
        path: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_dirname(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_abspath_rel(
        cwd: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_abspath(file: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_relpath(
        base: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_path_local_to_unix(
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_path_unix_to_local(
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_binsh() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_inflatew(
        src: *const ::std::os::raw::c_uchar,
        srcLen: ::std::os::raw::c_int,
        srcConsumed: *mut ::std::os::raw::c_int,
        dstLen: *mut ::std::os::raw::c_int,
        wbits: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_inflate(
        src: *const ::std::os::raw::c_uchar,
        srcLen: ::std::os::raw::c_int,
        srcConsumed: *mut ::std::os::raw::c_int,
        dstLen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_inflate_ignore_header(
        src: *const ::std::os::raw::c_uchar,
        srcLen: ::std::os::raw::c_int,
        srcConsumed: *mut ::std::os::raw::c_int,
        dstLen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_deflatew(
        src: *const ::std::os::raw::c_uchar,
        srcLen: ::std::os::raw::c_int,
        srcConsumed: *mut ::std::os::raw::c_int,
        dstLen: *mut ::std::os::raw::c_int,
        wbits: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_deflate(
        src: *const ::std::os::raw::c_uchar,
        srcLen: ::std::os::raw::c_int,
        srcConsumed: *mut ::std::os::raw::c_int,
        dstLen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_file_gzslurp(
        str_: *const ::std::os::raw::c_char,
        outlen: *mut ::std::os::raw::c_int,
        origonfail: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_stdin_slurp(sz: *mut ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_slurp(
        str_: *const ::std::os::raw::c_char,
        usz: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_slurp_range(
        str_: *const ::std::os::raw::c_char,
        off: ::std::os::raw::c_ulonglong,
        sz: ::std::os::raw::c_int,
        osz: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_slurp_random_line(
        file: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_slurp_random_line_count(
        file: *const ::std::os::raw::c_char,
        linecount: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_slurp_hexpairs(
        str_: *const ::std::os::raw::c_char,
        usz: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_file_dump(
        file: *const ::std::os::raw::c_char,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        append: bool,
    ) -> bool;
}
extern "C" {
    pub fn rz_file_touch(file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_file_hexdump(
        file: *const ::std::os::raw::c_char,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        append: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_file_rm(file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_file_exists(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_file_fexists(fmt: *const ::std::os::raw::c_char, ...) -> bool;
}
extern "C" {
    pub fn rz_file_slurp_line(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        context: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_slurp_lines(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_slurp_lines_from_bottom(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_mkstemp(
        prefix: *const ::std::os::raw::c_char,
        oname: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_file_tmpdir() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_readlink(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_file_copy(
        src: *const ::std::os::raw::c_char,
        dst: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_file_globsearch(
        globbed_path: *const ::std::os::raw::c_char,
        maxdepth: ::std::os::raw::c_int,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_file_deflate(
        src: *const ::std::os::raw::c_char,
        dst: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_file_inflate(
        src: *const ::std::os::raw::c_char,
        dst: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_file_is_deflated(src: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[doc = " Portable float nums in C"]
    pub fn rz_types_gen_f32_nan() -> f32;
}
extern "C" {
    pub fn rz_types_gen_f32_inf() -> f32;
}
extern "C" {
    pub fn rz_types_gen_f64_nan() -> f64;
}
extern "C" {
    pub fn rz_types_gen_f64_inf() -> f64;
}
extern "C" {
    pub fn rz_types_gen_f128_nan() -> u128;
}
extern "C" {
    pub fn rz_types_gen_f128_inf() -> u128;
}
#[doc = "< IEEE-754 binary 32 format (single)"]
pub const rz_float_format_enum_RZ_FLOAT_IEEE754_BIN_32: rz_float_format_enum = 0;
#[doc = "< IEEE-754 binary64 format (double)"]
pub const rz_float_format_enum_RZ_FLOAT_IEEE754_BIN_64: rz_float_format_enum = 1;
#[doc = "< IEEE-754 binary80 format"]
pub const rz_float_format_enum_RZ_FLOAT_IEEE754_BIN_80: rz_float_format_enum = 2;
#[doc = "< IEEE-754 binary128 format"]
pub const rz_float_format_enum_RZ_FLOAT_IEEE754_BIN_128: rz_float_format_enum = 3;
#[doc = "< IEEE-754 decimal64 format, not implemented"]
pub const rz_float_format_enum_RZ_FLOAT_IEEE754_DEC_64: rz_float_format_enum = 4;
#[doc = "< IEEE-754 decimal128 format, not implemented"]
pub const rz_float_format_enum_RZ_FLOAT_IEEE754_DEC_128: rz_float_format_enum = 5;
#[doc = "< End of enums"]
pub const rz_float_format_enum_RZ_FLOAT_UNK: rz_float_format_enum = 6;
pub type rz_float_format_enum = ::std::os::raw::c_uint;
pub use self::rz_float_format_enum as RzFloatFormat;
#[doc = "< base of float representation, 2 for binary, 10 for decimal representation"]
pub const rz_float_format_info_RZ_FLOAT_INFO_BASE: rz_float_format_info = 0;
#[doc = "< info about width of exponent field, in bits"]
pub const rz_float_format_info_RZ_FLOAT_INFO_EXP_LEN: rz_float_format_info = 1;
#[doc = "< info about width of mantissa field, in bits"]
pub const rz_float_format_info_RZ_FLOAT_INFO_MAN_LEN: rz_float_format_info = 2;
#[doc = "< info of length of format bv"]
pub const rz_float_format_info_RZ_FLOAT_INFO_TOTAL_LEN: rz_float_format_info = 3;
#[doc = "< exponent bias"]
pub const rz_float_format_info_RZ_FLOAT_INFO_BIAS: rz_float_format_info = 4;
pub type rz_float_format_info = ::std::os::raw::c_uint;
pub use self::rz_float_format_info as RzFloatInfo;
#[doc = "< rounding to nearest, ties to even"]
pub const rz_float_round_enum_RZ_FLOAT_RMODE_RNE: rz_float_round_enum = 0;
#[doc = "< rounding to nearest, ties away"]
pub const rz_float_round_enum_RZ_FLOAT_RMODE_RNA: rz_float_round_enum = 1;
#[doc = "< rounding towards positive"]
pub const rz_float_round_enum_RZ_FLOAT_RMODE_RTP: rz_float_round_enum = 2;
#[doc = "< rounding towards negative"]
pub const rz_float_round_enum_RZ_FLOAT_RMODE_RTN: rz_float_round_enum = 3;
#[doc = "< rounding towards zero"]
pub const rz_float_round_enum_RZ_FLOAT_RMODE_RTZ: rz_float_round_enum = 4;
#[doc = "< end"]
pub const rz_float_round_enum_RZ_FLOAT_RMODE_UNK: rz_float_round_enum = 5;
pub type rz_float_round_enum = ::std::os::raw::c_uint;
pub use self::rz_float_round_enum as RzFloatRMode;
#[doc = "< Invalid operation"]
pub const rz_float_exception_enum_RZ_FLOAT_E_INVALID_OP: rz_float_exception_enum = 1;
#[doc = "< Divide zero"]
pub const rz_float_exception_enum_RZ_FLOAT_E_DIV_ZERO: rz_float_exception_enum = 2;
#[doc = "< overflow exception"]
pub const rz_float_exception_enum_RZ_FLOAT_E_OVERFLOW: rz_float_exception_enum = 4;
#[doc = "< underflow exception"]
pub const rz_float_exception_enum_RZ_FLOAT_E_UNDERFLOW: rz_float_exception_enum = 8;
#[doc = "< calculated result is inexact"]
pub const rz_float_exception_enum_RZ_FLOAT_E_INEXACT: rz_float_exception_enum = 16;
pub type rz_float_exception_enum = ::std::os::raw::c_uint;
pub use self::rz_float_exception_enum as RzFloatException;
#[doc = "< not a special num"]
pub const rz_float_speciality_enum_RZ_FLOAT_SPEC_NOT: rz_float_speciality_enum = 0;
#[doc = "< zero float"]
pub const rz_float_speciality_enum_RZ_FLOAT_SPEC_ZERO: rz_float_speciality_enum = 1;
#[doc = "< positive infinity"]
pub const rz_float_speciality_enum_RZ_FLOAT_SPEC_PINF: rz_float_speciality_enum = 2;
#[doc = "< negative infinity"]
pub const rz_float_speciality_enum_RZ_FLOAT_SPEC_NINF: rz_float_speciality_enum = 3;
#[doc = "< Quiet NaN"]
pub const rz_float_speciality_enum_RZ_FLOAT_SPEC_QNAN: rz_float_speciality_enum = 4;
#[doc = "< Signaling NaN"]
pub const rz_float_speciality_enum_RZ_FLOAT_SPEC_SNAN: rz_float_speciality_enum = 5;
#[doc = " IEEE-754-2008 special num in float (NaN, Infinity)\n A : MSB of the mantissa, represents `is_quiet` flag\n quiet_NaN : A == 1, signaling_NaN : A == 0\n PA-RISC and MIPS, use A as is_signal flag. Should reverse the case"]
pub type rz_float_speciality_enum = ::std::os::raw::c_uint;
#[doc = " IEEE-754-2008 special num in float (NaN, Infinity)\n A : MSB of the mantissa, represents `is_quiet` flag\n quiet_NaN : A == 1, signaling_NaN : A == 0\n PA-RISC and MIPS, use A as is_signal flag. Should reverse the case"]
pub use self::rz_float_speciality_enum as RzFloatSpec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_float_t {
    #[doc = "< An interpretation of bitvector"]
    pub r: RzFloatFormat,
    #[doc = "< The bitvector of float"]
    pub s: *mut RzBitVector,
    #[doc = "< exception of float operations"]
    pub exception: RzFloatException,
}
#[test]
fn bindgen_test_layout_rz_float_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_float_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_float_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_float_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_float_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_float_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_float_t),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_float_t),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exception) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_float_t),
            "::",
            stringify!(exception)
        )
    );
}
pub type RzFloat = rz_float_t;
extern "C" {
    pub fn rz_float_get_format_info(
        format: RzFloatFormat,
        which_info: RzFloatInfo,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_float_fini(f: *mut RzFloat);
}
extern "C" {
    pub fn rz_float_free(f: *mut RzFloat);
}
extern "C" {
    pub fn rz_float_init(f: *mut RzFloat, format: RzFloatFormat) -> bool;
}
extern "C" {
    pub fn rz_float_new(format: RzFloatFormat) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_dup(f: *mut RzFloat) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_new_from_f32(value: f32) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_new_from_f64(value: f64) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_new_from_f80(value: u128) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_new_from_f128(value: u128) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_new_from_bv(bv: *const RzBitVector) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_set_from_f32(f: *mut RzFloat, value: f32) -> bool;
}
extern "C" {
    pub fn rz_float_set_from_f64(f: *mut RzFloat, value: f64) -> bool;
}
extern "C" {
    pub fn rz_float_set_from_f80(f: *mut RzFloat, value: u128) -> bool;
}
extern "C" {
    pub fn rz_float_set_from_f128(f: *mut RzFloat, value: u128) -> bool;
}
extern "C" {
    pub fn rz_float_get_exponent_squashed(f: *mut RzFloat) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_float_get_mantissa_squashed(f: *mut RzFloat) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_float_get_mantissa_stretched(f: *mut RzFloat) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_float_get_sign(f: *mut RzFloat) -> bool;
}
extern "C" {
    pub fn rz_float_set_sign(f: *mut RzFloat, new_sign: bool) -> bool;
}
extern "C" {
    pub fn rz_float_get_exponent(f: *mut RzFloat) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_float_get_exponent_val(f: *mut RzFloat) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_float_get_exponent_val_no_bias(f: *mut RzFloat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_float_get_mantissa(f: *mut RzFloat) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_float_is_negative(f: *mut RzFloat) -> bool;
}
extern "C" {
    pub fn rz_float_detect_spec(f: *mut RzFloat) -> RzFloatSpec;
}
extern "C" {
    pub fn rz_float_is_inf(f: *mut RzFloat) -> bool;
}
extern "C" {
    pub fn rz_float_is_nan(f: *mut RzFloat) -> bool;
}
extern "C" {
    pub fn rz_float_is_zero(f: *mut RzFloat) -> bool;
}
extern "C" {
    pub fn rz_float_is_equal(x: *mut RzFloat, y: *mut RzFloat) -> bool;
}
extern "C" {
    pub fn rz_float_neg(f: *mut RzFloat) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_succ(f: *mut RzFloat) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_pred(f: *mut RzFloat) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_cmp(x: *mut RzFloat, y: *mut RzFloat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_float_add_ieee_bin(
        left: *mut RzFloat,
        right: *mut RzFloat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_sub_ieee_bin(
        left: *mut RzFloat,
        right: *mut RzFloat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_mul_ieee_bin(
        left: *mut RzFloat,
        right: *mut RzFloat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_div_ieee_bin(
        left: *mut RzFloat,
        right: *mut RzFloat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_rem_ieee_bin(
        left: *mut RzFloat,
        right: *mut RzFloat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_mod_ieee_bin(
        left: *mut RzFloat,
        right: *mut RzFloat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_fma_ieee_bin(
        a: *mut RzFloat,
        b: *mut RzFloat,
        c: *mut RzFloat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_sqrt_ieee_bin(n: *mut RzFloat, mode: RzFloatRMode) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_add(
        left: *mut RzFloat,
        right: *mut RzFloat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_sub(
        left: *mut RzFloat,
        right: *mut RzFloat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_mul(
        left: *mut RzFloat,
        right: *mut RzFloat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_div(
        left: *mut RzFloat,
        right: *mut RzFloat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_rem(
        left: *mut RzFloat,
        right: *mut RzFloat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_mod(
        left: *mut RzFloat,
        right: *mut RzFloat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_fma(
        a: *mut RzFloat,
        b: *mut RzFloat,
        c: *mut RzFloat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_sqrt(n: *mut RzFloat, mode: RzFloatRMode) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_trunc(f: *mut RzFloat) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_abs(f: *mut RzFloat) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_round_to_integral(f: *mut RzFloat, mode: RzFloatRMode) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_round_significant(
        sign: bool,
        sig: *mut RzBitVector,
        precision: ::std::os::raw::c_uint,
        mode: RzFloatRMode,
        should_inc: *mut bool,
    ) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_float_round_bv_and_pack(
        sign: bool,
        exp: ::std::os::raw::c_int,
        sig: *mut RzBitVector,
        format: RzFloatFormat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_new_from_ut64_as_f64(value: ::std::os::raw::c_ulonglong) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_new_from_ut32_as_f32(value: ::std::os::raw::c_uint) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_as_string(f: *mut RzFloat) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_float_as_dec_string(f: *mut RzFloat) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_float_as_bit_string(f: *mut RzFloat) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_float_as_hex_string(f: *mut RzFloat, use_pad: bool) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_float_set_from_inf(f: *mut RzFloat, is_negative: bool) -> bool;
}
extern "C" {
    pub fn rz_float_set_from_zero(f: *mut RzFloat) -> bool;
}
extern "C" {
    pub fn rz_float_set_from_qnan(f: *mut RzFloat) -> bool;
}
extern "C" {
    pub fn rz_float_set_from_snan(f: *mut RzFloat) -> bool;
}
extern "C" {
    pub fn rz_float_new_inf(format: RzFloatFormat, is_negative: bool) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_new_zero(format: RzFloatFormat) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_new_qnan(format: RzFloatFormat) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_new_snan(format: RzFloatFormat) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_cast_float(
        bv: *mut RzBitVector,
        format: RzFloatFormat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_cast_sfloat(
        bv: *mut RzBitVector,
        format: RzFloatFormat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_float_cast_int(
        f: *mut RzFloat,
        length: ::std::os::raw::c_uint,
        mode: RzFloatRMode,
    ) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_float_cast_sint(
        f: *mut RzFloat,
        length: ::std::os::raw::c_uint,
        mode: RzFloatRMode,
    ) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_float_convert(
        f: *mut RzFloat,
        format: RzFloatFormat,
        mode: RzFloatRMode,
    ) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_hex_pair2bin(arg: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_hex_str2binmask(
        in_: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_uchar,
        mask: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_hex_str2bin(
        in_: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_hex_bin2str(
        in_: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_hex_ut2st_str(
        in_: ::std::os::raw::c_uint,
        out: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rz_hex_bin2strdup(
        in_: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_hex_to_byte(val: *mut ::std::os::raw::c_uchar, c: ::std::os::raw::c_uchar) -> bool;
}
extern "C" {
    pub fn rz_hex_str_is_valid(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_hex_bin_truncate(
        in_: ::std::os::raw::c_ulonglong,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_hex_from_c(code: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_hex_from_py(code: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_hex_from_code(code: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_hex_no_code(code: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_hex_from_py_str(
        out: *mut ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_hex_from_py_array(
        out: *mut ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_hex_from_c_str(
        out: *mut ::std::os::raw::c_char,
        code: *mut *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_hex_from_c_array(
        out: *mut ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_name_check(name: *const ::std::os::raw::c_char, strict: bool) -> bool;
}
extern "C" {
    pub fn rz_name_filter(
        name: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        strict: bool,
    ) -> bool;
}
extern "C" {
    pub fn rz_name_filter2(
        name: *const ::std::os::raw::c_char,
        strict: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_name_validate_char(ch: ::std::os::raw::c_char, strict: bool) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzNumCalcValue {
    pub d: f64,
    pub n: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_RzNumCalcValue() {
    const UNINIT: ::std::mem::MaybeUninit<RzNumCalcValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzNumCalcValue>(),
        16usize,
        concat!("Size of: ", stringify!(RzNumCalcValue))
    );
    assert_eq!(
        ::std::mem::align_of::<RzNumCalcValue>(),
        8usize,
        concat!("Alignment of ", stringify!(RzNumCalcValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzNumCalcValue),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzNumCalcValue),
            "::",
            stringify!(n)
        )
    );
}
pub const RzNumCalcToken_RNCNAME: RzNumCalcToken = 0;
pub const RzNumCalcToken_RNCNUMBER: RzNumCalcToken = 1;
pub const RzNumCalcToken_RNCEND: RzNumCalcToken = 2;
pub const RzNumCalcToken_RNCINC: RzNumCalcToken = 3;
pub const RzNumCalcToken_RNCDEC: RzNumCalcToken = 4;
pub const RzNumCalcToken_RNCLT: RzNumCalcToken = 5;
pub const RzNumCalcToken_RNCGT: RzNumCalcToken = 6;
pub const RzNumCalcToken_RNCPLUS: RzNumCalcToken = 43;
pub const RzNumCalcToken_RNCMINUS: RzNumCalcToken = 45;
pub const RzNumCalcToken_RNCMUL: RzNumCalcToken = 42;
pub const RzNumCalcToken_RNCEXP: RzNumCalcToken = 69;
pub const RzNumCalcToken_RNCDIV: RzNumCalcToken = 47;
pub const RzNumCalcToken_RNCMOD: RzNumCalcToken = 37;
pub const RzNumCalcToken_RNCNEG: RzNumCalcToken = 126;
pub const RzNumCalcToken_RNCAND: RzNumCalcToken = 38;
pub const RzNumCalcToken_RNCORR: RzNumCalcToken = 124;
pub const RzNumCalcToken_RNCXOR: RzNumCalcToken = 94;
pub const RzNumCalcToken_RNCPRINT: RzNumCalcToken = 59;
pub const RzNumCalcToken_RNCASSIGN: RzNumCalcToken = 61;
pub const RzNumCalcToken_RNCLEFTP: RzNumCalcToken = 40;
pub const RzNumCalcToken_RNCRIGHTP: RzNumCalcToken = 41;
pub const RzNumCalcToken_RNCSHL: RzNumCalcToken = 60;
pub const RzNumCalcToken_RNCSHR: RzNumCalcToken = 62;
pub const RzNumCalcToken_RNCROL: RzNumCalcToken = 35;
pub const RzNumCalcToken_RNCROR: RzNumCalcToken = 36;
pub type RzNumCalcToken = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_num_calc_t {
    pub curr_tok: RzNumCalcToken,
    pub number_value: RzNumCalcValue,
    pub string_value: [::std::os::raw::c_char; 1024usize],
    pub errors: ::std::os::raw::c_int,
    pub oc: ::std::os::raw::c_char,
    pub calc_err: *const ::std::os::raw::c_char,
    pub calc_i: ::std::os::raw::c_int,
    pub calc_buf: *const ::std::os::raw::c_char,
    pub calc_len: ::std::os::raw::c_int,
    pub under_calc: bool,
}
#[test]
fn bindgen_test_layout_rz_num_calc_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_num_calc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_num_calc_t>(),
        1088usize,
        concat!("Size of: ", stringify!(rz_num_calc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_num_calc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_num_calc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curr_tok) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_calc_t),
            "::",
            stringify!(curr_tok)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_calc_t),
            "::",
            stringify!(number_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_calc_t),
            "::",
            stringify!(string_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errors) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_calc_t),
            "::",
            stringify!(errors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oc) as usize - ptr as usize },
        1052usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_calc_t),
            "::",
            stringify!(oc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calc_err) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_calc_t),
            "::",
            stringify!(calc_err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calc_i) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_calc_t),
            "::",
            stringify!(calc_i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calc_buf) as usize - ptr as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_calc_t),
            "::",
            stringify!(calc_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calc_len) as usize - ptr as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_calc_t),
            "::",
            stringify!(calc_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).under_calc) as usize - ptr as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_calc_t),
            "::",
            stringify!(under_calc)
        )
    );
}
pub type RzNumCalc = rz_num_calc_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_num_t {
    pub callback: ::std::option::Option<
        unsafe extern "C" fn(
            userptr: *mut rz_num_t,
            str_: *const ::std::os::raw::c_char,
            ok: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
    >,
    pub cb_from_value: ::std::option::Option<
        unsafe extern "C" fn(
            userptr: *mut rz_num_t,
            value: ::std::os::raw::c_ulonglong,
            ok: *mut ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub value: ::std::os::raw::c_ulonglong,
    pub fvalue: f64,
    pub userptr: *mut ::std::os::raw::c_void,
    pub dbz: ::std::os::raw::c_int,
    #[doc = " division by zero happened"]
    pub nc: RzNumCalc,
}
#[test]
fn bindgen_test_layout_rz_num_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_num_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_num_t>(),
        1136usize,
        concat!("Size of: ", stringify!(rz_num_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_num_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_num_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_t),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_from_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_t),
            "::",
            stringify!(cb_from_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fvalue) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_t),
            "::",
            stringify!(fvalue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userptr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_t),
            "::",
            stringify!(userptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbz) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_t),
            "::",
            stringify!(dbz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_num_t),
            "::",
            stringify!(nc)
        )
    );
}
pub type RzNum = rz_num_t;
pub type RzNumCallback = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut rz_num_t,
        str_: *const ::std::os::raw::c_char,
        ok: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong,
>;
pub type RzNumCallback2 = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut rz_num_t,
        arg1: ::std::os::raw::c_ulonglong,
        ok: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char,
>;
extern "C" {
    pub fn rz_num_new(
        cb: RzNumCallback,
        cb2: RzNumCallback2,
        ptr: *mut ::std::os::raw::c_void,
    ) -> *mut RzNum;
}
extern "C" {
    pub fn rz_num_free(num: *mut RzNum);
}
extern "C" {
    pub fn rz_num_units(
        buf: *mut ::std::os::raw::c_char,
        len: usize,
        number: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_num_conditional(
        num: *mut RzNum,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_num_calc(
        num: *mut RzNum,
        str_: *const ::std::os::raw::c_char,
        err: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_num_calc_index(
        num: *mut RzNum,
        p: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_num_chs(
        cylinder: ::std::os::raw::c_int,
        head: ::std::os::raw::c_int,
        sector: ::std::os::raw::c_int,
        sectorsize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_num_is_valid_input(
        num: *mut RzNum,
        input_value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_num_get_input_value(
        num: *mut RzNum,
        input_value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_num_get_name(
        num: *mut RzNum,
        n: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_num_as_string(
        ___: *mut RzNum,
        n: ::std::os::raw::c_ulonglong,
        printable_only: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_num_tail(
        num: *mut RzNum,
        addr: ::std::os::raw::c_ulonglong,
        hex: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_num_tail_base(
        num: *mut RzNum,
        addr: ::std::os::raw::c_ulonglong,
        off: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_num_minmax_swap(
        a: *mut ::std::os::raw::c_ulonglong,
        b: *mut ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn rz_num_minmax_swap_i(a: *mut ::std::os::raw::c_int, b: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_num_math(
        num: *mut RzNum,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_num_get(
        num: *mut RzNum,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_num_to_bits(
        out: *mut ::std::os::raw::c_char,
        num: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_num_to_trits(
        out: *mut ::std::os::raw::c_char,
        num: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_num_rand32(max: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_num_rand64(max: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_num_irand();
}
extern "C" {
    pub fn rz_get_input_num_value(
        num: *mut RzNum,
        input_value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_is_valid_input_num_value(
        num: *mut RzNum,
        input_value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_num_between(
        num: *mut RzNum,
        input_value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_num_is_op(c: ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_num_str_len(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_num_str_split(str_: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_num_str_split_list(str_: *mut ::std::os::raw::c_char) -> *mut RzList;
}
extern "C" {
    pub fn rz_num_dup(n: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_num_base_of_string(num: *mut RzNum, str_: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn rz_num_cos(a: f64) -> f64;
}
extern "C" {
    pub fn rz_num_sin(a: f64) -> f64;
}
extern "C" {
    pub fn rz_num_get_float(num: *mut RzNum, str_: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn rz_num_is_hex_prefix(p: *const ::std::os::raw::c_char) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzTableColumnType {
    pub name: *const ::std::os::raw::c_char,
    pub cmp: RzListComparator,
}
#[test]
fn bindgen_test_layout_RzTableColumnType() {
    const UNINIT: ::std::mem::MaybeUninit<RzTableColumnType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzTableColumnType>(),
        16usize,
        concat!("Size of: ", stringify!(RzTableColumnType))
    );
    assert_eq!(
        ::std::mem::align_of::<RzTableColumnType>(),
        8usize,
        concat!("Alignment of ", stringify!(RzTableColumnType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTableColumnType),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTableColumnType),
            "::",
            stringify!(cmp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzTableColumn {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut RzTableColumnType,
    pub align: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub maxWidth: ::std::os::raw::c_int,
    pub forceUppercase: bool,
    pub total: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RzTableColumn() {
    const UNINIT: ::std::mem::MaybeUninit<RzTableColumn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzTableColumn>(),
        40usize,
        concat!("Size of: ", stringify!(RzTableColumn))
    );
    assert_eq!(
        ::std::mem::align_of::<RzTableColumn>(),
        8usize,
        concat!("Alignment of ", stringify!(RzTableColumn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTableColumn),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTableColumn),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTableColumn),
            "::",
            stringify!(align)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTableColumn),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxWidth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTableColumn),
            "::",
            stringify!(maxWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forceUppercase) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTableColumn),
            "::",
            stringify!(forceUppercase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTableColumn),
            "::",
            stringify!(total)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzListInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub pitv: RzInterval,
    pub vitv: RzInterval,
    pub perm: ::std::os::raw::c_int,
    pub extra: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RzListInfo() {
    const UNINIT: ::std::mem::MaybeUninit<RzListInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzListInfo>(),
        56usize,
        concat!("Size of: ", stringify!(RzListInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RzListInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RzListInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzListInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzListInfo),
            "::",
            stringify!(pitv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vitv) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RzListInfo),
            "::",
            stringify!(vitv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perm) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RzListInfo),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RzListInfo),
            "::",
            stringify!(extra)
        )
    );
}
pub const RZ_TABLE_ALIGN_LEFT: _bindgen_ty_16 = 0;
pub const RZ_TABLE_ALIGN_RIGHT: _bindgen_ty_16 = 1;
pub const RZ_TABLE_ALIGN_CENTER: _bindgen_ty_16 = 2;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzTableRow {
    pub items: *mut RzPVector,
}
#[test]
fn bindgen_test_layout_RzTableRow() {
    const UNINIT: ::std::mem::MaybeUninit<RzTableRow> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzTableRow>(),
        8usize,
        concat!("Size of: ", stringify!(RzTableRow))
    );
    assert_eq!(
        ::std::mem::align_of::<RzTableRow>(),
        8usize,
        concat!("Alignment of ", stringify!(RzTableRow))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTableRow),
            "::",
            stringify!(items)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzTable {
    pub rows: *mut RzVector,
    pub cols: *mut RzVector,
    pub totalCols: ::std::os::raw::c_int,
    pub showHeader: bool,
    pub showFancy: bool,
    pub showJSON: bool,
    pub showCSV: bool,
    pub showSum: bool,
    pub adjustedCols: bool,
    pub cons: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_RzTable() {
    const UNINIT: ::std::mem::MaybeUninit<RzTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzTable>(),
        40usize,
        concat!("Size of: ", stringify!(RzTable))
    );
    assert_eq!(
        ::std::mem::align_of::<RzTable>(),
        8usize,
        concat!("Alignment of ", stringify!(RzTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rows) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTable),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cols) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTable),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalCols) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTable),
            "::",
            stringify!(totalCols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showHeader) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTable),
            "::",
            stringify!(showHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showFancy) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTable),
            "::",
            stringify!(showFancy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showJSON) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTable),
            "::",
            stringify!(showJSON)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showCSV) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTable),
            "::",
            stringify!(showCSV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showSum) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTable),
            "::",
            stringify!(showSum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adjustedCols) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTable),
            "::",
            stringify!(adjustedCols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cons) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RzTable),
            "::",
            stringify!(cons)
        )
    );
}
pub type RzTableSelector = ::std::option::Option<
    unsafe extern "C" fn(
        acc: *mut RzTableRow,
        new_row: *mut RzTableRow,
        nth: ::std::os::raw::c_int,
    ),
>;
extern "C" {
    pub fn rz_listinfo_new(
        name: *const ::std::os::raw::c_char,
        pitv: RzInterval,
        vitv: RzInterval,
        perm: ::std::os::raw::c_int,
        extra: *const ::std::os::raw::c_char,
    ) -> *mut RzListInfo;
}
extern "C" {
    pub fn rz_listinfo_free(info: *mut RzListInfo);
}
extern "C" {
    pub fn rz_table_row_fini(_row: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rz_table_column_fini(_col: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rz_table_column_clone(col: *mut RzTableColumn) -> *mut RzTableColumn;
}
extern "C" {
    pub fn rz_table_type(name: *const ::std::os::raw::c_char) -> *mut RzTableColumnType;
}
extern "C" {
    pub fn rz_table_new() -> *mut RzTable;
}
extern "C" {
    pub fn rz_table_free(t: *mut RzTable);
}
extern "C" {
    pub fn rz_table_column_nth(
        t: *mut RzTable,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_table_add_column(
        t: *mut RzTable,
        type_: *mut RzTableColumnType,
        name: *const ::std::os::raw::c_char,
        maxWidth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rz_table_set_columnsf(t: *mut RzTable, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn rz_table_set_vcolumnsf(
        t: *mut RzTable,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn rz_table_row_new(items: *mut RzPVector) -> *mut RzTableRow;
}
extern "C" {
    pub fn rz_table_add_row(t: *mut RzTable, name: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn rz_table_add_rowf(t: *mut RzTable, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn rz_table_add_row_columnsf(t: *mut RzTable, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn rz_table_add_row_vec(t: *mut RzTable, items: *mut RzPVector);
}
extern "C" {
    pub fn rz_table_tofancystring(t: *mut RzTable) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_table_tosimplestring(t: *mut RzTable) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_table_tostring(t: *mut RzTable) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_table_tocsv(t: *mut RzTable) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_table_tojson(t: *mut RzTable) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_table_filter(
        t: *mut RzTable,
        nth: ::std::os::raw::c_int,
        op: ::std::os::raw::c_int,
        un: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rz_table_sort(t: *mut RzTable, nth: ::std::os::raw::c_int, inc: bool);
}
extern "C" {
    pub fn rz_table_uniq(t: *mut RzTable);
}
extern "C" {
    pub fn rz_table_group(t: *mut RzTable, nth: ::std::os::raw::c_int, fcn: RzTableSelector);
}
extern "C" {
    pub fn rz_table_query(t: *mut RzTable, q: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_table_hide_header(t: *mut RzTable);
}
extern "C" {
    pub fn rz_table_align(
        t: *mut RzTable,
        nth: ::std::os::raw::c_int,
        align: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_table_visual_list(
        table: *mut RzTable,
        list: *mut RzList,
        seek: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_ulonglong,
        width: ::std::os::raw::c_int,
        va: bool,
    );
}
extern "C" {
    pub fn rz_table_transpose(t: *mut RzTable) -> *mut RzTable;
}
extern "C" {
    pub fn rz_table_columns(t: *mut RzTable, cols: *mut RzList);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_graph_node_t {
    pub idx: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_void,
    pub out_nodes: *mut RzList,
    pub in_nodes: *mut RzList,
    pub all_neighbours: *mut RzList,
    pub free: RzListFree,
}
#[test]
fn bindgen_test_layout_rz_graph_node_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_graph_node_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_graph_node_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_graph_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_graph_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_graph_node_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_node_t),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_node_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_nodes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_node_t),
            "::",
            stringify!(out_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_nodes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_node_t),
            "::",
            stringify!(in_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_neighbours) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_node_t),
            "::",
            stringify!(all_neighbours)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_node_t),
            "::",
            stringify!(free)
        )
    );
}
pub type RzGraphNode = rz_graph_node_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_graph_edge_t {
    pub from: *mut RzGraphNode,
    pub to: *mut RzGraphNode,
    pub nth: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_graph_edge_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_graph_edge_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_graph_edge_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_graph_edge_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_graph_edge_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_graph_edge_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_edge_t),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_edge_t),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_edge_t),
            "::",
            stringify!(nth)
        )
    );
}
pub type RzGraphEdge = rz_graph_edge_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_graph_t {
    pub n_nodes: ::std::os::raw::c_uint,
    pub n_edges: ::std::os::raw::c_uint,
    pub last_index: ::std::os::raw::c_int,
    pub nodes: *mut RzList,
}
#[test]
fn bindgen_test_layout_rz_graph_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_graph_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_graph_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_graph_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_graph_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_graph_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_nodes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_t),
            "::",
            stringify!(n_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_edges) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_t),
            "::",
            stringify!(n_edges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_t),
            "::",
            stringify!(last_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_t),
            "::",
            stringify!(nodes)
        )
    );
}
pub type RzGraph = rz_graph_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_graph_visitor_t {
    pub discover_node: ::std::option::Option<
        unsafe extern "C" fn(n: *mut RzGraphNode, vis: *mut rz_graph_visitor_t),
    >,
    pub finish_node: ::std::option::Option<
        unsafe extern "C" fn(n: *mut RzGraphNode, vis: *mut rz_graph_visitor_t),
    >,
    pub tree_edge: ::std::option::Option<
        unsafe extern "C" fn(e: *const RzGraphEdge, vis: *mut rz_graph_visitor_t),
    >,
    pub back_edge: ::std::option::Option<
        unsafe extern "C" fn(e: *const RzGraphEdge, vis: *mut rz_graph_visitor_t),
    >,
    pub fcross_edge: ::std::option::Option<
        unsafe extern "C" fn(e: *const RzGraphEdge, vis: *mut rz_graph_visitor_t),
    >,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rz_graph_visitor_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_graph_visitor_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_graph_visitor_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_graph_visitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_graph_visitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_graph_visitor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).discover_node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_visitor_t),
            "::",
            stringify!(discover_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finish_node) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_visitor_t),
            "::",
            stringify!(finish_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree_edge) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_visitor_t),
            "::",
            stringify!(tree_edge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).back_edge) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_visitor_t),
            "::",
            stringify!(back_edge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcross_edge) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_visitor_t),
            "::",
            stringify!(fcross_edge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_graph_visitor_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RzGraphVisitor = rz_graph_visitor_t;
pub type RzGraphNodeCallback =
    ::std::option::Option<unsafe extern "C" fn(n: *mut RzGraphNode, vis: *mut RzGraphVisitor)>;
pub type RzGraphEdgeCallback =
    ::std::option::Option<unsafe extern "C" fn(e: *const RzGraphEdge, vis: *mut RzGraphVisitor)>;
extern "C" {
    pub fn rz_graph_new() -> *mut RzGraph;
}
extern "C" {
    pub fn rz_graph_free(g: *mut RzGraph);
}
extern "C" {
    pub fn rz_graph_get_node(g: *const RzGraph, idx: ::std::os::raw::c_uint) -> *mut RzGraphNode;
}
extern "C" {
    pub fn rz_graph_node_iter(g: *const RzGraph, idx: ::std::os::raw::c_uint) -> *mut RzListIter;
}
extern "C" {
    pub fn rz_graph_reset(g: *mut RzGraph);
}
extern "C" {
    pub fn rz_graph_add_node(
        g: *mut RzGraph,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RzGraphNode;
}
extern "C" {
    pub fn rz_graph_add_nodef(
        g: *mut RzGraph,
        data: *mut ::std::os::raw::c_void,
        user_free: RzListFree,
    ) -> *mut RzGraphNode;
}
extern "C" {
    pub fn rz_graph_del_node(g: *mut RzGraph, n: *mut RzGraphNode);
}
extern "C" {
    pub fn rz_graph_add_edge(g: *mut RzGraph, from: *mut RzGraphNode, to: *mut RzGraphNode);
}
extern "C" {
    pub fn rz_graph_add_edge_at(
        g: *mut RzGraph,
        from: *mut RzGraphNode,
        to: *mut RzGraphNode,
        nth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rz_graph_node_split_forward(
        g: *mut RzGraph,
        split_me: *mut RzGraphNode,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RzGraphNode;
}
extern "C" {
    pub fn rz_graph_del_edge(g: *mut RzGraph, from: *mut RzGraphNode, to: *mut RzGraphNode);
}
extern "C" {
    pub fn rz_graph_get_neighbours(g: *const RzGraph, n: *const RzGraphNode) -> *const RzList;
}
extern "C" {
    pub fn rz_graph_nth_neighbour(
        g: *const RzGraph,
        n: *const RzGraphNode,
        nth: ::std::os::raw::c_int,
    ) -> *mut RzGraphNode;
}
extern "C" {
    pub fn rz_graph_innodes(g: *const RzGraph, n: *const RzGraphNode) -> *const RzList;
}
extern "C" {
    pub fn rz_graph_all_neighbours(g: *const RzGraph, n: *const RzGraphNode) -> *const RzList;
}
extern "C" {
    pub fn rz_graph_get_nodes(g: *const RzGraph) -> *const RzList;
}
extern "C" {
    pub fn rz_graph_adjacent(
        g: *const RzGraph,
        from: *const RzGraphNode,
        to: *const RzGraphNode,
    ) -> bool;
}
extern "C" {
    pub fn rz_graph_dfs_node(g: *mut RzGraph, n: *mut RzGraphNode, vis: *mut RzGraphVisitor);
}
extern "C" {
    pub fn rz_graph_dfs_node_reverse(
        g: *mut RzGraph,
        n: *mut RzGraphNode,
        vis: *mut RzGraphVisitor,
    );
}
extern "C" {
    pub fn rz_graph_dfs(g: *mut RzGraph, vis: *mut RzGraphVisitor);
}
extern "C" {
    pub fn rz_path_set_prefix(path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_path_prefix(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_incdir() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_bindir() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_libdir() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_system(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_home_prefix(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_home(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_system_rc() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_home_rc() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_home_config_rc() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_home_config_rcdir() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_home_config() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_home_cache() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_home_history() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_home_expand(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_path_realpath(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
pub const RzPanelLayout_VERTICAL: RzPanelLayout = 0;
pub const RzPanelLayout_HORIZONTAL: RzPanelLayout = 1;
pub const RzPanelLayout_NONE: RzPanelLayout = 2;
pub type RzPanelLayout = ::std::os::raw::c_uint;
pub const RzPanelType_PANEL_TYPE_DEFAULT: RzPanelType = 0;
pub const RzPanelType_PANEL_TYPE_MENU: RzPanelType = 1;
pub type RzPanelType = ::std::os::raw::c_uint;
pub const RzPanelEdge_PANEL_EDGE_NONE: RzPanelEdge = 0;
pub const RzPanelEdge_PANEL_EDGE_BOTTOM: RzPanelEdge = 1;
pub const RzPanelEdge_PANEL_EDGE_RIGHT: RzPanelEdge = 2;
pub type RzPanelEdge = ::std::os::raw::c_uint;
pub type RzPanelMenuUpdateCallback = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, parent: *const ::std::os::raw::c_char),
>;
pub type RzPanelDirectionCallback = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, direction: ::std::os::raw::c_int),
>;
pub type RzPanelRotateCallback =
    ::std::option::Option<unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, rev: bool)>;
pub type RzPanelPrintCallback = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, p: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_panel_pos_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_panel_pos_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_panel_pos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_panel_pos_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_panel_pos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_panel_pos_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rz_panel_pos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_pos_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_pos_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_pos_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_pos_t),
            "::",
            stringify!(h)
        )
    );
}
pub type RzPanelPos = rz_panel_pos_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_panel_model_t {
    pub directionCb: RzPanelDirectionCallback,
    pub rotateCb: RzPanelRotateCallback,
    pub print_cb: RzPanelPrintCallback,
    pub type_: RzPanelType,
    pub cmd: *mut ::std::os::raw::c_char,
    pub title: *mut ::std::os::raw::c_char,
    pub baseAddr: ::std::os::raw::c_ulonglong,
    pub addr: ::std::os::raw::c_ulonglong,
    pub cache: bool,
    pub cmdStrCache: *mut ::std::os::raw::c_char,
    pub readOnly: *mut ::std::os::raw::c_char,
    pub funcName: *mut ::std::os::raw::c_char,
    pub filter: *mut *mut ::std::os::raw::c_char,
    pub n_filter: ::std::os::raw::c_int,
    pub rotate: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_panel_model_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_panel_model_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_panel_model_t>(),
        112usize,
        concat!("Size of: ", stringify!(rz_panel_model_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_panel_model_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_panel_model_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).directionCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(directionCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotateCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(rotateCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print_cb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(print_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseAddr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(baseAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdStrCache) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(cmdStrCache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readOnly) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(readOnly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).funcName) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(funcName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_filter) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(n_filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotate) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_model_t),
            "::",
            stringify!(rotate)
        )
    );
}
pub type RzPanelModel = rz_panel_model_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_panel_view_t {
    pub pos: RzPanelPos,
    pub prevPos: RzPanelPos,
    pub sx: ::std::os::raw::c_int,
    pub sy: ::std::os::raw::c_int,
    pub curpos: ::std::os::raw::c_int,
    pub refresh: bool,
    pub edge: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_panel_view_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_panel_view_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_panel_view_t>(),
        52usize,
        concat!("Size of: ", stringify!(rz_panel_view_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_panel_view_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rz_panel_view_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_view_t),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prevPos) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_view_t),
            "::",
            stringify!(prevPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_view_t),
            "::",
            stringify!(sx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sy) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_view_t),
            "::",
            stringify!(sy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curpos) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_view_t),
            "::",
            stringify!(curpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refresh) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_view_t),
            "::",
            stringify!(refresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_view_t),
            "::",
            stringify!(edge)
        )
    );
}
pub type RzPanelView = rz_panel_view_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_panel_t {
    pub model: *mut RzPanelModel,
    pub view: *mut RzPanelView,
}
#[test]
fn bindgen_test_layout_rz_panel_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_panel_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_panel_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_panel_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_panel_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_panel_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).model) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_t),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).view) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panel_t),
            "::",
            stringify!(view)
        )
    );
}
pub type RzPanel = rz_panel_t;
pub type RzPanelAlmightyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        panel: *mut RzPanel,
        dir: RzPanelLayout,
        title: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn rz_punycode_encode(
        src: *const ::std::os::raw::c_uchar,
        srclen: ::std::os::raw::c_int,
        dstlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_punycode_decode(
        src: *const ::std::os::raw::c_char,
        srclen: ::std::os::raw::c_int,
        dstlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_range_item_t {
    pub fr: ::std::os::raw::c_ulonglong,
    pub to: ::std::os::raw::c_ulonglong,
    pub data: *mut ::std::os::raw::c_uchar,
    pub datalen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_range_item_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_range_item_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_range_item_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_range_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_range_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_range_item_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_range_item_t),
            "::",
            stringify!(fr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_range_item_t),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_range_item_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datalen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_range_item_t),
            "::",
            stringify!(datalen)
        )
    );
}
pub type RRangeItem = rz_range_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_range_t {
    pub count: ::std::os::raw::c_int,
    pub changed: ::std::os::raw::c_int,
    pub ranges: *mut RzList,
}
#[test]
fn bindgen_test_layout_rz_range_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_range_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_range_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_range_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_range_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_range_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_range_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_range_t),
            "::",
            stringify!(changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ranges) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_range_t),
            "::",
            stringify!(ranges)
        )
    );
}
pub type RRange = rz_range_t;
extern "C" {
    pub fn rz_range_new() -> *mut RRange;
}
extern "C" {
    pub fn rz_range_new_from_string(string: *const ::std::os::raw::c_char) -> *mut RRange;
}
extern "C" {
    pub fn rz_range_free(r: *mut RRange) -> *mut RRange;
}
extern "C" {
    pub fn rz_range_item_get(r: *mut RRange, addr: ::std::os::raw::c_ulonglong) -> *mut RRangeItem;
}
extern "C" {
    pub fn rz_range_size(r: *mut RRange) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_range_add_from_string(
        rgs: *mut RRange,
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_range_add(
        rgs: *mut RRange,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        rw: ::std::os::raw::c_int,
    ) -> *mut RRangeItem;
}
extern "C" {
    pub fn rz_range_sub(
        rgs: *mut RRange,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_range_contains(
        rgs: *mut RRange,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_range_sort(rgs: *mut RRange) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_range_percent(rgs: *mut RRange);
}
extern "C" {
    pub fn rz_range_list(rgs: *mut RRange, rad: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_range_get_n(
        rgs: *mut RRange,
        n: ::std::os::raw::c_int,
        from: *mut ::std::os::raw::c_ulonglong,
        to: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_range_inverse(
        rgs: *mut RRange,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_int,
    ) -> *mut RRange;
}
extern "C" {
    pub fn rz_range_overlap(
        a0: ::std::os::raw::c_ulonglong,
        a1: ::std::os::raw::c_ulonglong,
        b0: ::std::os::raw::c_ulonglong,
        b1: ::std::os::raw::c_ulonglong,
        d: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const rz_json_type_t_RZ_JSON_NULL: rz_json_type_t = 0;
pub const rz_json_type_t_RZ_JSON_OBJECT: rz_json_type_t = 1;
pub const rz_json_type_t_RZ_JSON_ARRAY: rz_json_type_t = 2;
pub const rz_json_type_t_RZ_JSON_STRING: rz_json_type_t = 3;
pub const rz_json_type_t_RZ_JSON_INTEGER: rz_json_type_t = 4;
pub const rz_json_type_t_RZ_JSON_DOUBLE: rz_json_type_t = 5;
pub const rz_json_type_t_RZ_JSON_BOOLEAN: rz_json_type_t = 6;
pub type rz_json_type_t = ::std::os::raw::c_uint;
pub use self::rz_json_type_t as RzJsonType;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rz_json_t {
    pub type_: RzJsonType,
    pub key: *const ::std::os::raw::c_char,
    pub __bindgen_anon_1: rz_json_t__bindgen_ty_1,
    pub next: *mut rz_json_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rz_json_t__bindgen_ty_1 {
    pub str_value: *const ::std::os::raw::c_char,
    pub num: rz_json_t__bindgen_ty_1__bindgen_ty_1,
    pub children: rz_json_t__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rz_json_t__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: rz_json_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub dbl_value: f64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rz_json_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub u_value: ::std::os::raw::c_ulonglong,
    pub s_value: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_rz_json_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rz_json_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_json_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(rz_json_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_json_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_json_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_json_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(u_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_json_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(s_value)
        )
    );
}
#[test]
fn bindgen_test_layout_rz_json_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rz_json_t__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_json_t__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(rz_json_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_json_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_json_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbl_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_json_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(dbl_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_json_t__bindgen_ty_1__bindgen_ty_2 {
    pub count: usize,
    pub first: *mut rz_json_t,
    pub last: *mut rz_json_t,
}
#[test]
fn bindgen_test_layout_rz_json_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<rz_json_t__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_json_t__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(rz_json_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_json_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_json_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_json_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_json_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_json_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(last)
        )
    );
}
#[test]
fn bindgen_test_layout_rz_json_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rz_json_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_json_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(rz_json_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_json_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_json_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_json_t__bindgen_ty_1),
            "::",
            stringify!(str_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_json_t__bindgen_ty_1),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).children) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_json_t__bindgen_ty_1),
            "::",
            stringify!(children)
        )
    );
}
#[test]
fn bindgen_test_layout_rz_json_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_json_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_json_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_json_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_json_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_json_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_json_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_json_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_json_t),
            "::",
            stringify!(next)
        )
    );
}
pub type RzJson = rz_json_t;
extern "C" {
    pub fn rz_json_parse(text: *mut ::std::os::raw::c_char) -> *mut RzJson;
}
extern "C" {
    pub fn rz_json_free(js: *mut RzJson);
}
extern "C" {
    pub fn rz_json_get(json: *const RzJson, key: *const ::std::os::raw::c_char) -> *const RzJson;
}
extern "C" {
    pub fn rz_json_item(json: *const RzJson, idx: usize) -> *const RzJson;
}
extern "C" {
    pub fn rz_json_get_path(
        json: *const RzJson,
        path: *const ::std::os::raw::c_char,
    ) -> *const RzJson;
}
extern "C" {
    pub fn rz_json_to_pj(json: *const RzJson, pj: *mut PJ, with_key: bool);
}
extern "C" {
    pub fn rz_json_as_string(json: *const RzJson, with_key: bool) -> *mut ::std::os::raw::c_char;
}
#[doc = " \\brief Detailed info about a (de)serialization result\n\n This is currently just a list of strings which may be warnings\n or detailed error messages."]
pub type RzSerializeResultInfo = RzList;
#[doc = " \\brief Hashtable-based key parser to prevent strcmp chains\n\n This enables string values to be used in a switch/case-like\n fashion."]
pub type RzKeyParser = HtPP;
#[doc = " keyvalue pair"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdb_kv {
    pub base: HtPPKv,
    pub cas: ::std::os::raw::c_uint,
    pub expire: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_sdb_kv() {
    const UNINIT: ::std::mem::MaybeUninit<sdb_kv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdb_kv>(),
        40usize,
        concat!("Size of: ", stringify!(sdb_kv))
    );
    assert_eq!(
        ::std::mem::align_of::<sdb_kv>(),
        8usize,
        concat!("Alignment of ", stringify!(sdb_kv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_kv),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cas) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_kv),
            "::",
            stringify!(cas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expire) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_kv),
            "::",
            stringify!(expire)
        )
    );
}
#[doc = " keyvalue pair"]
pub type SdbKv = sdb_kv;
extern "C" {
    pub fn sdbkv_new2(
        k: *const ::std::os::raw::c_char,
        kl: ::std::os::raw::c_int,
        v: *const ::std::os::raw::c_char,
        vl: ::std::os::raw::c_int,
    ) -> *mut SdbKv;
}
extern "C" {
    pub fn sdbkv_new(
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> *mut SdbKv;
}
extern "C" {
    pub fn sdbkv_free(kv: *mut SdbKv);
}
extern "C" {
    pub fn sdb_hash(key: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sdb_ht_new() -> *mut HtPP;
}
extern "C" {
    pub fn sdb_ht_free(ht: *mut HtPP);
}
extern "C" {
    pub fn sdb_ht_insert(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn sdb_ht_insert_kvp(ht: *mut HtPP, kvp: *mut SdbKv, update: bool) -> bool;
}
extern "C" {
    pub fn sdb_ht_update(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn sdb_ht_delete(ht: *mut HtPP, key: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn sdb_ht_find(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_char,
        found: *mut bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_ht_find_kvp(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_char,
        found: *mut bool,
    ) -> *mut SdbKv;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdb {
    pub map: *mut ::std::os::raw::c_char,
    pub fd: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_uint,
    pub loop_: ::std::os::raw::c_uint,
    pub khash: ::std::os::raw::c_uint,
    pub kpos: ::std::os::raw::c_uint,
    pub hpos: ::std::os::raw::c_uint,
    pub hslots: ::std::os::raw::c_uint,
    pub dpos: ::std::os::raw::c_uint,
    pub dlen: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cdb() {
    const UNINIT: ::std::mem::MaybeUninit<cdb> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cdb>(),
        48usize,
        concat!("Size of: ", stringify!(cdb))
    );
    assert_eq!(
        ::std::mem::align_of::<cdb>(),
        8usize,
        concat!("Alignment of ", stringify!(cdb))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(cdb), "::", stringify!(map))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(cdb), "::", stringify!(fd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(cdb), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb),
            "::",
            stringify!(loop_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).khash) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb),
            "::",
            stringify!(khash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kpos) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(cdb), "::", stringify!(kpos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hpos) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(cdb), "::", stringify!(hpos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hslots) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb),
            "::",
            stringify!(hslots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpos) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(cdb), "::", stringify!(dpos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dlen) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(cdb), "::", stringify!(dlen))
    );
}
extern "C" {
    pub fn cdb_getkvlen(
        db: *mut cdb,
        klen: *mut ::std::os::raw::c_uint,
        vlen: *mut ::std::os::raw::c_uint,
        pos: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn cdb_free(arg1: *mut cdb);
}
extern "C" {
    pub fn cdb_init(arg1: *mut cdb, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn cdb_findstart(arg1: *mut cdb);
}
extern "C" {
    pub fn cdb_read(
        arg1: *mut cdb,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn cdb_findnext(
        arg1: *mut cdb,
        u: ::std::os::raw::c_uint,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type BufferOp = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buffer {
    pub x: *mut ::std::os::raw::c_char,
    pub p: ::std::os::raw::c_uint,
    pub n: ::std::os::raw::c_uint,
    pub fd: ::std::os::raw::c_int,
    pub op: BufferOp,
}
#[test]
fn bindgen_test_layout_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<buffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<buffer>(),
        32usize,
        concat!("Size of: ", stringify!(buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(buffer), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(buffer), "::", stringify!(p))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(buffer), "::", stringify!(n))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(buffer),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(buffer),
            "::",
            stringify!(op)
        )
    );
}
extern "C" {
    pub fn buffer_init(
        arg1: *mut buffer,
        arg2: BufferOp,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn buffer_flush(arg1: *mut buffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_put(
        arg1: *mut buffer,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_putalign(
        arg1: *mut buffer,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_putflush(
        arg1: *mut buffer,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_get(
        arg1: *mut buffer,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_bget(
        arg1: *mut buffer,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_feed(arg1: *mut buffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_peek(arg1: *mut buffer) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn buffer_seek(arg1: *mut buffer, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn buffer_copy(arg1: *mut buffer, arg2: *mut buffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut buffer_0: *mut buffer;
}
extern "C" {
    pub static mut buffer_0small: *mut buffer;
}
extern "C" {
    pub static mut buffer_1: *mut buffer;
}
extern "C" {
    pub static mut buffer_1small: *mut buffer;
}
extern "C" {
    pub static mut buffer_2: *mut buffer;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdb_hp {
    pub h: ::std::os::raw::c_uint,
    pub p: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cdb_hp() {
    const UNINIT: ::std::mem::MaybeUninit<cdb_hp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cdb_hp>(),
        8usize,
        concat!("Size of: ", stringify!(cdb_hp))
    );
    assert_eq!(
        ::std::mem::align_of::<cdb_hp>(),
        4usize,
        concat!("Alignment of ", stringify!(cdb_hp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(cdb_hp), "::", stringify!(h))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(cdb_hp), "::", stringify!(p))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdb_hplist {
    pub hp: [cdb_hp; 1000usize],
    pub next: *mut cdb_hplist,
    pub num: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cdb_hplist() {
    const UNINIT: ::std::mem::MaybeUninit<cdb_hplist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cdb_hplist>(),
        8016usize,
        concat!("Size of: ", stringify!(cdb_hplist))
    );
    assert_eq!(
        ::std::mem::align_of::<cdb_hplist>(),
        8usize,
        concat!("Alignment of ", stringify!(cdb_hplist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_hplist),
            "::",
            stringify!(hp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8000usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_hplist),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        8008usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_hplist),
            "::",
            stringify!(num)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdb_make {
    pub bspace: [::std::os::raw::c_char; 8192usize],
    pub final_: [::std::os::raw::c_char; 1024usize],
    pub count: [::std::os::raw::c_uint; 256usize],
    pub start: [::std::os::raw::c_uint; 256usize],
    pub head: *mut cdb_hplist,
    pub split: *mut cdb_hp,
    pub hash: *mut cdb_hp,
    pub numentries: ::std::os::raw::c_uint,
    pub memsize: ::std::os::raw::c_uint,
    pub b: buffer,
    pub pos: ::std::os::raw::c_uint,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cdb_make() {
    const UNINIT: ::std::mem::MaybeUninit<cdb_make> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cdb_make>(),
        11336usize,
        concat!("Size of: ", stringify!(cdb_make))
    );
    assert_eq!(
        ::std::mem::align_of::<cdb_make>(),
        8usize,
        concat!("Alignment of ", stringify!(cdb_make))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bspace) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(bspace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).final_) as usize - ptr as usize },
        8192usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(final_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        9216usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        10240usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        11264usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).split) as usize - ptr as usize },
        11272usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(split)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        11280usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numentries) as usize - ptr as usize },
        11288usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(numentries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memsize) as usize - ptr as usize },
        11292usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(memsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        11296usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        11328usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        11332usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(fd)
        )
    );
}
extern "C" {
    pub fn cdb_make_start(
        arg1: *mut cdb_make,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cdb_make_addbegin(
        arg1: *mut cdb_make,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cdb_make_addend(
        arg1: *mut cdb_make,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cdb_make_add(
        arg1: *mut cdb_make,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cdb_make_finish(arg1: *mut cdb_make) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdb_t {
    pub dir: *mut ::std::os::raw::c_char,
    pub path: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub fd: ::std::os::raw::c_int,
    pub refs: ::std::os::raw::c_int,
    pub lock: ::std::os::raw::c_int,
    pub journal: ::std::os::raw::c_int,
    pub db: cdb,
    pub m: cdb_make,
    pub ht: *mut HtPP,
    pub eod: ::std::os::raw::c_uint,
    pub pos: ::std::os::raw::c_uint,
    pub fdump: ::std::os::raw::c_int,
    pub ndump: *mut ::std::os::raw::c_char,
    pub expire: ::std::os::raw::c_ulonglong,
    pub last: ::std::os::raw::c_ulonglong,
    pub options: ::std::os::raw::c_int,
    pub ns_lock: ::std::os::raw::c_int,
    pub ns: *mut SdbList,
    pub hooks: *mut SdbList,
    pub depth: ::std::os::raw::c_uint,
    pub timestamped: bool,
}
#[test]
fn bindgen_test_layout_sdb_t() {
    const UNINIT: ::std::mem::MaybeUninit<sdb_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdb_t>(),
        11504usize,
        concat!("Size of: ", stringify!(sdb_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sdb_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sdb_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(sdb_t), "::", stringify!(fd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refs) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).journal) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(journal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).db) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(sdb_t), "::", stringify!(db))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(sdb_t), "::", stringify!(m))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht) as usize - ptr as usize },
        11424usize,
        concat!("Offset of field: ", stringify!(sdb_t), "::", stringify!(ht))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eod) as usize - ptr as usize },
        11432usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(eod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        11436usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fdump) as usize - ptr as usize },
        11440usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(fdump)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ndump) as usize - ptr as usize },
        11448usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(ndump)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expire) as usize - ptr as usize },
        11456usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(expire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        11464usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        11472usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ns_lock) as usize - ptr as usize },
        11476usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(ns_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ns) as usize - ptr as usize },
        11480usize,
        concat!("Offset of field: ", stringify!(sdb_t), "::", stringify!(ns))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hooks) as usize - ptr as usize },
        11488usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(hooks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        11496usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamped) as usize - ptr as usize },
        11500usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(timestamped)
        )
    );
}
pub type Sdb = sdb_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdb_ns_t {
    pub name: *mut ::std::os::raw::c_char,
    pub hash: ::std::os::raw::c_uint,
    pub sdb: *mut Sdb,
}
#[test]
fn bindgen_test_layout_sdb_ns_t() {
    const UNINIT: ::std::mem::MaybeUninit<sdb_ns_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdb_ns_t>(),
        24usize,
        concat!("Size of: ", stringify!(sdb_ns_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sdb_ns_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sdb_ns_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_ns_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_ns_t),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_ns_t),
            "::",
            stringify!(sdb)
        )
    );
}
pub type SdbNs = sdb_ns_t;
extern "C" {
    pub fn sdb_new0() -> *mut Sdb;
}
extern "C" {
    pub fn sdb_new(
        path: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        lock: ::std::os::raw::c_int,
    ) -> *mut Sdb;
}
extern "C" {
    pub fn sdb_open(s: *mut Sdb, file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_close(s: *mut Sdb);
}
extern "C" {
    pub fn sdb_config(s: *mut Sdb, options: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sdb_free(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_file(s: *mut Sdb, dir: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sdb_merge(d: *mut Sdb, s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_count(s: *mut Sdb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_reset(s: *mut Sdb);
}
extern "C" {
    pub fn sdb_setup(s: *mut Sdb, options: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sdb_drain(arg1: *mut Sdb, arg2: *mut Sdb);
}
extern "C" {
    pub fn sdb_copy(src: *mut Sdb, dst: *mut Sdb);
}
extern "C" {
    pub fn sdb_stats(
        s: *mut Sdb,
        disk: *mut ::std::os::raw::c_uint,
        mem: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_dump_hasnext(s: *mut Sdb) -> bool;
}
pub type SdbForeachCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> bool,
>;
extern "C" {
    pub fn sdb_foreach(
        s: *mut Sdb,
        cb: SdbForeachCallback,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sdb_foreach_list(s: *mut Sdb, sorted: bool) -> *mut SdbList;
}
extern "C" {
    pub fn sdb_foreach_list_filter_user(
        s: *mut Sdb,
        filter: SdbForeachCallback,
        sorted: bool,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut SdbList;
}
extern "C" {
    pub fn sdb_foreach_list_filter(
        s: *mut Sdb,
        filter: SdbForeachCallback,
        sorted: bool,
    ) -> *mut SdbList;
}
extern "C" {
    pub fn sdb_foreach_match(
        s: *mut Sdb,
        expr: *const ::std::os::raw::c_char,
        sorted: bool,
    ) -> *mut SdbList;
}
extern "C" {
    pub fn sdb_query(s: *mut Sdb, cmd: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_queryf(
        s: *mut Sdb,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_query_lines(
        s: *mut Sdb,
        cmd: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_querys(
        s: *mut Sdb,
        buf: *mut ::std::os::raw::c_char,
        len: usize,
        cmd: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_querysf(
        s: *mut Sdb,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_query_file(
        s: *mut Sdb,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_exists(arg1: *mut Sdb, key: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn sdb_remove(
        arg1: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_unset(
        arg1: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_unset_like(s: *mut Sdb, k: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_like(
        s: *mut Sdb,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
        cb: SdbForeachCallback,
    ) -> *mut *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdb_diff_t {
    pub path: *const SdbList,
    pub k: *const ::std::os::raw::c_char,
    pub v: *const ::std::os::raw::c_char,
    pub add: bool,
}
#[test]
fn bindgen_test_layout_sdb_diff_t() {
    const UNINIT: ::std::mem::MaybeUninit<sdb_diff_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdb_diff_t>(),
        32usize,
        concat!("Size of: ", stringify!(sdb_diff_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sdb_diff_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sdb_diff_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_diff_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).k) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_diff_t),
            "::",
            stringify!(k)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_diff_t),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_diff_t),
            "::",
            stringify!(add)
        )
    );
}
pub type SdbDiff = sdb_diff_t;
extern "C" {
    pub fn sdb_diff_format(
        str_: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        diff: *const SdbDiff,
    ) -> ::std::os::raw::c_int;
}
pub type SdbDiffCallback = ::std::option::Option<
    unsafe extern "C" fn(diff: *const SdbDiff, user: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn sdb_diff(
        a: *mut Sdb,
        b: *mut Sdb,
        cb: SdbDiffCallback,
        cb_user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sdb_get(
        arg1: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_get_len(
        arg1: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        vlen: *mut ::std::os::raw::c_int,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_const_get(
        arg1: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_const_get_len(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        vlen: *mut ::std::os::raw::c_int,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_set(
        arg1: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_set_owned(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_concat(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_uncat(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_add(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_sync(arg1: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_num_exists(arg1: *mut Sdb, key: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn sdb_num_base(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_num_get(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_num_set(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        v: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_num_add(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        v: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_num_inc(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_num_dec(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_num_min(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        v: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_num_max(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        v: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_ptr_set(
        db: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        p: *mut ::std::os::raw::c_void,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_ptr_get(
        db: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sdb_disk_create(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_disk_insert(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn sdb_disk_finish(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_disk_unlink(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_text_save_fd(s: *mut Sdb, fd: ::std::os::raw::c_int, sort: bool) -> bool;
}
extern "C" {
    pub fn sdb_text_save(s: *mut Sdb, file: *const ::std::os::raw::c_char, sort: bool) -> bool;
}
extern "C" {
    pub fn sdb_text_load_buf(s: *mut Sdb, buf: *mut ::std::os::raw::c_char, sz: usize) -> bool;
}
extern "C" {
    pub fn sdb_text_load(s: *mut Sdb, file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn sdb_dump_begin(s: *mut Sdb);
}
extern "C" {
    pub fn sdb_dump_next(s: *mut Sdb) -> *mut SdbKv;
}
extern "C" {
    pub fn sdb_dump_dupnext(
        s: *mut Sdb,
        key: *mut ::std::os::raw::c_char,
        value: *mut *mut ::std::os::raw::c_char,
        _vlen: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn sdb_journal_close(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_journal_open(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_journal_load(s: *mut Sdb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_journal_log(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn sdb_journal_clear(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_journal_unlink(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_itoa(
        n: ::std::os::raw::c_ulonglong,
        s: *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_atoi(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_itoca(n: ::std::os::raw::c_ulonglong) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_lock(s: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn sdb_lock_file(f: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_unlock(s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sdb_unlink(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_lock_wait(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_expire_set(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        expire: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_expire_get(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_now() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_unow() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_hash_len(
        key: *const ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sdb_hash_byte(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn sdb_ns(
        s: *mut Sdb,
        name: *const ::std::os::raw::c_char,
        create: ::std::os::raw::c_int,
    ) -> *mut Sdb;
}
extern "C" {
    pub fn sdb_ns_path(
        s: *mut Sdb,
        path: *const ::std::os::raw::c_char,
        create: ::std::os::raw::c_int,
    ) -> *mut Sdb;
}
extern "C" {
    pub fn sdb_ns_init(s: *mut Sdb);
}
extern "C" {
    pub fn sdb_ns_free_all(s: *mut Sdb);
}
extern "C" {
    pub fn sdb_ns_lock(s: *mut Sdb, lock: ::std::os::raw::c_int, depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sdb_ns_sync(s: *mut Sdb);
}
extern "C" {
    pub fn sdb_ns_set(
        s: *mut Sdb,
        name: *const ::std::os::raw::c_char,
        r: *mut Sdb,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_ns_unset(s: *mut Sdb, name: *const ::std::os::raw::c_char, r: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_array_contains(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_array_contains_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
        cas: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_array_indexof(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_set(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_set_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
        val: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_append(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_array_append_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_array_prepend(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_array_prepend_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_array_get(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_array_get_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
        cas: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_array_get_idx(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_insert(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_insert_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
        val: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_unset(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_delete(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_sort(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sdb_array_sort_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sdb_array_add(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_add_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_add_sorted(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_add_sorted_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_remove(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_remove_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_anext(
        str_: *mut ::std::os::raw::c_char,
        next: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_const_anext(str_: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_alen(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_alen_ignore_empty(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_size(s: *mut Sdb, key: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_length(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_list(s: *mut Sdb, key: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_push(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_array_pop(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_array_push_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        num: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_pop_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_array_pop_head(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_array_pop_tail(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
pub type SdbHook = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut Sdb,
        user: *mut ::std::os::raw::c_void,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn sdb_global_hook(hook: SdbHook, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn sdb_hook(s: *mut Sdb, cb: SdbHook, user: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn sdb_unhook(s: *mut Sdb, h: SdbHook) -> bool;
}
extern "C" {
    pub fn sdb_hook_call(
        s: *mut Sdb,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_hook_free(s: *mut Sdb);
}
extern "C" {
    pub fn sdb_isnum(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_isempty(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_type(k: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_match(
        str_: *const ::std::os::raw::c_char,
        glob: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn sdb_bool_set(
        db: *mut Sdb,
        str_: *const ::std::os::raw::c_char,
        v: bool,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_bool_get(
        db: *mut Sdb,
        str_: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_decode(
        in_: *const ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn sdb_encode(
        bin: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_encode_raw(
        bout: *mut ::std::os::raw::c_char,
        bin: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sdb_decode_raw(
        bout: *mut ::std::os::raw::c_uchar,
        bin: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_fmt(fmt: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_fmt_init(
        p: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_fmt_free(p: *mut ::std::os::raw::c_void, fmt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sdb_fmt_tobin(
        _str: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        stru: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_fmt_tostr(
        stru: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_fmt_array(list: *const ::std::os::raw::c_char) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_fmt_array_num(
        list: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_array_compact(p: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_aslice(
        out: *mut ::std::os::raw::c_char,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_space_t {
    pub name: *mut ::std::os::raw::c_char,
    pub rb: RBNode,
}
#[test]
fn bindgen_test_layout_rz_space_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_space_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_space_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_space_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_space_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_space_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_space_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_space_t),
            "::",
            stringify!(rb)
        )
    );
}
pub type RzSpace = rz_space_t;
pub const RzSpaceEventType_RZ_SPACE_EVENT_COUNT: RzSpaceEventType = 1;
pub const RzSpaceEventType_RZ_SPACE_EVENT_RENAME: RzSpaceEventType = 2;
pub const RzSpaceEventType_RZ_SPACE_EVENT_UNSET: RzSpaceEventType = 3;
pub type RzSpaceEventType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rz_space_event_t {
    pub data: rz_space_event_t__bindgen_ty_1,
    pub res: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rz_space_event_t__bindgen_ty_1 {
    pub count: rz_space_event_t__bindgen_ty_1__bindgen_ty_1,
    pub unset: rz_space_event_t__bindgen_ty_1__bindgen_ty_2,
    pub rename: rz_space_event_t__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_space_event_t__bindgen_ty_1__bindgen_ty_1 {
    pub space: *const RzSpace,
}
#[test]
fn bindgen_test_layout_rz_space_event_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rz_space_event_t__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_space_event_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(rz_space_event_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_space_event_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_space_event_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_space_event_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_space_event_t__bindgen_ty_1__bindgen_ty_2 {
    pub space: *const RzSpace,
}
#[test]
fn bindgen_test_layout_rz_space_event_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<rz_space_event_t__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_space_event_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(rz_space_event_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_space_event_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_space_event_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_space_event_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_space_event_t__bindgen_ty_1__bindgen_ty_3 {
    pub space: *const RzSpace,
    pub oldname: *const ::std::os::raw::c_char,
    pub newname: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rz_space_event_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<rz_space_event_t__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_space_event_t__bindgen_ty_1__bindgen_ty_3>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(rz_space_event_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_space_event_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_space_event_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_space_event_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_space_event_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(oldname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newname) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_space_event_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(newname)
        )
    );
}
#[test]
fn bindgen_test_layout_rz_space_event_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rz_space_event_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_space_event_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(rz_space_event_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_space_event_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_space_event_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_space_event_t__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_space_event_t__bindgen_ty_1),
            "::",
            stringify!(unset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_space_event_t__bindgen_ty_1),
            "::",
            stringify!(rename)
        )
    );
}
#[test]
fn bindgen_test_layout_rz_space_event_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_space_event_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_space_event_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_space_event_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_space_event_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_space_event_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_space_event_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_space_event_t),
            "::",
            stringify!(res)
        )
    );
}
pub type RzSpaceEvent = rz_space_event_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_spaces_t {
    pub name: *const ::std::os::raw::c_char,
    pub current: *mut RzSpace,
    pub spaces: RBTree,
    pub spacestack: *mut RzList,
    pub event: *mut RzEvent,
}
#[test]
fn bindgen_test_layout_rz_spaces_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_spaces_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_spaces_t>(),
        40usize,
        concat!("Size of: ", stringify!(rz_spaces_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_spaces_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_spaces_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_spaces_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_spaces_t),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spaces) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_spaces_t),
            "::",
            stringify!(spaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spacestack) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_spaces_t),
            "::",
            stringify!(spacestack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_spaces_t),
            "::",
            stringify!(event)
        )
    );
}
pub type RzSpaces = rz_spaces_t;
extern "C" {
    pub fn rz_spaces_new(name: *const ::std::os::raw::c_char) -> *mut RzSpaces;
}
extern "C" {
    pub fn rz_spaces_init(sp: *mut RzSpaces, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_spaces_fini(sp: *mut RzSpaces);
}
extern "C" {
    pub fn rz_spaces_free(sp: *mut RzSpaces);
}
extern "C" {
    pub fn rz_spaces_purge(sp: *mut RzSpaces);
}
extern "C" {
    pub fn rz_spaces_get(sp: *mut RzSpaces, name: *const ::std::os::raw::c_char) -> *mut RzSpace;
}
extern "C" {
    pub fn rz_spaces_add(sp: *mut RzSpaces, name: *const ::std::os::raw::c_char) -> *mut RzSpace;
}
extern "C" {
    pub fn rz_spaces_set(sp: *mut RzSpaces, name: *const ::std::os::raw::c_char) -> *mut RzSpace;
}
extern "C" {
    pub fn rz_spaces_unset(sp: *mut RzSpaces, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_spaces_rename(
        sp: *mut RzSpaces,
        oname: *const ::std::os::raw::c_char,
        nname: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_spaces_count(
        sp: *mut RzSpaces,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_spaces_push(sp: *mut RzSpaces, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_spaces_pop(sp: *mut RzSpaces) -> bool;
}
pub type RzSpaceIter = RBIter;
extern "C" {
    pub fn rz_serialize_spaces_save(db: *mut Sdb, spaces: *mut RzSpaces);
}
extern "C" {
    #[doc = " @param load_name whether to overwrite the name in spaces with the value from db"]
    pub fn rz_serialize_spaces_load(
        db: *mut Sdb,
        spaces: *mut RzSpaces,
        load_name: bool,
        res: *mut RzSerializeResultInfo,
    ) -> bool;
}
pub type RzStackFree =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_stack_t {
    pub elems: *mut *mut ::std::os::raw::c_void,
    pub n_elems: ::std::os::raw::c_uint,
    pub top: ::std::os::raw::c_int,
    pub free: RzStackFree,
}
#[test]
fn bindgen_test_layout_rz_stack_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_stack_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_stack_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_stack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_stack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_stack_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elems) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_stack_t),
            "::",
            stringify!(elems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_elems) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_stack_t),
            "::",
            stringify!(n_elems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_stack_t),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_stack_t),
            "::",
            stringify!(free)
        )
    );
}
pub type RzStack = rz_stack_t;
extern "C" {
    pub fn rz_stack_new(n: ::std::os::raw::c_uint) -> *mut RzStack;
}
extern "C" {
    pub fn rz_stack_free(s: *mut RzStack);
}
extern "C" {
    pub fn rz_stack_is_empty(s: *mut RzStack) -> bool;
}
extern "C" {
    pub fn rz_stack_newf(n: ::std::os::raw::c_uint, f: RzStackFree) -> *mut RzStack;
}
extern "C" {
    pub fn rz_stack_push(s: *mut RzStack, el: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn rz_stack_pop(s: *mut RzStack) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_stack_size(s: *mut RzStack) -> usize;
}
extern "C" {
    pub fn rz_stack_peek(s: *mut RzStack) -> *mut ::std::os::raw::c_void;
}
pub type wint_t = ::std::os::raw::c_uint;
pub type mbstate_t = __mbstate_t;
extern "C" {
    pub fn wcscpy(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncat(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp(__s1: *const wchar_t, __s2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(__s1: *const wchar_t, __s2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm(__s1: *mut wchar_t, __s2: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn wcscoll_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(
        __s1: *mut wchar_t,
        __s2: *const wchar_t,
        __n: usize,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsdup(__s: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(
        __wcs: *const ::std::os::raw::c_int,
        __wc: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsrchr(__wcs: *const wchar_t, __wc: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(__wcs: *const wchar_t, __reject: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsspn(__wcs: *const wchar_t, __accept: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcspbrk(__wcs: *const wchar_t, __accept: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(__haystack: *const wchar_t, __needle: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok(
        __s: *mut wchar_t,
        __delim: *const wchar_t,
        __ptr: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslen(__s: *const ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcsnlen(__s: *const wchar_t, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn wmemchr(
        __s: *const ::std::os::raw::c_int,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(
        __s1: *mut ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemmove(
        __s1: *mut ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemset(__s: *mut wchar_t, __c: wchar_t, __n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn btowc(__c: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn wctob(__c: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsinit(__ps: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbrtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
        __p: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcrtomb(__s: *mut ::std::os::raw::c_char, __wc: wchar_t, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn __mbrlen(__s: *const ::std::os::raw::c_char, __n: usize, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrlen(__s: *const ::std::os::raw::c_char, __n: usize, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbsrtowcs(
        __dst: *mut wchar_t,
        __src: *mut *const ::std::os::raw::c_char,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const wchar_t,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsnrtowcs(
        __dst: *mut wchar_t,
        __src: *mut *const ::std::os::raw::c_char,
        __nmc: usize,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const wchar_t,
        __nwc: usize,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcstod(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstof(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> u128;
}
extern "C" {
    pub fn wcstol(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcpcpy(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn open_wmemstream(__bufloc: *mut *mut wchar_t, __sizeloc: *mut usize) -> *mut __FILE;
}
extern "C" {
    pub fn fwide(__fp: *mut __FILE, __mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swprintf(
        __s: *mut wchar_t,
        __n: usize,
        __format: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwprintf(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        __s: *mut wchar_t,
        __n: usize,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(__s: *const wchar_t, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fwscanf"]
    pub fn fwscanf1(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_wscanf"]
    pub fn wscanf1(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_swscanf"]
    pub fn swscanf1(__s: *const wchar_t, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        __s: *const wchar_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfwscanf"]
    pub fn vfwscanf1(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vwscanf"]
    pub fn vwscanf1(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vswscanf"]
    pub fn vswscanf1(
        __s: *const wchar_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(__wc: wchar_t) -> wint_t;
}
extern "C" {
    pub fn fgetws(
        __ws: *mut wchar_t,
        __n: ::std::os::raw::c_int,
        __stream: *mut __FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(__ws: *const wchar_t, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn wcsftime(
        __s: *mut wchar_t,
        __maxsize: usize,
        __format: *const wchar_t,
        __tp: *const tm,
    ) -> usize;
}
#[doc = "< The raw sequence of bytes without any marker of beginning or end"]
pub const RzStrType_RZ_STRING_TYPE_RAW: RzStrType = 0;
#[doc = "< C-style strings (ASCII or UTF-8) with zero as the end marker"]
pub const RzStrType_RZ_STRING_TYPE_ZERO: RzStrType = 1;
#[doc = "< Pascal-style strings with the first byte marking the size of the string"]
pub const RzStrType_RZ_STRING_TYPE_SIZED: RzStrType = 2;
pub type RzStrType = ::std::os::raw::c_uint;
pub const RzStrEnc_RZ_STRING_ENC_8BIT: RzStrEnc = 98;
pub const RzStrEnc_RZ_STRING_ENC_UTF8: RzStrEnc = 56;
pub const RzStrEnc_RZ_STRING_ENC_MUTF8: RzStrEnc = 109;
pub const RzStrEnc_RZ_STRING_ENC_UTF16LE: RzStrEnc = 117;
pub const RzStrEnc_RZ_STRING_ENC_UTF32LE: RzStrEnc = 85;
pub const RzStrEnc_RZ_STRING_ENC_UTF16BE: RzStrEnc = 110;
pub const RzStrEnc_RZ_STRING_ENC_UTF32BE: RzStrEnc = 78;
pub const RzStrEnc_RZ_STRING_ENC_BASE64: RzStrEnc = 54;
pub const RzStrEnc_RZ_STRING_ENC_IBM037: RzStrEnc = 99;
pub const RzStrEnc_RZ_STRING_ENC_IBM290: RzStrEnc = 100;
pub const RzStrEnc_RZ_STRING_ENC_EBCDIC_UK: RzStrEnc = 107;
pub const RzStrEnc_RZ_STRING_ENC_EBCDIC_US: RzStrEnc = 115;
pub const RzStrEnc_RZ_STRING_ENC_EBCDIC_ES: RzStrEnc = 116;
pub const RzStrEnc_RZ_STRING_ENC_GUESS: RzStrEnc = 103;
pub type RzStrEnc = ::std::os::raw::c_uint;
#[doc = " \\brief Group together some common options used by string escaping functions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzStrEscOptions {
    #[doc = "< When true, dots `.` are placed instead of unprintable characters"]
    pub show_asciidot: bool,
    #[doc = "< When true, backslashes `\\` are quoted with `\\\\`"]
    pub esc_bslash: bool,
    #[doc = "< When true, double quotes `\"` are quoted with `\\\"`"]
    pub esc_double_quotes: bool,
    #[doc = "< When true, \\n is converted into the graphiz-compatible newline \\l"]
    pub dot_nl: bool,
}
#[test]
fn bindgen_test_layout_RzStrEscOptions() {
    const UNINIT: ::std::mem::MaybeUninit<RzStrEscOptions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzStrEscOptions>(),
        4usize,
        concat!("Size of: ", stringify!(RzStrEscOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<RzStrEscOptions>(),
        1usize,
        concat!("Alignment of ", stringify!(RzStrEscOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_asciidot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzStrEscOptions),
            "::",
            stringify!(show_asciidot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esc_bslash) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(RzStrEscOptions),
            "::",
            stringify!(esc_bslash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esc_double_quotes) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(RzStrEscOptions),
            "::",
            stringify!(esc_double_quotes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dot_nl) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(RzStrEscOptions),
            "::",
            stringify!(dot_nl)
        )
    );
}
pub type RzStrRangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn rz_str_enc_as_string(enc: RzStrEnc) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_enc_string_as_type(enc: *const ::std::os::raw::c_char) -> RzStrEnc;
}
extern "C" {
    pub fn rz_str_repeat(
        ch: *const ::std::os::raw::c_char,
        sz: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_pad(
        ch: ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_rstr(
        base: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_strstr_ansi(
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
        icase: bool,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_rchr(
        base: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
        ch: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_closer_chr(
        b: *const ::std::os::raw::c_char,
        s: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_bounds(
        str_: *const ::std::os::raw::c_char,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_crop(
        str_: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
        x2: ::std::os::raw::c_uint,
        y2: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_scale(
        r: *const ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_range_in(
        r: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_str_len_utf8(s: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn rz_str_len_utf8_ansi(str_: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn rz_str_len_utf8char(
        s: *const ::std::os::raw::c_char,
        left: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    pub fn rz_str_utf8_charsize(str_: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn rz_str_utf8_charsize_prev(
        str_: *const ::std::os::raw::c_char,
        prev_len: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    pub fn rz_str_utf8_charsize_last(str_: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn rz_str_filter_zeroline(str_: *mut ::std::os::raw::c_char, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_str_utf8_codepoint(s: *const ::std::os::raw::c_char, left: usize) -> usize;
}
extern "C" {
    pub fn rz_str_char_fullwidth(s: *const ::std::os::raw::c_char, left: usize) -> bool;
}
extern "C" {
    pub fn rz_str_write(
        fd: ::std::os::raw::c_int,
        b: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_ncpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        n: usize,
    ) -> usize;
}
extern "C" {
    pub fn rz_str_sanitize(c: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_str_sanitize_sdb_key(s: *const ::std::os::raw::c_char)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_casestr(
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_firstbut(
        s: *const ::std::os::raw::c_char,
        ch: ::std::os::raw::c_char,
        but: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_lastbut(
        s: *const ::std::os::raw::c_char,
        ch: ::std::os::raw::c_char,
        but: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_split(str_: *mut ::std::os::raw::c_char, ch: ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn rz_str_split_list(
        str_: *mut ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_str_split_list_regex(
        str_: *mut ::std::os::raw::c_char,
        r: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_str_split_duplist(
        str_: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        trim: bool,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_str_split_duplist_n(
        str_: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        trim: bool,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_str_split_duplist_n_regex(
        _str: *const ::std::os::raw::c_char,
        r: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        trim: bool,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_str_split_lines(str_: *mut ::std::os::raw::c_char, count: *mut usize) -> *mut usize;
}
extern "C" {
    pub fn rz_str_replace(
        str_: *mut ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        g: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_replace_icase(
        str_: *mut ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        g: ::std::os::raw::c_int,
        keep_case: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_replace_in(
        str_: *mut ::std::os::raw::c_char,
        sz: ::std::os::raw::c_uint,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        g: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_bits(
        strout: *mut ::std::os::raw::c_char,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        bitz: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_bits64(
        strout: *mut ::std::os::raw::c_char,
        in_: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_bits_from_string(
        buf: *const ::std::os::raw::c_char,
        bitz: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_str_rwx(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_replace_ch(
        s: *mut ::std::os::raw::c_char,
        a: ::std::os::raw::c_char,
        b: ::std::os::raw::c_char,
        g: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_replace_char(
        s: *mut ::std::os::raw::c_char,
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_replace_char_once(
        s: *mut ::std::os::raw::c_char,
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_remove_char(str_: *mut ::std::os::raw::c_char, c: ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_str_rwx_i(rwx: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_fmtargs(fmt: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_arg_escape(arg: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_arg_unescape(arg: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_argv(
        str_: *const ::std::os::raw::c_char,
        _argc: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_argv_free(argv: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_str_new(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_snprintf(
        string: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_is_whitespace(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_str_is_ascii(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_str_is_utf8(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_str_nextword(
        s: *mut ::std::os::raw::c_char,
        ch: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_is_printable(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_str_is_printable_limited(
        str_: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_str_is_printable_incl_newlines(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_str_appendlen(
        ptr: *mut ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_newf(fmt: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_newlen(
        str_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_sysbits(v: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_trunc_ellipsis(
        str_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_bool(b: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_is_true(s: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_str_is_false(s: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_str_is_bool(val: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_str_ansi_chrn(
        str_: *const ::std::os::raw::c_char,
        n: usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_ansi_len(str_: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn rz_str_ansi_nlen(str_: *const ::std::os::raw::c_char, len: usize) -> usize;
}
extern "C" {
    pub fn rz_str_ansi_trim(
        str_: *mut ::std::os::raw::c_char,
        str_len: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_ansi_filter(
        str_: *mut ::std::os::raw::c_char,
        out: *mut *mut ::std::os::raw::c_char,
        cposs: *mut *mut ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_ansi_crop(
        str_: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
        x2: ::std::os::raw::c_uint,
        y2: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_word_count(string: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_char_count(
        string: *const ::std::os::raw::c_char,
        ch: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_word_get0set(
        stra: *mut ::std::os::raw::c_char,
        stralen: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
        newstr: *const ::std::os::raw::c_char,
        newlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_word_set0(str_: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_word_set0_stack(str_: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_word_get0(
        str_: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_word_get_first(
        string: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_trim(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_str_trim_char(str_: *mut ::std::os::raw::c_char, c: ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_str_trim_dup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_trim_lines(str_: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_trim_head(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_str_trim_head_char(str_: *mut ::std::os::raw::c_char, c: ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_str_trim_head_ro(
        str_: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_trim_head_wp(
        str_: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_trim_tail(str_: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_trim_tail_char(str_: *mut ::std::os::raw::c_char, c: ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_str_djb2_hash(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_str_trim_nc(str_: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_is2utf8(c: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_str_is3utf8(c: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_str_is4utf8(c: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_str_isXutf8(c: *const ::std::os::raw::c_char, x: ::std::os::raw::c_uchar) -> bool;
}
extern "C" {
    pub fn rz_str_strchr(
        str_: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_nstr(
        from: *const ::std::os::raw::c_char,
        to: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_case_nstr(
        from: *const ::std::os::raw::c_char,
        to: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_lchr(
        str_: *const ::std::os::raw::c_char,
        chr: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_sub_str_lchr(
        str_: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        chr: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_sub_str_rchr(
        str_: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        chr: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_ichr(
        str_: *mut ::std::os::raw::c_char,
        chr: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_ccmp(
        dst: *const ::std::os::raw::c_char,
        orig: *const ::std::os::raw::c_char,
        ch: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_str_cmp_list(
        list: *const ::std::os::raw::c_char,
        item: *const ::std::os::raw::c_char,
        sep: ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_str_cmp(
        dst: *const ::std::os::raw::c_char,
        orig: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_casecmp(
        dst: *const ::std::os::raw::c_char,
        orig: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_ncasecmp(
        dst: *const ::std::os::raw::c_char,
        orig: *const ::std::os::raw::c_char,
        n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_ccpy(
        dst: *mut ::std::os::raw::c_char,
        orig: *mut ::std::os::raw::c_char,
        ch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_ndup(
        ptr: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_dup(
        ptr: *mut ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_delta(
        p: *mut ::std::os::raw::c_char,
        a: ::std::os::raw::c_char,
        b: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_filter(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_str_tok(
        str1: *const ::std::os::raw::c_char,
        b: ::std::os::raw::c_char,
        len: usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_str_xy(
        s: *const ::std::os::raw::c_char,
        word: *const ::std::os::raw::c_char,
        prev: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub type str_operation =
    ::std::option::Option<unsafe extern "C" fn(c: *mut ::std::os::raw::c_char)>;
extern "C" {
    pub fn rz_str_do_until_token(
        op: str_operation,
        str_: *mut ::std::os::raw::c_char,
        tok: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_reverse(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_str_path_unescape(path: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_path_escape(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_unescape(buf: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_escape(buf: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_escape_sh(buf: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_escape_dot(buf: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_escape_8bit(
        buf: *const ::std::os::raw::c_char,
        colors: bool,
        opt: *mut RzStrEscOptions,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_escape_utf8(
        buf: *const ::std::os::raw::c_char,
        opt: *mut RzStrEscOptions,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_escape_utf8_keep_printable(
        buf: *const ::std::os::raw::c_char,
        opt: *mut RzStrEscOptions,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_escape_utf16le(
        buf: *const ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        opt: *mut RzStrEscOptions,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_escape_utf32le(
        buf: *const ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        opt: *mut RzStrEscOptions,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_escape_utf16be(
        buf: *const ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        opt: *mut RzStrEscOptions,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_escape_utf32be(
        buf: *const ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        opt: *mut RzStrEscOptions,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_byte_escape(
        p: *const ::std::os::raw::c_char,
        dst: *mut *mut ::std::os::raw::c_char,
        opt: *mut RzStrEscOptions,
    );
}
extern "C" {
    pub fn rz_str_format_msvc_argv(
        argc: usize,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_uri_decode(buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_str_uri_encode(buf: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_utf16_decode(
        s: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_utf16_to_utf8(
        dst: *mut ::std::os::raw::c_uchar,
        len_dst: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_uchar,
        len_src: ::std::os::raw::c_int,
        little_endian: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_utf16_encode(
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_escape_utf8_for_json(
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_escape_mutf8_for_json(
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_home(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_nlen(s: *const ::std::os::raw::c_char, n: usize) -> usize;
}
extern "C" {
    pub fn rz_str_nlen_w(s: *const ::std::os::raw::c_char, n: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn rz_wstr_clen(s: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn rz_str_prepend(
        ptr: *mut ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_prefix_all(
        s: *const ::std::os::raw::c_char,
        pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_append(
        ptr: *mut ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_append_owned(
        ptr: *mut ::std::os::raw::c_char,
        string: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_appendf(
        ptr: *mut ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_appendch(
        x: *mut ::std::os::raw::c_char,
        y: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_case(str_: *mut ::std::os::raw::c_char, up: bool);
}
extern "C" {
    pub fn rz_str_trim_path(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_str_contains_macro(
        input_value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_str_truncate_cmd(string: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_str_replace_thunked(
        str_: *mut ::std::os::raw::c_char,
        clean: *mut ::std::os::raw::c_char,
        thunk: *mut ::std::os::raw::c_int,
        clen: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        g: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_glob(
        str_: *const ::std::os::raw::c_char,
        glob: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_str_binstr2bin(
        str_: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_str_between(
        str_: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_startswith(
        str_: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_str_startswith_icase(
        str_: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_str_endswith(
        str_: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_str_endswith_icase(
        str_: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_str_isnumber(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_str_last(
        in_: *const ::std::os::raw::c_char,
        ch: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_highlight(
        str_: *mut ::std::os::raw::c_char,
        word: *const ::std::os::raw::c_char,
        color: *const ::std::os::raw::c_char,
        color_reset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_from_ut64(val: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_stripLine(str_: *mut ::std::os::raw::c_char, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_str_list_join(
        str_: *mut RzList,
        sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_array_join(
        a: *mut *const ::std::os::raw::c_char,
        n: usize,
        sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_wrap(str_: *mut ::std::os::raw::c_char, width: usize) -> *mut RzList;
}
extern "C" {
    pub fn rz_str_sep(
        base: *const ::std::os::raw::c_char,
        sep: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_str_rsep(
        base: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
        sep: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_str_stringify_opt_t {
    #[doc = "< String buffer (cannot be NULL)."]
    pub buffer: *const ::std::os::raw::c_uchar,
    #[doc = "< String buffer length."]
    pub length: ::std::os::raw::c_uint,
    #[doc = "< String encoding type (cannot be RZ_STRING_ENC_GUESS)"]
    pub encoding: RzStrEnc,
    #[doc = "< Adds a new line the output when it exeeds this value."]
    pub wrap_at: ::std::os::raw::c_uint,
    #[doc = "< When enabled escapes new lines (\\n)."]
    pub escape_nl: bool,
    #[doc = "< Encodes the output as a JSON string."]
    pub json: bool,
    #[doc = "< When enabled stops printing when '\\0' is found."]
    pub stop_at_nil: bool,
    #[doc = "< Encodes the output following RFC 3986."]
    pub urlencode: bool,
}
#[test]
fn bindgen_test_layout_rz_str_stringify_opt_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_str_stringify_opt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_str_stringify_opt_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_str_stringify_opt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_str_stringify_opt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_str_stringify_opt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_str_stringify_opt_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_str_stringify_opt_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encoding) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_str_stringify_opt_t),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrap_at) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_str_stringify_opt_t),
            "::",
            stringify!(wrap_at)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).escape_nl) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_str_stringify_opt_t),
            "::",
            stringify!(escape_nl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).json) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_str_stringify_opt_t),
            "::",
            stringify!(json)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop_at_nil) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_str_stringify_opt_t),
            "::",
            stringify!(stop_at_nil)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).urlencode) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_str_stringify_opt_t),
            "::",
            stringify!(urlencode)
        )
    );
}
pub type RzStrStringifyOpt = rz_str_stringify_opt_t;
extern "C" {
    pub fn rz_str_guess_encoding_from_buffer(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> RzStrEnc;
}
extern "C" {
    pub fn rz_str_stringify_raw_buffer(
        option: *mut RzStrStringifyOpt,
        length: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ret_ascii_table() -> *const ::std::os::raw::c_char;
}
#[doc = " Represent a detected string."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzDetectedString {
    #[doc = "< Pointer to the string"]
    pub string: *mut ::std::os::raw::c_char,
    #[doc = "< Address of the string in the RzBuffer"]
    pub addr: ::std::os::raw::c_ulonglong,
    #[doc = "< Size of buffer containing the string in bytes"]
    pub size: ::std::os::raw::c_uint,
    #[doc = "< Length of string in chars"]
    pub length: ::std::os::raw::c_uint,
    #[doc = "< String type"]
    pub type_: RzStrEnc,
}
#[test]
fn bindgen_test_layout_RzDetectedString() {
    const UNINIT: ::std::mem::MaybeUninit<RzDetectedString> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzDetectedString>(),
        32usize,
        concat!("Size of: ", stringify!(RzDetectedString))
    );
    assert_eq!(
        ::std::mem::align_of::<RzDetectedString>(),
        8usize,
        concat!("Alignment of ", stringify!(RzDetectedString))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzDetectedString),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzDetectedString),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RzDetectedString),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RzDetectedString),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RzDetectedString),
            "::",
            stringify!(type_)
        )
    );
}
#[doc = " Defines the search parameters for rz_scan_strings"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzUtilStrScanOptions {
    #[doc = "< Maximum size of a detected string"]
    pub buf_size: usize,
    #[doc = "< Maximum number of unicode blocks"]
    pub max_uni_blocks: usize,
    #[doc = "< Minimum string length"]
    pub min_str_length: usize,
    #[doc = "< True if the preferred endianess for UTF strings is big-endian"]
    pub prefer_big_endian: bool,
    #[doc = "< If true, perform check on ASCII frequencies when looking for false positives"]
    pub check_ascii_freq: bool,
}
#[test]
fn bindgen_test_layout_RzUtilStrScanOptions() {
    const UNINIT: ::std::mem::MaybeUninit<RzUtilStrScanOptions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzUtilStrScanOptions>(),
        32usize,
        concat!("Size of: ", stringify!(RzUtilStrScanOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<RzUtilStrScanOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(RzUtilStrScanOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzUtilStrScanOptions),
            "::",
            stringify!(buf_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_uni_blocks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzUtilStrScanOptions),
            "::",
            stringify!(max_uni_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_str_length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RzUtilStrScanOptions),
            "::",
            stringify!(min_str_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefer_big_endian) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RzUtilStrScanOptions),
            "::",
            stringify!(prefer_big_endian)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).check_ascii_freq) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(RzUtilStrScanOptions),
            "::",
            stringify!(check_ascii_freq)
        )
    );
}
extern "C" {
    pub fn rz_detected_string_free(str_: *mut RzDetectedString);
}
extern "C" {
    pub fn rz_scan_strings_raw(
        buf: *const ::std::os::raw::c_uchar,
        list: *mut RzList,
        opt: *const RzUtilStrScanOptions,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        type_: RzStrEnc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_scan_strings(
        buf_to_scan: *mut RzBuffer,
        list: *mut RzList,
        opt: *const RzUtilStrScanOptions,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        type_: RzStrEnc,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzStrpool {
    pub str_: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RzStrpool() {
    const UNINIT: ::std::mem::MaybeUninit<RzStrpool> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzStrpool>(),
        16usize,
        concat!("Size of: ", stringify!(RzStrpool))
    );
    assert_eq!(
        ::std::mem::align_of::<RzStrpool>(),
        8usize,
        concat!("Alignment of ", stringify!(RzStrpool))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzStrpool),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzStrpool),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RzStrpool),
            "::",
            stringify!(size)
        )
    );
}
extern "C" {
    pub fn rz_strpool_new(sz: ::std::os::raw::c_int) -> *mut RzStrpool;
}
extern "C" {
    pub fn rz_strpool_alloc(
        p: *mut RzStrpool,
        l: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_strpool_memcat(
        p: *mut RzStrpool,
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_strpool_ansi_chop(
        p: *mut RzStrpool,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_strpool_append(
        p: *mut RzStrpool,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_strpool_free(p: *mut RzStrpool);
}
extern "C" {
    pub fn rz_strpool_fit(p: *mut RzStrpool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_strpool_get(
        p: *mut RzStrpool,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_strpool_get_i(
        p: *mut RzStrpool,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_strpool_get_index(
        p: *mut RzStrpool,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_strpool_next(
        p: *mut RzStrpool,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_strpool_slice(
        p: *mut RzStrpool,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_strpool_empty(p: *mut RzStrpool) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_str_constpool_t {
    pub ht: *mut HtPP,
}
#[test]
fn bindgen_test_layout_rz_str_constpool_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_str_constpool_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_str_constpool_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_str_constpool_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_str_constpool_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_str_constpool_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_str_constpool_t),
            "::",
            stringify!(ht)
        )
    );
}
pub type RzStrConstPool = rz_str_constpool_t;
extern "C" {
    pub fn rz_str_constpool_init(pool: *mut RzStrConstPool) -> bool;
}
extern "C" {
    pub fn rz_str_constpool_fini(pool: *mut RzStrConstPool);
}
extern "C" {
    pub fn rz_str_constpool_get(
        pool: *mut RzStrConstPool,
        str_: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
pub const RZ_SYS_BITS_8: _bindgen_ty_17 = 1;
pub const RZ_SYS_BITS_16: _bindgen_ty_17 = 2;
pub const RZ_SYS_BITS_32: _bindgen_ty_17 = 4;
pub const RZ_SYS_BITS_64: _bindgen_ty_17 = 8;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RSysInfo {
    pub sysname: *mut ::std::os::raw::c_char,
    pub nodename: *mut ::std::os::raw::c_char,
    pub release: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
    pub machine: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RSysInfo() {
    const UNINIT: ::std::mem::MaybeUninit<RSysInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RSysInfo>(),
        40usize,
        concat!("Size of: ", stringify!(RSysInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RSysInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RSysInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sysname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RSysInfo),
            "::",
            stringify!(sysname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodename) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RSysInfo),
            "::",
            stringify!(nodename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RSysInfo),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RSysInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RSysInfo),
            "::",
            stringify!(machine)
        )
    );
}
extern "C" {
    pub fn rz_sys_info() -> *mut RSysInfo;
}
extern "C" {
    pub fn rz_sys_info_free(si: *mut RSysInfo);
}
extern "C" {
    pub fn rz_sys_sigaction(
        sig: *mut ::std::os::raw::c_int,
        handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_signal(
        sig: ::std::os::raw::c_int,
        handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_env_init();
}
extern "C" {
    pub fn rz_sys_get_environ() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_sys_set_environ(e: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_sys_fork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_kill(
        pid: ::std::os::raw::c_int,
        sig: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_exit(status: ::std::os::raw::c_int, nocleanup: bool);
}
extern "C" {
    pub fn rz_sys_forkpty(
        amaster: *mut ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        termp: *mut ::std::os::raw::c_void,
        winp: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_openpty(
        amaster: *mut ::std::os::raw::c_int,
        aslave: *mut ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        termp: *mut ::std::os::raw::c_void,
        winp: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_login_tty(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_is_heap(p: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn rz_sys_stop() -> bool;
}
extern "C" {
    pub fn rz_sys_pid_to_path(pid: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_sys_run(
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_run_rop(
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_getpid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_pipe(
        pipefd: *mut ::std::os::raw::c_int,
        close_on_exec: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_pipe_close(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_crash_handler(cmd: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_arch_str(arch: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_sys_arch_id(arch: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_arch_match(
        archstr: *const ::std::os::raw::c_char,
        arch: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_sys_dir(path: *const ::std::os::raw::c_char) -> *mut RzList;
}
extern "C" {
    pub fn rz_sys_perror_str(fun: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_sys_mkdir(dir: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_sys_mkdirp(dir: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_sys_sleep(secs: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_usleep(usecs: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_getenv(key: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_sys_getenv_asbool(key: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_sys_setenv(
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_whoami(buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_sys_getdir() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_sys_chdir(s: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_sys_aslr(val: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn rz_sys_dlopen(libname: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_sys_dlsym(
        handler: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_sys_dlclose(handler: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_cmd_str_full(
        cmd: *const ::std::os::raw::c_char,
        input: *const ::std::os::raw::c_char,
        output: *mut *mut ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
        sterr: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_open_perms(rizin_perms: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_open(
        path: *const ::std::os::raw::c_char,
        perm: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_fopen(
        path: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn rz_sys_truncate_fd(
        fd: ::std::os::raw::c_int,
        length: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_truncate(
        file: *const ::std::os::raw::c_char,
        sz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_cmdbg(cmd: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_cmdf(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_sys_cmd_str(
        cmd: *const ::std::os::raw::c_char,
        input: *const ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_sys_cmd_strf(cmd: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_sys_backtrace();
}
extern "C" {
    pub fn rz_syscmd_ls(input: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_syscmd_cat(file: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_syscmd_mkdir(dir: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_syscmd_uniq(file: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_syscmd_head(
        file: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_syscmd_tail(
        file: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_syscmd_join(
        file1: *const ::std::os::raw::c_char,
        file2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_syscmd_sort(file: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_tree_node_t {
    pub parent: *mut rz_tree_node_t,
    pub tree: *mut rz_tree_t,
    pub children: *mut RzList,
    pub n_children: ::std::os::raw::c_uint,
    pub depth: ::std::os::raw::c_int,
    pub free: RzListFree,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rz_tree_node_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_tree_node_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_tree_node_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_tree_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_tree_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_tree_node_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_tree_node_t),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_tree_node_t),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).children) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_tree_node_t),
            "::",
            stringify!(children)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_children) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_tree_node_t),
            "::",
            stringify!(n_children)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_tree_node_t),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_tree_node_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_tree_node_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RTreeNode = rz_tree_node_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_tree_t {
    pub root: *mut RTreeNode,
}
#[test]
fn bindgen_test_layout_rz_tree_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_tree_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_tree_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_tree_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_tree_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_tree_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_tree_t),
            "::",
            stringify!(root)
        )
    );
}
pub type RTree = rz_tree_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_tree_visitor_t {
    pub pre_visit: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut RTreeNode, arg2: *mut rz_tree_visitor_t),
    >,
    pub post_visit: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut RTreeNode, arg2: *mut rz_tree_visitor_t),
    >,
    pub discover_child: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut RTreeNode, arg2: *mut rz_tree_visitor_t),
    >,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rz_tree_visitor_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_tree_visitor_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_tree_visitor_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_tree_visitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_tree_visitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_tree_visitor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pre_visit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_tree_visitor_t),
            "::",
            stringify!(pre_visit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_visit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_tree_visitor_t),
            "::",
            stringify!(post_visit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).discover_child) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_tree_visitor_t),
            "::",
            stringify!(discover_child)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_tree_visitor_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RTreeVisitor = rz_tree_visitor_t;
pub type RTreeNodeVisitCb =
    ::std::option::Option<unsafe extern "C" fn(n: *mut RTreeNode, vis: *mut RTreeVisitor)>;
extern "C" {
    pub fn rz_tree_new() -> *mut RTree;
}
extern "C" {
    pub fn rz_tree_add_node(
        t: *mut RTree,
        node: *mut RTreeNode,
        child_data: *mut ::std::os::raw::c_void,
    ) -> *mut RTreeNode;
}
extern "C" {
    pub fn rz_tree_reset(t: *mut RTree);
}
extern "C" {
    pub fn rz_tree_free(t: *mut RTree);
}
extern "C" {
    pub fn rz_tree_dfs(t: *mut RTree, vis: *mut RTreeVisitor);
}
extern "C" {
    pub fn rz_tree_bfs(t: *mut RTree, vis: *mut RTreeVisitor);
}
extern "C" {
    pub fn rz_uleb128(
        data: *const ::std::os::raw::c_uchar,
        datalen: ::std::os::raw::c_int,
        v: *mut ::std::os::raw::c_ulonglong,
        error: *mut *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_uleb128_decode(
        data: *const ::std::os::raw::c_uchar,
        datalen: *mut ::std::os::raw::c_int,
        v: *mut ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_uleb128_len(
        data: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_uleb128_encode(
        s: ::std::os::raw::c_ulonglong,
        len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_leb128(
        data: *const ::std::os::raw::c_uchar,
        datalen: ::std::os::raw::c_int,
        v: *mut ::std::os::raw::c_longlong,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_sleb128(
        data: *mut *const ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn read_u32_leb128(
        p: *const ::std::os::raw::c_uchar,
        max: *const ::std::os::raw::c_uchar,
        out_val: *mut ::std::os::raw::c_uint,
    ) -> usize;
}
extern "C" {
    pub fn read_i32_leb128(
        p: *const ::std::os::raw::c_uchar,
        max: *const ::std::os::raw::c_uchar,
        out_val: *mut ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    pub fn read_u64_leb128(
        p: *const ::std::os::raw::c_uchar,
        max: *const ::std::os::raw::c_uchar,
        out_val: *mut ::std::os::raw::c_ulonglong,
    ) -> usize;
}
extern "C" {
    pub fn read_i64_leb128(
        p: *const ::std::os::raw::c_uchar,
        max: *const ::std::os::raw::c_uchar,
        out_val: *mut ::std::os::raw::c_longlong,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RUtfBlock {
    pub from: ::std::os::raw::c_uint,
    pub to: ::std::os::raw::c_uint,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RUtfBlock() {
    const UNINIT: ::std::mem::MaybeUninit<RUtfBlock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RUtfBlock>(),
        16usize,
        concat!("Size of: ", stringify!(RUtfBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<RUtfBlock>(),
        8usize,
        concat!("Alignment of ", stringify!(RUtfBlock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RUtfBlock),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RUtfBlock),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RUtfBlock),
            "::",
            stringify!(name)
        )
    );
}
pub type RzRune = ::std::os::raw::c_uint;
extern "C" {
    pub fn rz_utf8_encode(ptr: *mut ::std::os::raw::c_uchar, ch: RzRune) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_utf8_decode(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
        ch: *mut RzRune,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_mutf8_decode(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
        ch: *mut RzRune,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_utf8_encode_str(
        str_: *const RzRune,
        dst: *mut ::std::os::raw::c_uchar,
        dst_length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_utf8_size(ptr: *const ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_utf8_strlen(str_: *const ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_rune_is_printable(c: RzRune) -> bool;
}
extern "C" {
    pub fn rz_utf_block_name(idx: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_utf_block_idx(ch: RzRune) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_utf_block_list(
        str_: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        freq_list: *mut *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_utf_bom_encoding(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
    ) -> RzStrEnc;
}
extern "C" {
    pub fn rz_utf16_decode(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
        ch: *mut RzRune,
        bigendian: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_utf16le_decode(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
        ch: *mut RzRune,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_utf16be_decode(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
        ch: *mut RzRune,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_utf16le_encode(
        ptr: *mut ::std::os::raw::c_uchar,
        ch: RzRune,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_utf32_decode(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
        ch: *mut RzRune,
        bigendian: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_utf32le_decode(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
        ch: *mut RzRune,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_utf32be_decode(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
        ch: *mut RzRune,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_id_pool_t {
    pub start_id: ::std::os::raw::c_uint,
    pub last_id: ::std::os::raw::c_uint,
    pub next_id: ::std::os::raw::c_uint,
    pub freed_ids: *mut RzVector,
}
#[test]
fn bindgen_test_layout_rz_id_pool_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_id_pool_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_id_pool_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_id_pool_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_id_pool_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_id_pool_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_id_pool_t),
            "::",
            stringify!(start_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_id_pool_t),
            "::",
            stringify!(last_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_id_pool_t),
            "::",
            stringify!(next_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freed_ids) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_id_pool_t),
            "::",
            stringify!(freed_ids)
        )
    );
}
pub type RzIDPool = rz_id_pool_t;
extern "C" {
    pub fn rz_id_pool_new(
        start_id: ::std::os::raw::c_uint,
        last_id: ::std::os::raw::c_uint,
    ) -> *mut RzIDPool;
}
extern "C" {
    pub fn rz_id_pool_grab_id(pool: *mut RzIDPool, grabber: *mut ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn rz_id_pool_kick_id(pool: *mut RzIDPool, kick: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn rz_id_pool_free(pool: *mut RzIDPool);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_id_storage_t {
    pub pool: *mut RzIDPool,
    pub data: *mut *mut ::std::os::raw::c_void,
    pub top_id: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_rz_id_storage_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_id_storage_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_id_storage_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_id_storage_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_id_storage_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_id_storage_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_id_storage_t),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_id_storage_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_id_storage_t),
            "::",
            stringify!(top_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_id_storage_t),
            "::",
            stringify!(size)
        )
    );
}
pub type RzIDStorage = rz_id_storage_t;
pub type RzIDStorageForeachCb = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
        id: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type ROIDStorageCompareCb = ::std::option::Option<
    unsafe extern "C" fn(
        in_: *mut ::std::os::raw::c_void,
        incoming: *mut ::std::os::raw::c_void,
        user: *mut ::std::os::raw::c_void,
        cmp_res: *mut ::std::os::raw::c_int,
    ) -> bool,
>;
extern "C" {
    pub fn rz_id_storage_new(
        start_id: ::std::os::raw::c_uint,
        last_id: ::std::os::raw::c_uint,
    ) -> *mut RzIDStorage;
}
extern "C" {
    pub fn rz_id_storage_set(
        storage: *mut RzIDStorage,
        data: *mut ::std::os::raw::c_void,
        id: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn rz_id_storage_add(
        storage: *mut RzIDStorage,
        data: *mut ::std::os::raw::c_void,
        id: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn rz_id_storage_get(
        storage: *mut RzIDStorage,
        id: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_id_storage_get_next(
        storage: *mut RzIDStorage,
        id: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn rz_id_storage_get_prev(
        storage: *mut RzIDStorage,
        id: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn rz_id_storage_delete(storage: *mut RzIDStorage, id: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rz_id_storage_take(
        storage: *mut RzIDStorage,
        id: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_id_storage_foreach(
        storage: *mut RzIDStorage,
        cb: RzIDStorageForeachCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rz_id_storage_free(storage: *mut RzIDStorage);
}
extern "C" {
    pub fn rz_id_storage_list(s: *mut RzIDStorage) -> *mut RzList;
}
extern "C" {
    pub fn rz_id_storage_get_lowest(
        storage: *mut RzIDStorage,
        id: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn rz_id_storage_get_highest(
        storage: *mut RzIDStorage,
        id: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_ordered_id_storage_t {
    pub permutation: *mut ::std::os::raw::c_uint,
    pub psize: ::std::os::raw::c_uint,
    pub ptop: ::std::os::raw::c_uint,
    pub data: *mut RzIDStorage,
    pub cmp: ROIDStorageCompareCb,
}
#[test]
fn bindgen_test_layout_rz_ordered_id_storage_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_ordered_id_storage_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_ordered_id_storage_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_ordered_id_storage_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_ordered_id_storage_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_ordered_id_storage_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).permutation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_ordered_id_storage_t),
            "::",
            stringify!(permutation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_ordered_id_storage_t),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptop) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_ordered_id_storage_t),
            "::",
            stringify!(ptop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_ordered_id_storage_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_ordered_id_storage_t),
            "::",
            stringify!(cmp)
        )
    );
}
pub type ROIDStorage = rz_ordered_id_storage_t;
extern "C" {
    pub fn rz_oids_new(
        start_id: ::std::os::raw::c_uint,
        last_id: ::std::os::raw::c_uint,
    ) -> *mut ROIDStorage;
}
extern "C" {
    pub fn rz_oids_get(
        storage: *mut ROIDStorage,
        id: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_oids_oget(
        storage: *mut ROIDStorage,
        od: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_oids_get_id(
        storage: *mut ROIDStorage,
        od: ::std::os::raw::c_uint,
        id: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn rz_oids_get_od(
        storage: *mut ROIDStorage,
        id: ::std::os::raw::c_uint,
        od: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn rz_oids_to_front(storage: *mut ROIDStorage, id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn rz_oids_to_rear(storage: *mut ROIDStorage, id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn rz_oids_delete(storage: *mut ROIDStorage, id: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rz_oids_odelete(st: *mut ROIDStorage, od: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rz_oids_free(storage: *mut ROIDStorage);
}
extern "C" {
    pub fn rz_oids_add(
        storage: *mut ROIDStorage,
        data: *mut ::std::os::raw::c_void,
        id: *mut ::std::os::raw::c_uint,
        od: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn rz_oids_take(
        storage: *mut ROIDStorage,
        id: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_oids_otake(
        st: *mut ROIDStorage,
        od: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_oids_foreach(
        storage: *mut ROIDStorage,
        cb: RzIDStorageForeachCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rz_oids_foreach_prev(
        storage: *mut ROIDStorage,
        cb: RzIDStorageForeachCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rz_oids_insert(
        storage: *mut ROIDStorage,
        data: *mut ::std::os::raw::c_void,
        id: *mut ::std::os::raw::c_uint,
        od: *mut ::std::os::raw::c_uint,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rz_oids_sort(storage: *mut ROIDStorage, user: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn rz_oids_find(
        storage: *mut ROIDStorage,
        incoming: *mut ::std::os::raw::c_void,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_oids_last(storage: *mut ROIDStorage) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_oids_first(storage: *mut ROIDStorage) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_asn1_string_t {
    pub length: ::std::os::raw::c_uint,
    pub string: *const ::std::os::raw::c_char,
    pub allocated: bool,
}
#[test]
fn bindgen_test_layout_rz_asn1_string_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_asn1_string_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_asn1_string_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_asn1_string_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_asn1_string_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_asn1_string_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_asn1_string_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_asn1_string_t),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocated) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_asn1_string_t),
            "::",
            stringify!(allocated)
        )
    );
}
pub type RzASN1String = rz_asn1_string_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_asn1_list_t {
    pub length: ::std::os::raw::c_uint,
    pub objects: *mut *mut rz_asn1_object_t,
}
#[test]
fn bindgen_test_layout_rz_asn1_list_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_asn1_list_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_asn1_list_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_asn1_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_asn1_list_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_asn1_list_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_asn1_list_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objects) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_asn1_list_t),
            "::",
            stringify!(objects)
        )
    );
}
pub type RzASN1List = rz_asn1_list_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_asn1_bin_t {
    pub length: ::std::os::raw::c_uint,
    pub binary: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_rz_asn1_bin_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_asn1_bin_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_asn1_bin_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_asn1_bin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_asn1_bin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_asn1_bin_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_asn1_bin_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binary) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_asn1_bin_t),
            "::",
            stringify!(binary)
        )
    );
}
pub type RzASN1Binary = rz_asn1_bin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_asn1_object_t {
    pub klass: ::std::os::raw::c_uchar,
    pub form: ::std::os::raw::c_uchar,
    pub tag: ::std::os::raw::c_uchar,
    pub sector: *const ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uint,
    pub offset: ::std::os::raw::c_ulonglong,
    pub list: RzASN1List,
}
#[test]
fn bindgen_test_layout_rz_asn1_object_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_asn1_object_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_asn1_object_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_asn1_object_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_asn1_object_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_asn1_object_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_asn1_object_t),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).form) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_asn1_object_t),
            "::",
            stringify!(form)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_asn1_object_t),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sector) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_asn1_object_t),
            "::",
            stringify!(sector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_asn1_object_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_asn1_object_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_asn1_object_t),
            "::",
            stringify!(list)
        )
    );
}
pub type RzASN1Object = rz_asn1_object_t;
extern "C" {
    pub fn rz_asn1_object_parse(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RzASN1Object;
}
extern "C" {
    pub fn rz_asn1_binary_parse(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RzASN1Binary;
}
extern "C" {
    pub fn rz_asn1_string_parse(
        string: *const ::std::os::raw::c_char,
        allocated: bool,
        length: ::std::os::raw::c_uint,
    ) -> *mut RzASN1String;
}
extern "C" {
    pub fn rz_asn1_stringify_bits(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RzASN1String;
}
extern "C" {
    pub fn rz_asn1_stringify_utctime(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RzASN1String;
}
extern "C" {
    pub fn rz_asn1_stringify_time(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RzASN1String;
}
extern "C" {
    pub fn rz_asn1_stringify_integer(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RzASN1String;
}
extern "C" {
    pub fn rz_asn1_stringify_string(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RzASN1String;
}
extern "C" {
    pub fn rz_asn1_stringify_bytes(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RzASN1String;
}
extern "C" {
    pub fn rz_asn1_stringify_boolean(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RzASN1String;
}
extern "C" {
    pub fn rz_asn1_stringify_oid(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RzASN1String;
}
extern "C" {
    pub fn rz_asn1_object_free(object: *mut RzASN1Object);
}
extern "C" {
    pub fn rz_asn1_to_strbuf(
        object: *mut RzASN1Object,
        depth: ::std::os::raw::c_uint,
        structured: bool,
        sb: *mut RzStrBuf,
    );
}
extern "C" {
    pub fn rz_asn1_to_string(
        object: *mut RzASN1Object,
        depth: ::std::os::raw::c_uint,
        structured: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_asn1_string_free(string: *mut RzASN1String);
}
extern "C" {
    pub fn rz_asn1_binary_free(string: *mut RzASN1Binary);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_x509_validity_t {
    pub notBefore: *mut RzASN1String,
    pub notAfter: *mut RzASN1String,
}
#[test]
fn bindgen_test_layout_rz_x509_validity_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_x509_validity_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_x509_validity_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_x509_validity_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_x509_validity_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_x509_validity_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notBefore) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_validity_t),
            "::",
            stringify!(notBefore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notAfter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_validity_t),
            "::",
            stringify!(notAfter)
        )
    );
}
pub type RzX509Validity = rz_x509_validity_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_x509_name_t {
    pub length: ::std::os::raw::c_uint,
    pub oids: *mut *mut RzASN1String,
    pub names: *mut *mut RzASN1String,
}
#[test]
fn bindgen_test_layout_rz_x509_name_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_x509_name_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_x509_name_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_x509_name_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_x509_name_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_x509_name_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_name_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oids) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_name_t),
            "::",
            stringify!(oids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).names) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_name_t),
            "::",
            stringify!(names)
        )
    );
}
pub type RzX509Name = rz_x509_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_x509_algorithmidentifier_t {
    pub algorithm: *mut RzASN1String,
    pub parameters: *mut RzASN1String,
}
#[test]
fn bindgen_test_layout_rz_x509_algorithmidentifier_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_x509_algorithmidentifier_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_x509_algorithmidentifier_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_x509_algorithmidentifier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_x509_algorithmidentifier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_x509_algorithmidentifier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).algorithm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_algorithmidentifier_t),
            "::",
            stringify!(algorithm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameters) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_algorithmidentifier_t),
            "::",
            stringify!(parameters)
        )
    );
}
pub type RzX509AlgorithmIdentifier = rz_x509_algorithmidentifier_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_x509_authoritykeyidentifier_t {
    pub keyIdentifier: *mut RzASN1Binary,
    pub authorityCertIssuer: RzX509Name,
    pub authorityCertSerialNumber: *mut RzASN1Binary,
}
#[test]
fn bindgen_test_layout_rz_x509_authoritykeyidentifier_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_x509_authoritykeyidentifier_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_x509_authoritykeyidentifier_t>(),
        40usize,
        concat!("Size of: ", stringify!(rz_x509_authoritykeyidentifier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_x509_authoritykeyidentifier_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_x509_authoritykeyidentifier_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyIdentifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_authoritykeyidentifier_t),
            "::",
            stringify!(keyIdentifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).authorityCertIssuer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_authoritykeyidentifier_t),
            "::",
            stringify!(authorityCertIssuer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).authorityCertSerialNumber) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_authoritykeyidentifier_t),
            "::",
            stringify!(authorityCertSerialNumber)
        )
    );
}
pub type RzX509AuthorityKeyIdentifier = rz_x509_authoritykeyidentifier_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_x509_subjectpublickeyinfo_t {
    pub algorithm: RzX509AlgorithmIdentifier,
    pub subjectPublicKey: *mut RzASN1Binary,
    pub subjectPublicKeyExponent: *mut RzASN1Binary,
    pub subjectPublicKeyModule: *mut RzASN1Binary,
}
#[test]
fn bindgen_test_layout_rz_x509_subjectpublickeyinfo_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_x509_subjectpublickeyinfo_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_x509_subjectpublickeyinfo_t>(),
        40usize,
        concat!("Size of: ", stringify!(rz_x509_subjectpublickeyinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_x509_subjectpublickeyinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_x509_subjectpublickeyinfo_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).algorithm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_subjectpublickeyinfo_t),
            "::",
            stringify!(algorithm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subjectPublicKey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_subjectpublickeyinfo_t),
            "::",
            stringify!(subjectPublicKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subjectPublicKeyExponent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_subjectpublickeyinfo_t),
            "::",
            stringify!(subjectPublicKeyExponent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subjectPublicKeyModule) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_subjectpublickeyinfo_t),
            "::",
            stringify!(subjectPublicKeyModule)
        )
    );
}
pub type RzX509SubjectPublicKeyInfo = rz_x509_subjectpublickeyinfo_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_x509_extension_t {
    pub extnID: *mut RzASN1String,
    pub critical: bool,
    pub extnValue: *mut RzASN1Binary,
}
#[test]
fn bindgen_test_layout_rz_x509_extension_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_x509_extension_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_x509_extension_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_x509_extension_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_x509_extension_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_x509_extension_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extnID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_extension_t),
            "::",
            stringify!(extnID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).critical) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_extension_t),
            "::",
            stringify!(critical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extnValue) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_extension_t),
            "::",
            stringify!(extnValue)
        )
    );
}
pub type RzX509Extension = rz_x509_extension_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_x509_extensions_t {
    pub length: ::std::os::raw::c_uint,
    pub extensions: *mut *mut RzX509Extension,
}
#[test]
fn bindgen_test_layout_rz_x509_extensions_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_x509_extensions_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_x509_extensions_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_x509_extensions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_x509_extensions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_x509_extensions_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_extensions_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_extensions_t),
            "::",
            stringify!(extensions)
        )
    );
}
pub type RzX509Extensions = rz_x509_extensions_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_x509_tbscertificate_t {
    pub version: ::std::os::raw::c_uint,
    pub serialNumber: *mut RzASN1String,
    pub signature: RzX509AlgorithmIdentifier,
    pub issuer: RzX509Name,
    pub validity: RzX509Validity,
    pub subject: RzX509Name,
    pub subjectPublicKeyInfo: RzX509SubjectPublicKeyInfo,
    pub issuerUniqueID: *mut RzASN1Binary,
    pub subjectUniqueID: *mut RzASN1Binary,
    pub extensions: RzX509Extensions,
}
#[test]
fn bindgen_test_layout_rz_x509_tbscertificate_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_x509_tbscertificate_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_x509_tbscertificate_t>(),
        168usize,
        concat!("Size of: ", stringify!(rz_x509_tbscertificate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_x509_tbscertificate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_x509_tbscertificate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_tbscertificate_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serialNumber) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_tbscertificate_t),
            "::",
            stringify!(serialNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_tbscertificate_t),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).issuer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_tbscertificate_t),
            "::",
            stringify!(issuer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validity) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_tbscertificate_t),
            "::",
            stringify!(validity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subject) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_tbscertificate_t),
            "::",
            stringify!(subject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subjectPublicKeyInfo) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_tbscertificate_t),
            "::",
            stringify!(subjectPublicKeyInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).issuerUniqueID) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_tbscertificate_t),
            "::",
            stringify!(issuerUniqueID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subjectUniqueID) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_tbscertificate_t),
            "::",
            stringify!(subjectUniqueID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_tbscertificate_t),
            "::",
            stringify!(extensions)
        )
    );
}
pub type RzX509TBSCertificate = rz_x509_tbscertificate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_x509_certificate_t {
    pub tbsCertificate: RzX509TBSCertificate,
    pub algorithmIdentifier: RzX509AlgorithmIdentifier,
    pub signature: *mut RzASN1Binary,
}
#[test]
fn bindgen_test_layout_rz_x509_certificate_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_x509_certificate_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_x509_certificate_t>(),
        192usize,
        concat!("Size of: ", stringify!(rz_x509_certificate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_x509_certificate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_x509_certificate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tbsCertificate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_certificate_t),
            "::",
            stringify!(tbsCertificate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).algorithmIdentifier) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_certificate_t),
            "::",
            stringify!(algorithmIdentifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_certificate_t),
            "::",
            stringify!(signature)
        )
    );
}
pub type RzX509Certificate = rz_x509_certificate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_x509_crlentry {
    pub userCertificate: *mut RzASN1Binary,
    pub revocationDate: *mut RzASN1String,
}
#[test]
fn bindgen_test_layout_rz_x509_crlentry() {
    const UNINIT: ::std::mem::MaybeUninit<rz_x509_crlentry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_x509_crlentry>(),
        16usize,
        concat!("Size of: ", stringify!(rz_x509_crlentry))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_x509_crlentry>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_x509_crlentry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userCertificate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_crlentry),
            "::",
            stringify!(userCertificate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revocationDate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_crlentry),
            "::",
            stringify!(revocationDate)
        )
    );
}
pub type RzX509CRLEntry = rz_x509_crlentry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_x509_certificaterevocationlist {
    pub signature: RzX509AlgorithmIdentifier,
    pub issuer: RzX509Name,
    pub lastUpdate: *mut RzASN1String,
    pub nextUpdate: *mut RzASN1String,
    pub length: ::std::os::raw::c_uint,
    pub revokedCertificates: *mut *mut RzX509CRLEntry,
}
#[test]
fn bindgen_test_layout_rz_x509_certificaterevocationlist() {
    const UNINIT: ::std::mem::MaybeUninit<rz_x509_certificaterevocationlist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_x509_certificaterevocationlist>(),
        72usize,
        concat!("Size of: ", stringify!(rz_x509_certificaterevocationlist))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_x509_certificaterevocationlist>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_x509_certificaterevocationlist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_certificaterevocationlist),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).issuer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_certificaterevocationlist),
            "::",
            stringify!(issuer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastUpdate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_certificaterevocationlist),
            "::",
            stringify!(lastUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextUpdate) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_certificaterevocationlist),
            "::",
            stringify!(nextUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_certificaterevocationlist),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revokedCertificates) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_x509_certificaterevocationlist),
            "::",
            stringify!(revokedCertificates)
        )
    );
}
pub type RzX509CertificateRevocationList = rz_x509_certificaterevocationlist;
extern "C" {
    pub fn rz_x509_crl_parse(object: *mut RzASN1Object) -> *mut RzX509CertificateRevocationList;
}
extern "C" {
    pub fn rz_x509_crl_to_string(
        crl: *mut RzX509CertificateRevocationList,
        pad: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_x509_crl_json(pj: *mut PJ, crl: *mut RzX509CertificateRevocationList);
}
extern "C" {
    pub fn rz_x509_certificate_parse(object: *mut RzASN1Object) -> *mut RzX509Certificate;
}
extern "C" {
    pub fn rz_x509_certificate_parse2(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RzX509Certificate;
}
extern "C" {
    pub fn rz_x509_certificate_free(certificate: *mut RzX509Certificate);
}
extern "C" {
    pub fn rz_x509_certificate_json(pj: *mut PJ, certificate: *mut RzX509Certificate);
}
extern "C" {
    pub fn rz_x509_certificate_dump(
        cert: *mut RzX509Certificate,
        pad: *const ::std::os::raw::c_char,
        sb: *mut RzStrBuf,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_pkcs7_certificaterevocationlists_t {
    pub length: ::std::os::raw::c_uint,
    pub elements: *mut *mut RzX509CertificateRevocationList,
}
#[test]
fn bindgen_test_layout_rz_pkcs7_certificaterevocationlists_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_pkcs7_certificaterevocationlists_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_pkcs7_certificaterevocationlists_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(rz_pkcs7_certificaterevocationlists_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_pkcs7_certificaterevocationlists_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_pkcs7_certificaterevocationlists_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_certificaterevocationlists_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elements) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_certificaterevocationlists_t),
            "::",
            stringify!(elements)
        )
    );
}
pub type RzPKCS7CertificateRevocationLists = rz_pkcs7_certificaterevocationlists_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_pkcs7_extendedcertificatesandcertificates_t {
    pub length: ::std::os::raw::c_uint,
    pub elements: *mut *mut RzX509Certificate,
}
#[test]
fn bindgen_test_layout_rz_pkcs7_extendedcertificatesandcertificates_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_pkcs7_extendedcertificatesandcertificates_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_pkcs7_extendedcertificatesandcertificates_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(rz_pkcs7_extendedcertificatesandcertificates_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_pkcs7_extendedcertificatesandcertificates_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_pkcs7_extendedcertificatesandcertificates_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_extendedcertificatesandcertificates_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elements) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_extendedcertificatesandcertificates_t),
            "::",
            stringify!(elements)
        )
    );
}
pub type RzPKCS7ExtendedCertificatesAndCertificates =
    rz_pkcs7_extendedcertificatesandcertificates_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_pkcs7_digestalgorithmidentifiers_t {
    pub length: ::std::os::raw::c_uint,
    pub elements: *mut *mut RzX509AlgorithmIdentifier,
}
#[test]
fn bindgen_test_layout_rz_pkcs7_digestalgorithmidentifiers_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_pkcs7_digestalgorithmidentifiers_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_pkcs7_digestalgorithmidentifiers_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(rz_pkcs7_digestalgorithmidentifiers_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_pkcs7_digestalgorithmidentifiers_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_pkcs7_digestalgorithmidentifiers_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_digestalgorithmidentifiers_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elements) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_digestalgorithmidentifiers_t),
            "::",
            stringify!(elements)
        )
    );
}
pub type RzPKCS7DigestAlgorithmIdentifiers = rz_pkcs7_digestalgorithmidentifiers_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_pkcs7_contentinfo_t {
    pub contentType: *mut RzASN1String,
    pub content: *mut RzASN1Binary,
}
#[test]
fn bindgen_test_layout_rz_pkcs7_contentinfo_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_pkcs7_contentinfo_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_pkcs7_contentinfo_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_pkcs7_contentinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_pkcs7_contentinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_pkcs7_contentinfo_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contentType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_contentinfo_t),
            "::",
            stringify!(contentType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_contentinfo_t),
            "::",
            stringify!(content)
        )
    );
}
pub type RzPKCS7ContentInfo = rz_pkcs7_contentinfo_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_pkcs7_issuerandserialnumber_t {
    pub issuer: RzX509Name,
    pub serialNumber: *mut RzASN1Binary,
}
#[test]
fn bindgen_test_layout_rz_pkcs7_issuerandserialnumber_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_pkcs7_issuerandserialnumber_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_pkcs7_issuerandserialnumber_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_pkcs7_issuerandserialnumber_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_pkcs7_issuerandserialnumber_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_pkcs7_issuerandserialnumber_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).issuer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_issuerandserialnumber_t),
            "::",
            stringify!(issuer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serialNumber) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_issuerandserialnumber_t),
            "::",
            stringify!(serialNumber)
        )
    );
}
pub type RzPKCS7IssuerAndSerialNumber = rz_pkcs7_issuerandserialnumber_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_pkcs7_attribute_t {
    pub oid: *mut RzASN1String,
    pub data: *mut RzASN1Binary,
}
#[test]
fn bindgen_test_layout_rz_pkcs7_attribute_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_pkcs7_attribute_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_pkcs7_attribute_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_pkcs7_attribute_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_pkcs7_attribute_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_pkcs7_attribute_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_attribute_t),
            "::",
            stringify!(oid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_attribute_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RzPKCS7Attribute = rz_pkcs7_attribute_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_pkcs7_attributes_t {
    pub length: ::std::os::raw::c_uint,
    pub elements: *mut *mut RzPKCS7Attribute,
}
#[test]
fn bindgen_test_layout_rz_pkcs7_attributes_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_pkcs7_attributes_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_pkcs7_attributes_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_pkcs7_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_pkcs7_attributes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_pkcs7_attributes_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_attributes_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elements) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_attributes_t),
            "::",
            stringify!(elements)
        )
    );
}
pub type RzPKCS7Attributes = rz_pkcs7_attributes_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_pkcs7_signerinfo_t {
    pub version: ::std::os::raw::c_uint,
    pub issuerAndSerialNumber: RzPKCS7IssuerAndSerialNumber,
    pub digestAlgorithm: RzX509AlgorithmIdentifier,
    pub authenticatedAttributes: RzPKCS7Attributes,
    pub digestEncryptionAlgorithm: RzX509AlgorithmIdentifier,
    pub encryptedDigest: *mut RzASN1Binary,
    pub unauthenticatedAttributes: RzPKCS7Attributes,
}
#[test]
fn bindgen_test_layout_rz_pkcs7_signerinfo_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_pkcs7_signerinfo_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_pkcs7_signerinfo_t>(),
        112usize,
        concat!("Size of: ", stringify!(rz_pkcs7_signerinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_pkcs7_signerinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_pkcs7_signerinfo_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signerinfo_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).issuerAndSerialNumber) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signerinfo_t),
            "::",
            stringify!(issuerAndSerialNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digestAlgorithm) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signerinfo_t),
            "::",
            stringify!(digestAlgorithm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).authenticatedAttributes) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signerinfo_t),
            "::",
            stringify!(authenticatedAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digestEncryptionAlgorithm) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signerinfo_t),
            "::",
            stringify!(digestEncryptionAlgorithm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encryptedDigest) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signerinfo_t),
            "::",
            stringify!(encryptedDigest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unauthenticatedAttributes) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signerinfo_t),
            "::",
            stringify!(unauthenticatedAttributes)
        )
    );
}
pub type RzPKCS7SignerInfo = rz_pkcs7_signerinfo_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_pkcs7_signerinfos_t {
    pub length: ::std::os::raw::c_uint,
    pub elements: *mut *mut RzPKCS7SignerInfo,
}
#[test]
fn bindgen_test_layout_rz_pkcs7_signerinfos_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_pkcs7_signerinfos_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_pkcs7_signerinfos_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_pkcs7_signerinfos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_pkcs7_signerinfos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_pkcs7_signerinfos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signerinfos_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elements) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signerinfos_t),
            "::",
            stringify!(elements)
        )
    );
}
pub type RzPKCS7SignerInfos = rz_pkcs7_signerinfos_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_pkcs7_signeddata_t {
    pub version: ::std::os::raw::c_uint,
    pub digestAlgorithms: RzPKCS7DigestAlgorithmIdentifiers,
    pub contentInfo: RzPKCS7ContentInfo,
    pub certificates: RzPKCS7ExtendedCertificatesAndCertificates,
    pub crls: RzPKCS7CertificateRevocationLists,
    pub signerinfos: RzPKCS7SignerInfos,
}
#[test]
fn bindgen_test_layout_rz_pkcs7_signeddata_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_pkcs7_signeddata_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_pkcs7_signeddata_t>(),
        88usize,
        concat!("Size of: ", stringify!(rz_pkcs7_signeddata_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_pkcs7_signeddata_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_pkcs7_signeddata_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signeddata_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digestAlgorithms) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signeddata_t),
            "::",
            stringify!(digestAlgorithms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contentInfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signeddata_t),
            "::",
            stringify!(contentInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).certificates) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signeddata_t),
            "::",
            stringify!(certificates)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crls) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signeddata_t),
            "::",
            stringify!(crls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signerinfos) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_signeddata_t),
            "::",
            stringify!(signerinfos)
        )
    );
}
pub type RzPKCS7SignedData = rz_pkcs7_signeddata_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_pkcs7_container_t {
    pub contentType: *mut RzASN1String,
    pub signedData: RzPKCS7SignedData,
}
#[test]
fn bindgen_test_layout_rz_pkcs7_container_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_pkcs7_container_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_pkcs7_container_t>(),
        96usize,
        concat!("Size of: ", stringify!(rz_pkcs7_container_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_pkcs7_container_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_pkcs7_container_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contentType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_container_t),
            "::",
            stringify!(contentType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signedData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pkcs7_container_t),
            "::",
            stringify!(signedData)
        )
    );
}
pub type RzCMS = rz_pkcs7_container_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_cms_attribute_type_optional_value_t {
    pub type_: *mut RzASN1String,
    pub data: *mut RzASN1Binary,
}
#[test]
fn bindgen_test_layout_rz_cms_attribute_type_optional_value_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_cms_attribute_type_optional_value_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_cms_attribute_type_optional_value_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(rz_cms_attribute_type_optional_value_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_cms_attribute_type_optional_value_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_cms_attribute_type_optional_value_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cms_attribute_type_optional_value_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cms_attribute_type_optional_value_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RzSpcAttributeTypeAndOptionalValue = rz_cms_attribute_type_optional_value_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_cms_digest_info_t {
    pub digestAlgorithm: RzX509AlgorithmIdentifier,
    pub digest: *mut RzASN1Binary,
}
#[test]
fn bindgen_test_layout_rz_cms_digest_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_cms_digest_info_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_cms_digest_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_cms_digest_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_cms_digest_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_cms_digest_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digestAlgorithm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cms_digest_info_t),
            "::",
            stringify!(digestAlgorithm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digest) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cms_digest_info_t),
            "::",
            stringify!(digest)
        )
    );
}
pub type RzSpcDigestInfo = rz_cms_digest_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_cms_indirect_data_content_t {
    pub data: RzSpcAttributeTypeAndOptionalValue,
    pub messageDigest: RzSpcDigestInfo,
}
#[test]
fn bindgen_test_layout_rz_cms_indirect_data_content_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_cms_indirect_data_content_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_cms_indirect_data_content_t>(),
        40usize,
        concat!("Size of: ", stringify!(rz_cms_indirect_data_content_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_cms_indirect_data_content_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_cms_indirect_data_content_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cms_indirect_data_content_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messageDigest) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cms_indirect_data_content_t),
            "::",
            stringify!(messageDigest)
        )
    );
}
pub type RzSpcIndirectDataContent = rz_cms_indirect_data_content_t;
extern "C" {
    pub fn rz_pkcs7_cms_parse(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RzCMS;
}
extern "C" {
    pub fn rz_pkcs7_cms_free(container: *mut RzCMS);
}
extern "C" {
    pub fn rz_pkcs7_cms_to_string(container: *mut RzCMS) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_pkcs7_cms_json(container: *mut RzCMS, pj: *mut PJ);
}
extern "C" {
    pub fn rz_pkcs7_spcinfo_parse(cms: *mut RzCMS) -> *mut RzSpcIndirectDataContent;
}
extern "C" {
    pub fn rz_pkcs7_spcinfo_free(spcinfo: *mut RzSpcIndirectDataContent);
}
extern "C" {
    pub fn rz_protobuf_decode(
        buffer: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_ulonglong,
        debug: bool,
    ) -> *mut ::std::os::raw::c_char;
}
pub const rz_subprocess_pipe_create_t_RZ_SUBPROCESS_PIPE_NONE: rz_subprocess_pipe_create_t = 0;
pub const rz_subprocess_pipe_create_t_RZ_SUBPROCESS_PIPE_CREATE: rz_subprocess_pipe_create_t = 1;
pub const rz_subprocess_pipe_create_t_RZ_SUBPROCESS_PIPE_PTY: rz_subprocess_pipe_create_t = 2;
pub const rz_subprocess_pipe_create_t_RZ_SUBPROCESS_PIPE_STDOUT: rz_subprocess_pipe_create_t = 3;
#[doc = " Enum used to determine how pipes should be created, if at all, in the\n subprocess."]
pub type rz_subprocess_pipe_create_t = ::std::os::raw::c_uint;
#[doc = " Enum used to determine how pipes should be created, if at all, in the\n subprocess."]
pub use self::rz_subprocess_pipe_create_t as RzSubprocessPipeCreate;
pub const rz_process_wait_reason_t_RZ_SUBPROCESS_DEAD: rz_process_wait_reason_t = 0;
pub const rz_process_wait_reason_t_RZ_SUBPROCESS_TIMEDOUT: rz_process_wait_reason_t = 1;
pub const rz_process_wait_reason_t_RZ_SUBPROCESS_BYTESREAD: rz_process_wait_reason_t = 2;
pub type rz_process_wait_reason_t = ::std::os::raw::c_uint;
pub use self::rz_process_wait_reason_t as RzSubprocessWaitReason;
pub const rz_subprocess_fork_mode_t_RZ_SUBPROCESS_FORK: rz_subprocess_fork_mode_t = 0;
pub const rz_subprocess_fork_mode_t_RZ_SUBPROCESS_FORKPTY: rz_subprocess_fork_mode_t = 1;
pub type rz_subprocess_fork_mode_t = ::std::os::raw::c_uint;
pub use self::rz_subprocess_fork_mode_t as RzSubprocessForkMode;
#[doc = " Provide results from running a sub-process, like output, return value, etc."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_process_output_t {
    pub out: *mut ::std::os::raw::c_uchar,
    pub out_len: ::std::os::raw::c_int,
    pub err: *mut ::std::os::raw::c_uchar,
    pub err_len: ::std::os::raw::c_int,
    pub ret: ::std::os::raw::c_int,
    pub timeout: bool,
}
#[test]
fn bindgen_test_layout_rz_process_output_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_process_output_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_process_output_t>(),
        40usize,
        concat!("Size of: ", stringify!(rz_process_output_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_process_output_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_process_output_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_process_output_t),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_process_output_t),
            "::",
            stringify!(out_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_process_output_t),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_len) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_process_output_t),
            "::",
            stringify!(err_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ret) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_process_output_t),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_process_output_t),
            "::",
            stringify!(timeout)
        )
    );
}
#[doc = " Provide results from running a sub-process, like output, return value, etc."]
pub type RzSubprocessOutput = rz_process_output_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_pty_t {
    pub master_fd: ::std::os::raw::c_int,
    pub slave_fd: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rz_pty_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_pty_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_pty_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_pty_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_pty_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_pty_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pty_t),
            "::",
            stringify!(master_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_fd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pty_t),
            "::",
            stringify!(slave_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_pty_t),
            "::",
            stringify!(name)
        )
    );
}
pub type RzPty = rz_pty_t;
#[doc = " Specify how the new subprocess should be created."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_subprocess_opt_t {
    pub file: *const ::std::os::raw::c_char,
    pub args: *mut *const ::std::os::raw::c_char,
    pub args_size: usize,
    pub envvars: *mut *const ::std::os::raw::c_char,
    pub envvals: *mut *const ::std::os::raw::c_char,
    pub env_size: usize,
    pub stdin_pipe: RzSubprocessPipeCreate,
    pub stdout_pipe: RzSubprocessPipeCreate,
    pub stderr_pipe: RzSubprocessPipeCreate,
    pub pty: *mut RzPty,
    pub make_raw: bool,
}
#[test]
fn bindgen_test_layout_rz_subprocess_opt_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_subprocess_opt_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_subprocess_opt_t>(),
        80usize,
        concat!("Size of: ", stringify!(rz_subprocess_opt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_subprocess_opt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_subprocess_opt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_subprocess_opt_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_subprocess_opt_t),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_subprocess_opt_t),
            "::",
            stringify!(args_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).envvars) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_subprocess_opt_t),
            "::",
            stringify!(envvars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).envvals) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_subprocess_opt_t),
            "::",
            stringify!(envvals)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).env_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_subprocess_opt_t),
            "::",
            stringify!(env_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stdin_pipe) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_subprocess_opt_t),
            "::",
            stringify!(stdin_pipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stdout_pipe) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_subprocess_opt_t),
            "::",
            stringify!(stdout_pipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stderr_pipe) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_subprocess_opt_t),
            "::",
            stringify!(stderr_pipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pty) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_subprocess_opt_t),
            "::",
            stringify!(pty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).make_raw) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_subprocess_opt_t),
            "::",
            stringify!(make_raw)
        )
    );
}
#[doc = " Specify how the new subprocess should be created."]
pub type RzSubprocessOpt = rz_subprocess_opt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_subprocess_t {
    _unused: [u8; 0],
}
pub type RzSubprocess = rz_subprocess_t;
extern "C" {
    pub fn rz_subprocess_init() -> bool;
}
extern "C" {
    pub fn rz_subprocess_fini();
}
extern "C" {
    pub fn rz_subprocess_start(
        file: *const ::std::os::raw::c_char,
        args: *mut *const ::std::os::raw::c_char,
        args_size: usize,
        envvars: *mut *const ::std::os::raw::c_char,
        envvals: *mut *const ::std::os::raw::c_char,
        env_size: usize,
    ) -> *mut RzSubprocess;
}
extern "C" {
    pub fn rz_subprocess_start_opt(opt: *const RzSubprocessOpt) -> *mut RzSubprocess;
}
extern "C" {
    pub fn rz_subprocess_free(proc_: *mut RzSubprocess);
}
extern "C" {
    pub fn rz_subprocess_wait(
        proc_: *mut RzSubprocess,
        timeout_ms: ::std::os::raw::c_ulonglong,
    ) -> RzSubprocessWaitReason;
}
extern "C" {
    pub fn rz_subprocess_kill(proc_: *mut RzSubprocess);
}
extern "C" {
    pub fn rz_subprocess_ret(proc_: *mut RzSubprocess) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_subprocess_out(
        proc_: *mut RzSubprocess,
        length: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_subprocess_err(
        proc_: *mut RzSubprocess,
        length: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_subprocess_stdin_write(
        proc_: *mut RzSubprocess,
        buf: *const ::std::os::raw::c_uchar,
        buf_size: usize,
    ) -> isize;
}
extern "C" {
    pub fn rz_subprocess_stdout_read(
        proc_: *mut RzSubprocess,
        n: usize,
        timeout_ms: ::std::os::raw::c_ulonglong,
    ) -> *mut RzStrBuf;
}
extern "C" {
    pub fn rz_subprocess_stdout_readline(
        proc_: *mut RzSubprocess,
        timeout_ms: ::std::os::raw::c_ulonglong,
    ) -> *mut RzStrBuf;
}
extern "C" {
    pub fn rz_subprocess_drain(proc_: *mut RzSubprocess) -> *mut RzSubprocessOutput;
}
extern "C" {
    pub fn rz_subprocess_output_free(out: *mut RzSubprocessOutput);
}
extern "C" {
    pub fn rz_subprocess_openpty(
        slave_name: *mut ::std::os::raw::c_char,
        term_params: *mut ::std::os::raw::c_void,
        win_params: *mut ::std::os::raw::c_void,
    ) -> *mut RzPty;
}
extern "C" {
    pub fn rz_subprocess_close_pty(pty: *const RzPty);
}
extern "C" {
    pub fn rz_subprocess_login_tty(pty: *const RzPty) -> bool;
}
extern "C" {
    pub fn rz_subprocess_pty_free(pty: *mut RzPty);
}
extern "C" {
    pub fn rz_calculate_luhn_value(
        data: *const ::std::os::raw::c_char,
        result: *mut ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_version_gittip() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_version_str(program: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_RIZIN: rz_lang_byte_array_type_t = 0;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_ASM: rz_lang_byte_array_type_t = 1;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_BASH: rz_lang_byte_array_type_t = 2;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_C_CPP_BYTES: rz_lang_byte_array_type_t = 3;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_C_CPP_HALFWORDS_BE:
    rz_lang_byte_array_type_t = 4;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_C_CPP_HALFWORDS_LE:
    rz_lang_byte_array_type_t = 5;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_C_CPP_WORDS_BE: rz_lang_byte_array_type_t =
    6;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_C_CPP_WORDS_LE: rz_lang_byte_array_type_t =
    7;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_C_CPP_DOUBLEWORDS_BE:
    rz_lang_byte_array_type_t = 8;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_C_CPP_DOUBLEWORDS_LE:
    rz_lang_byte_array_type_t = 9;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_GOLANG: rz_lang_byte_array_type_t = 10;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_JAVA: rz_lang_byte_array_type_t = 11;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_JSON: rz_lang_byte_array_type_t = 12;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_KOTLIN: rz_lang_byte_array_type_t = 13;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_NODEJS: rz_lang_byte_array_type_t = 14;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_OBJECTIVE_C: rz_lang_byte_array_type_t = 15;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_PYTHON: rz_lang_byte_array_type_t = 16;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_RUST: rz_lang_byte_array_type_t = 17;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_SWIFT: rz_lang_byte_array_type_t = 18;
pub const rz_lang_byte_array_type_t_RZ_LANG_BYTE_ARRAY_YARA: rz_lang_byte_array_type_t = 19;
pub type rz_lang_byte_array_type_t = ::std::os::raw::c_uint;
pub use self::rz_lang_byte_array_type_t as RzLangByteArrayType;
extern "C" {
    pub fn rz_lang_byte_array(
        buffer: *const ::std::os::raw::c_uchar,
        size: usize,
        type_: RzLangByteArrayType,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_util_version() -> *const ::std::os::raw::c_char;
}
pub type cc_t = ::std::os::raw::c_uchar;
pub type speed_t = ::std::os::raw::c_uint;
pub type tcflag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_line: cc_t,
    pub c_cc: [cc_t; 32usize],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
#[test]
fn bindgen_test_layout_termios() {
    const UNINIT: ::std::mem::MaybeUninit<termios> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<termios>(),
        60usize,
        concat!("Size of: ", stringify!(termios))
    );
    assert_eq!(
        ::std::mem::align_of::<termios>(),
        4usize,
        concat!("Alignment of ", stringify!(termios))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_iflag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_iflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_oflag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_oflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_cflag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_cflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_lflag) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_lflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_line) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_cc) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_cc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_ispeed) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_ispeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_ospeed) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_ospeed)
        )
    );
}
extern "C" {
    pub fn cfgetospeed(__termios_p: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfgetispeed(__termios_p: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfsetospeed(__termios_p: *mut termios, __speed: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetispeed(__termios_p: *mut termios, __speed: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetspeed(__termios_p: *mut termios, __speed: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetattr(
        __fd: ::std::os::raw::c_int,
        __termios_p: *mut termios,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsetattr(
        __fd: ::std::os::raw::c_int,
        __optional_actions: ::std::os::raw::c_int,
        __termios_p: *const termios,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfmakeraw(__termios_p: *mut termios);
}
extern "C" {
    pub fn tcsendbreak(
        __fd: ::std::os::raw::c_int,
        __duration: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcdrain(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflush(
        __fd: ::std::os::raw::c_int,
        __queue_selector: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflow(
        __fd: ::std::os::raw::c_int,
        __action: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetsid(__fd: ::std::os::raw::c_int) -> __pid_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_winsize() {
    const UNINIT: ::std::mem::MaybeUninit<winsize> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<winsize>(),
        8usize,
        concat!("Size of: ", stringify!(winsize))
    );
    assert_eq!(
        ::std::mem::align_of::<winsize>(),
        2usize,
        concat!("Alignment of ", stringify!(winsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_row) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_col) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_xpixel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_xpixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_ypixel) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_ypixel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termio {
    pub c_iflag: ::std::os::raw::c_ushort,
    pub c_oflag: ::std::os::raw::c_ushort,
    pub c_cflag: ::std::os::raw::c_ushort,
    pub c_lflag: ::std::os::raw::c_ushort,
    pub c_line: ::std::os::raw::c_uchar,
    pub c_cc: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_termio() {
    const UNINIT: ::std::mem::MaybeUninit<termio> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<termio>(),
        18usize,
        concat!("Size of: ", stringify!(termio))
    );
    assert_eq!(
        ::std::mem::align_of::<termio>(),
        2usize,
        concat!("Alignment of ", stringify!(termio))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_iflag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_iflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_oflag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_oflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_cflag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_cflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_lflag) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_lflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_line) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_cc) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_cc)
        )
    );
}
extern "C" {
    pub fn ioctl(
        __fd: ::std::os::raw::c_int,
        __request: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait(__stat_loc: *mut ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn waitpid(
        __pid: __pid_t,
        __stat_loc: *mut ::std::os::raw::c_int,
        __options: ::std::os::raw::c_int,
    ) -> __pid_t;
}
extern "C" {
    pub fn waitid(
        __idtype: idtype_t,
        __id: __id_t,
        __infop: *mut siginfo_t,
        __options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    _unused: [u8; 0],
}
extern "C" {
    pub fn wait3(
        __stat_loc: *mut ::std::os::raw::c_int,
        __options: ::std::os::raw::c_int,
        __usage: *mut rusage,
    ) -> __pid_t;
}
extern "C" {
    pub fn wait4(
        __pid: __pid_t,
        __stat_loc: *mut ::std::os::raw::c_int,
        __options: ::std::os::raw::c_int,
        __usage: *mut rusage,
    ) -> __pid_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    const UNINIT: ::std::mem::MaybeUninit<iovec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_storage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_padding) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_align) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: _bindgen_ty_18 = 1;
pub const MSG_PEEK: _bindgen_ty_18 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_18 = 4;
pub const MSG_CTRUNC: _bindgen_ty_18 = 8;
pub const MSG_PROXY: _bindgen_ty_18 = 16;
pub const MSG_TRUNC: _bindgen_ty_18 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_18 = 64;
pub const MSG_EOR: _bindgen_ty_18 = 128;
pub const MSG_WAITALL: _bindgen_ty_18 = 256;
pub const MSG_FIN: _bindgen_ty_18 = 512;
pub const MSG_SYN: _bindgen_ty_18 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_18 = 2048;
pub const MSG_RST: _bindgen_ty_18 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_18 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_18 = 16384;
pub const MSG_MORE: _bindgen_ty_18 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_18 = 65536;
pub const MSG_BATCH: _bindgen_ty_18 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_18 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_18 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_18 = 1073741824;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    const UNINIT: ::std::mem::MaybeUninit<msghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_namelen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iov) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iovlen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_control) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_controllen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    const UNINIT: ::std::mem::MaybeUninit<cmsghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_level) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cmsg_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(__cmsg_data)
        )
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_19 = 1;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    const UNINIT: ::std::mem::MaybeUninit<linger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_onoff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_linger) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<osockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_20 = 0;
pub const SHUT_WR: _bindgen_ty_20 = 1;
pub const SHUT_RDWR: _bindgen_ty_20 = 2;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_version() -> *const ::std::os::raw::c_char;
}
pub type RzConsGetSize = ::std::option::Option<
    unsafe extern "C" fn(rows: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
pub type RzConsGetCursor = ::std::option::Option<
    unsafe extern "C" fn(rows: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
pub type RzConsIsBreaked = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type RzConsFlush = ::std::option::Option<unsafe extern "C" fn()>;
pub type RzConsGrepCallback =
    ::std::option::Option<unsafe extern "C" fn(grep: *const ::std::os::raw::c_char)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_cons_bind_t {
    pub get_size: RzConsGetSize,
    pub get_cursor: RzConsGetCursor,
    pub cb_printf: PrintfCallback,
    pub is_breaked: RzConsIsBreaked,
    pub cb_flush: RzConsFlush,
    pub cb_grep: RzConsGrepCallback,
}
#[test]
fn bindgen_test_layout_rz_cons_bind_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_cons_bind_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_cons_bind_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_cons_bind_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_cons_bind_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_cons_bind_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_bind_t),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_cursor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_bind_t),
            "::",
            stringify!(get_cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_printf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_bind_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_breaked) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_bind_t),
            "::",
            stringify!(is_breaked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_flush) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_bind_t),
            "::",
            stringify!(cb_flush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_grep) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_bind_t),
            "::",
            stringify!(cb_grep)
        )
    );
}
pub type RzConsBind = rz_cons_bind_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_cons_grep_t {
    pub strings: [[::std::os::raw::c_char; 64usize]; 10usize],
    pub nstrings: ::std::os::raw::c_int,
    pub str_: *mut ::std::os::raw::c_char,
    pub counter: ::std::os::raw::c_int,
    pub charCounter: bool,
    pub less: ::std::os::raw::c_int,
    pub hud: bool,
    pub human: bool,
    pub json: ::std::os::raw::c_int,
    pub json_path: *mut ::std::os::raw::c_char,
    pub range_line: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub sort: ::std::os::raw::c_int,
    pub sort_row: ::std::os::raw::c_int,
    pub sort_invert: bool,
    pub f_line: ::std::os::raw::c_int,
    pub l_line: ::std::os::raw::c_int,
    pub tokens: [::std::os::raw::c_int; 64usize],
    pub tokens_used: ::std::os::raw::c_int,
    pub amp: ::std::os::raw::c_int,
    pub zoom: ::std::os::raw::c_int,
    pub zoomy: ::std::os::raw::c_int,
    pub neg: ::std::os::raw::c_int,
    pub begin: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
    pub icase: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_cons_grep_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_cons_grep_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_cons_grep_t>(),
        1008usize,
        concat!("Size of: ", stringify!(rz_cons_grep_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_cons_grep_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_cons_grep_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strings) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nstrings) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(nstrings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).charCounter) as usize - ptr as usize },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(charCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).less) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(less)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hud) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(hud)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).human) as usize - ptr as usize },
        669usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(human)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).json) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(json)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).json_path) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(json_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range_line) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(range_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        692usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sort) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(sort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sort_row) as usize - ptr as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(sort_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sort_invert) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(sort_invert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_line) as usize - ptr as usize },
        708usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(f_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_line) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(l_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tokens) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(tokens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tokens_used) as usize - ptr as usize },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(tokens_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp) as usize - ptr as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zoom) as usize - ptr as usize },
        980usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(zoom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zoomy) as usize - ptr as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(zoomy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).neg) as usize - ptr as usize },
        988usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(neg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begin) as usize - ptr as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        996usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icase) as usize - ptr as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_grep_t),
            "::",
            stringify!(icase)
        )
    );
}
pub type RzConsGrep = rz_cons_grep_t;
pub const ALPHA_RESET: _bindgen_ty_21 = 0;
pub const ALPHA_FG: _bindgen_ty_21 = 1;
pub const ALPHA_BG: _bindgen_ty_21 = 2;
pub const ALPHA_FGBG: _bindgen_ty_21 = 3;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub const RZ_CONS_ATTR_BOLD: _bindgen_ty_22 = 2;
pub const RZ_CONS_ATTR_DIM: _bindgen_ty_22 = 4;
pub const RZ_CONS_ATTR_ITALIC: _bindgen_ty_22 = 8;
pub const RZ_CONS_ATTR_UNDERLINE: _bindgen_ty_22 = 16;
pub const RZ_CONS_ATTR_BLINK: _bindgen_ty_22 = 32;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcolor_t {
    pub attr: ::std::os::raw::c_uchar,
    pub a: ::std::os::raw::c_uchar,
    pub r: ::std::os::raw::c_uchar,
    pub g: ::std::os::raw::c_uchar,
    pub b: ::std::os::raw::c_uchar,
    pub r2: ::std::os::raw::c_uchar,
    pub g2: ::std::os::raw::c_uchar,
    pub b2: ::std::os::raw::c_uchar,
    pub id16: ::std::os::raw::c_schar,
}
#[test]
fn bindgen_test_layout_rcolor_t() {
    const UNINIT: ::std::mem::MaybeUninit<rcolor_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcolor_t>(),
        9usize,
        concat!("Size of: ", stringify!(rcolor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rcolor_t>(),
        1usize,
        concat!("Alignment of ", stringify!(rcolor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r2) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(r2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g2) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(g2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b2) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(b2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id16) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(id16)
        )
    );
}
pub type RzColor = rcolor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_cons_palette_t {
    pub b0x00: RzColor,
    pub b0x7f: RzColor,
    pub b0xff: RzColor,
    pub args: RzColor,
    pub bin: RzColor,
    pub btext: RzColor,
    pub call: RzColor,
    pub cjmp: RzColor,
    pub cmp: RzColor,
    pub comment: RzColor,
    pub usercomment: RzColor,
    pub creg: RzColor,
    pub flag: RzColor,
    pub fline: RzColor,
    pub floc: RzColor,
    pub flow: RzColor,
    pub flow2: RzColor,
    pub fname: RzColor,
    pub help: RzColor,
    pub input: RzColor,
    pub invalid: RzColor,
    pub jmp: RzColor,
    pub label: RzColor,
    pub math: RzColor,
    pub mov: RzColor,
    pub nop: RzColor,
    pub num: RzColor,
    pub offset: RzColor,
    pub other: RzColor,
    pub pop: RzColor,
    pub prompt: RzColor,
    pub push: RzColor,
    pub crypto: RzColor,
    pub reg: RzColor,
    pub reset: RzColor,
    pub ret: RzColor,
    pub swi: RzColor,
    pub trap: RzColor,
    pub ucall: RzColor,
    pub ujmp: RzColor,
    pub ai_read: RzColor,
    pub ai_write: RzColor,
    pub ai_exec: RzColor,
    pub ai_seq: RzColor,
    pub ai_ascii: RzColor,
    pub gui_cflow: RzColor,
    pub gui_dataoffset: RzColor,
    pub gui_background: RzColor,
    pub gui_alt_background: RzColor,
    pub gui_border: RzColor,
    pub wordhl: RzColor,
    pub linehl: RzColor,
    pub func_var: RzColor,
    pub func_var_type: RzColor,
    pub func_var_addr: RzColor,
    pub widget_bg: RzColor,
    pub widget_sel: RzColor,
    pub meta: RzColor,
    pub graph_box: RzColor,
    pub graph_box2: RzColor,
    pub graph_box3: RzColor,
    pub graph_box4: RzColor,
    pub graph_true: RzColor,
    pub graph_false: RzColor,
    pub graph_ujump: RzColor,
    pub graph_traced: RzColor,
    pub graph_current: RzColor,
    pub diff_match: RzColor,
    pub diff_unmatch: RzColor,
    pub diff_unknown: RzColor,
    pub diff_new: RzColor,
}
#[test]
fn bindgen_test_layout_rz_cons_palette_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_cons_palette_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_cons_palette_t>(),
        639usize,
        concat!("Size of: ", stringify!(rz_cons_palette_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_cons_palette_t>(),
        1usize,
        concat!("Alignment of ", stringify!(rz_cons_palette_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b0x00) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(b0x00)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b0x7f) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(b0x7f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b0xff) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(b0xff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bin) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(bin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).btext) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(btext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(call)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cjmp) as usize - ptr as usize },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(cjmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmp) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(cmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usercomment) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(usercomment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).creg) as usize - ptr as usize },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(creg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fline) as usize - ptr as usize },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(fline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).floc) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(floc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow) as usize - ptr as usize },
        135usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(flow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(flow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fname) as usize - ptr as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).help) as usize - ptr as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(help)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        171usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invalid) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(invalid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jmp) as usize - ptr as usize },
        189usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(jmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).math) as usize - ptr as usize },
        207usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(math)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mov) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(mov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nop) as usize - ptr as usize },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(nop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        243usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).other) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(other)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pop) as usize - ptr as usize },
        261usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(pop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prompt) as usize - ptr as usize },
        270usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(prompt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).push) as usize - ptr as usize },
        279usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(push)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crypto) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(crypto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg) as usize - ptr as usize },
        297usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        306usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ret) as usize - ptr as usize },
        315usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swi) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(swi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trap) as usize - ptr as usize },
        333usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(trap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucall) as usize - ptr as usize },
        342usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(ucall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ujmp) as usize - ptr as usize },
        351usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(ujmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_read) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(ai_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_write) as usize - ptr as usize },
        369usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(ai_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_exec) as usize - ptr as usize },
        378usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(ai_exec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_seq) as usize - ptr as usize },
        387usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(ai_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_ascii) as usize - ptr as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(ai_ascii)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gui_cflow) as usize - ptr as usize },
        405usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(gui_cflow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gui_dataoffset) as usize - ptr as usize },
        414usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(gui_dataoffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gui_background) as usize - ptr as usize },
        423usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(gui_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gui_alt_background) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(gui_alt_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gui_border) as usize - ptr as usize },
        441usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(gui_border)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wordhl) as usize - ptr as usize },
        450usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(wordhl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linehl) as usize - ptr as usize },
        459usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(linehl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func_var) as usize - ptr as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(func_var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func_var_type) as usize - ptr as usize },
        477usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(func_var_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func_var_addr) as usize - ptr as usize },
        486usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(func_var_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).widget_bg) as usize - ptr as usize },
        495usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(widget_bg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).widget_sel) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(widget_sel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meta) as usize - ptr as usize },
        513usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(meta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_box) as usize - ptr as usize },
        522usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(graph_box)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_box2) as usize - ptr as usize },
        531usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(graph_box2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_box3) as usize - ptr as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(graph_box3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_box4) as usize - ptr as usize },
        549usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(graph_box4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_true) as usize - ptr as usize },
        558usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(graph_true)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_false) as usize - ptr as usize },
        567usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(graph_false)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_ujump) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(graph_ujump)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_traced) as usize - ptr as usize },
        585usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(graph_traced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_current) as usize - ptr as usize },
        594usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(graph_current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff_match) as usize - ptr as usize },
        603usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(diff_match)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff_unmatch) as usize - ptr as usize },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(diff_unmatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff_unknown) as usize - ptr as usize },
        621usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(diff_unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff_new) as usize - ptr as usize },
        630usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_palette_t),
            "::",
            stringify!(diff_new)
        )
    );
}
pub type RzConsPalette = rz_cons_palette_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_cons_printable_palette_t {
    pub b0x00: *mut ::std::os::raw::c_char,
    pub b0x7f: *mut ::std::os::raw::c_char,
    pub b0xff: *mut ::std::os::raw::c_char,
    pub args: *mut ::std::os::raw::c_char,
    pub bin: *mut ::std::os::raw::c_char,
    pub btext: *mut ::std::os::raw::c_char,
    pub call: *mut ::std::os::raw::c_char,
    pub cjmp: *mut ::std::os::raw::c_char,
    pub cmp: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub usercomment: *mut ::std::os::raw::c_char,
    pub creg: *mut ::std::os::raw::c_char,
    pub flag: *mut ::std::os::raw::c_char,
    pub fline: *mut ::std::os::raw::c_char,
    pub floc: *mut ::std::os::raw::c_char,
    pub flow: *mut ::std::os::raw::c_char,
    pub flow2: *mut ::std::os::raw::c_char,
    pub fname: *mut ::std::os::raw::c_char,
    pub help: *mut ::std::os::raw::c_char,
    pub input: *mut ::std::os::raw::c_char,
    pub invalid: *mut ::std::os::raw::c_char,
    pub jmp: *mut ::std::os::raw::c_char,
    pub label: *mut ::std::os::raw::c_char,
    pub math: *mut ::std::os::raw::c_char,
    pub mov: *mut ::std::os::raw::c_char,
    pub nop: *mut ::std::os::raw::c_char,
    pub num: *mut ::std::os::raw::c_char,
    pub offset: *mut ::std::os::raw::c_char,
    pub other: *mut ::std::os::raw::c_char,
    pub pop: *mut ::std::os::raw::c_char,
    pub prompt: *mut ::std::os::raw::c_char,
    pub push: *mut ::std::os::raw::c_char,
    pub crypto: *mut ::std::os::raw::c_char,
    pub reg: *mut ::std::os::raw::c_char,
    pub reset: *mut ::std::os::raw::c_char,
    pub ret: *mut ::std::os::raw::c_char,
    pub swi: *mut ::std::os::raw::c_char,
    pub trap: *mut ::std::os::raw::c_char,
    pub ucall: *mut ::std::os::raw::c_char,
    pub ujmp: *mut ::std::os::raw::c_char,
    pub ai_read: *mut ::std::os::raw::c_char,
    pub ai_write: *mut ::std::os::raw::c_char,
    pub ai_exec: *mut ::std::os::raw::c_char,
    pub ai_seq: *mut ::std::os::raw::c_char,
    pub ai_ascii: *mut ::std::os::raw::c_char,
    pub ai_unmap: *mut ::std::os::raw::c_char,
    pub gui_cflow: *mut ::std::os::raw::c_char,
    pub gui_dataoffset: *mut ::std::os::raw::c_char,
    pub gui_background: *mut ::std::os::raw::c_char,
    pub gui_alt_background: *mut ::std::os::raw::c_char,
    pub gui_border: *mut ::std::os::raw::c_char,
    pub wordhl: *mut ::std::os::raw::c_char,
    pub linehl: *mut ::std::os::raw::c_char,
    pub func_var: *mut ::std::os::raw::c_char,
    pub func_var_type: *mut ::std::os::raw::c_char,
    pub func_var_addr: *mut ::std::os::raw::c_char,
    pub widget_bg: *mut ::std::os::raw::c_char,
    pub widget_sel: *mut ::std::os::raw::c_char,
    pub meta: *mut ::std::os::raw::c_char,
    pub graph_box: *mut ::std::os::raw::c_char,
    pub graph_box2: *mut ::std::os::raw::c_char,
    pub graph_box3: *mut ::std::os::raw::c_char,
    pub graph_box4: *mut ::std::os::raw::c_char,
    pub diff_match: *mut ::std::os::raw::c_char,
    pub diff_unmatch: *mut ::std::os::raw::c_char,
    pub diff_unknown: *mut ::std::os::raw::c_char,
    pub diff_new: *mut ::std::os::raw::c_char,
    pub graph_true: *mut ::std::os::raw::c_char,
    pub graph_false: *mut ::std::os::raw::c_char,
    pub graph_ujump: *mut ::std::os::raw::c_char,
    pub graph_traced: *mut ::std::os::raw::c_char,
    pub graph_current: *mut ::std::os::raw::c_char,
    pub rainbow: *mut *mut ::std::os::raw::c_char,
    pub rainbow_sz: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_cons_printable_palette_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_cons_printable_palette_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_cons_printable_palette_t>(),
        592usize,
        concat!("Size of: ", stringify!(rz_cons_printable_palette_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_cons_printable_palette_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_cons_printable_palette_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b0x00) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(b0x00)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b0x7f) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(b0x7f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b0xff) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(b0xff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bin) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(bin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).btext) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(btext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(call)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cjmp) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(cjmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmp) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(cmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usercomment) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(usercomment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).creg) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(creg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fline) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(fline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).floc) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(floc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(flow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow2) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(flow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fname) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).help) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(help)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invalid) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(invalid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jmp) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(jmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).math) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(math)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mov) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(mov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nop) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(nop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).other) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(other)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pop) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(pop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prompt) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(prompt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).push) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(push)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crypto) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(crypto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ret) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swi) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(swi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trap) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(trap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucall) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(ucall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ujmp) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(ujmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_read) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(ai_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_write) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(ai_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_exec) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(ai_exec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_seq) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(ai_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_ascii) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(ai_ascii)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_unmap) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(ai_unmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gui_cflow) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(gui_cflow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gui_dataoffset) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(gui_dataoffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gui_background) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(gui_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gui_alt_background) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(gui_alt_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gui_border) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(gui_border)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wordhl) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(wordhl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linehl) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(linehl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func_var) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(func_var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func_var_type) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(func_var_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func_var_addr) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(func_var_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).widget_bg) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(widget_bg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).widget_sel) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(widget_sel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meta) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(meta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_box) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(graph_box)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_box2) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(graph_box2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_box3) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(graph_box3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_box4) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(graph_box4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff_match) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(diff_match)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff_unmatch) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(diff_unmatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff_unknown) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(diff_unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff_new) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(diff_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_true) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(graph_true)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_false) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(graph_false)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_ujump) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(graph_ujump)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_traced) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(graph_traced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_current) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(graph_current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rainbow) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(rainbow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rainbow_sz) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_printable_palette_t),
            "::",
            stringify!(rainbow_sz)
        )
    );
}
pub type RzConsPrintablePalette = rz_cons_printable_palette_t;
pub type RzConsEvent =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_cons_canvas_t {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub b: *mut *mut ::std::os::raw::c_char,
    pub blen: *mut ::std::os::raw::c_int,
    pub bsize: *mut ::std::os::raw::c_int,
    pub attr: *const ::std::os::raw::c_char,
    pub attrs: *mut HtUP,
    pub constpool: RzStrConstPool,
    pub sx: ::std::os::raw::c_int,
    pub sy: ::std::os::raw::c_int,
    pub color: ::std::os::raw::c_int,
    pub linemode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_cons_canvas_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_cons_canvas_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_cons_canvas_t>(),
        80usize,
        concat!("Size of: ", stringify!(rz_cons_canvas_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_cons_canvas_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_cons_canvas_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_t),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_t),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_t),
            "::",
            stringify!(blen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bsize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_t),
            "::",
            stringify!(bsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_t),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_t),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constpool) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_t),
            "::",
            stringify!(constpool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sx) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_t),
            "::",
            stringify!(sx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sy) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_t),
            "::",
            stringify!(sy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linemode) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_t),
            "::",
            stringify!(linemode)
        )
    );
}
pub type RzConsCanvas = rz_cons_canvas_t;
pub type RzConsEditorCallback = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        file: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RzConsClickCallback = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RzConsBreakCallback =
    ::std::option::Option<unsafe extern "C" fn(core: *mut ::std::os::raw::c_void)>;
pub type RzConsSleepBeginCallback = ::std::option::Option<
    unsafe extern "C" fn(core: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type RzConsSleepEndCallback = ::std::option::Option<
    unsafe extern "C" fn(core: *mut ::std::os::raw::c_void, user: *mut ::std::os::raw::c_void),
>;
pub type RzConsQueueTaskOneshot = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        task: *mut ::std::os::raw::c_void,
        user: *mut ::std::os::raw::c_void,
    ),
>;
pub type RzConsFunctionKey = ::std::option::Option<
    unsafe extern "C" fn(core: *mut ::std::os::raw::c_void, fkey: ::std::os::raw::c_int),
>;
pub const RzConsColorMode_COLOR_MODE_DISABLED: RzConsColorMode = 0;
pub const RzConsColorMode_COLOR_MODE_16: RzConsColorMode = 1;
pub const RzConsColorMode_COLOR_MODE_256: RzConsColorMode = 2;
pub const RzConsColorMode_COLOR_MODE_16M: RzConsColorMode = 3;
pub type RzConsColorMode = ::std::os::raw::c_uint;
#[doc = "< Windows only: Use console c api for everything (Windows <= 8)"]
pub const RzVirtTermMode_RZ_VIRT_TERM_MODE_DISABLE: RzVirtTermMode = 0;
#[doc = "< Windows only: Use console c api for input, but output on VT (Windows >= 10)"]
pub const RzVirtTermMode_RZ_VIRT_TERM_MODE_OUTPUT_ONLY: RzVirtTermMode = 1;
#[doc = "< All the sequences goes through VT (Windows Terminal, mintty, all OSs)"]
pub const RzVirtTermMode_RZ_VIRT_TERM_MODE_COMPLETE: RzVirtTermMode = 2;
pub type RzVirtTermMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_cons_input_context_t {
    pub readbuffer_length: usize,
    pub readbuffer: *mut ::std::os::raw::c_char,
    pub bufactive: bool,
}
#[test]
fn bindgen_test_layout_rz_cons_input_context_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_cons_input_context_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_cons_input_context_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_cons_input_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_cons_input_context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_cons_input_context_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readbuffer_length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_input_context_t),
            "::",
            stringify!(readbuffer_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readbuffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_input_context_t),
            "::",
            stringify!(readbuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufactive) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_input_context_t),
            "::",
            stringify!(bufactive)
        )
    );
}
pub type RzConsInputContext = rz_cons_input_context_t;
pub const RzConsPalSeekMode_RZ_CONS_PAL_SEEK_PREVIOUS: RzConsPalSeekMode = 0;
pub const RzConsPalSeekMode_RZ_CONS_PAL_SEEK_NEXT: RzConsPalSeekMode = 1;
pub type RzConsPalSeekMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_cons_context_t {
    pub grep: RzConsGrep,
    pub cons_stack: *mut RzStack,
    pub buffer: *mut ::std::os::raw::c_char,
    pub buffer_len: usize,
    pub buffer_sz: usize,
    pub breaked: bool,
    pub break_stack: *mut RzStack,
    pub event_interrupt: RzConsEvent,
    pub event_interrupt_data: *mut ::std::os::raw::c_void,
    pub cmd_depth: ::std::os::raw::c_int,
    pub log_callback: RzLogCallback,
    pub lastOutput: *mut ::std::os::raw::c_char,
    pub lastLength: ::std::os::raw::c_int,
    pub lastMode: bool,
    pub lastEnabled: bool,
    pub is_interactive: bool,
    pub pageable: bool,
    pub noflush: bool,
    pub color_mode: ::std::os::raw::c_int,
    pub cpal: RzConsPalette,
    pub pal: RzConsPrintablePalette,
    pub row: ::std::os::raw::c_int,
    pub col: ::std::os::raw::c_int,
    pub rowcol_calc_start: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_cons_context_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_cons_context_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_cons_context_t>(),
        2360usize,
        concat!("Size of: ", stringify!(rz_cons_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_cons_context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_cons_context_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grep) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(grep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cons_stack) as usize - ptr as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(cons_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_len) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(buffer_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_sz) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(buffer_sz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).breaked) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(breaked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).break_stack) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(break_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_interrupt) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(event_interrupt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_interrupt_data) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(event_interrupt_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_depth) as usize - ptr as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(cmd_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_callback) as usize - ptr as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(log_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastOutput) as usize - ptr as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(lastOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastLength) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(lastLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastMode) as usize - ptr as usize },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(lastMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastEnabled) as usize - ptr as usize },
        1101usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(lastEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_interactive) as usize - ptr as usize },
        1102usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(is_interactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageable) as usize - ptr as usize },
        1103usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(pageable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noflush) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(noflush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_mode) as usize - ptr as usize },
        1108usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(color_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpal) as usize - ptr as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(cpal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pal) as usize - ptr as usize },
        1752usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(pal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row) as usize - ptr as usize },
        2344usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col) as usize - ptr as usize },
        2348usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rowcol_calc_start) as usize - ptr as usize },
        2352usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_context_t),
            "::",
            stringify!(rowcol_calc_start)
        )
    );
}
pub type RzConsContext = rz_cons_context_t;
pub const MouseEvent_MOUSE_NONE: MouseEvent = 0;
pub const MouseEvent_MOUSE_DEFAULT: MouseEvent = 1;
pub const MouseEvent_LEFT_PRESS: MouseEvent = 2;
pub const MouseEvent_LEFT_RELEASE: MouseEvent = 3;
pub const MouseEvent_WHEEL_PRESS: MouseEvent = 4;
pub const MouseEvent_WHEEL_RELEASE: MouseEvent = 5;
pub const MouseEvent_RIGHT_PRESS: MouseEvent = 6;
pub const MouseEvent_RIGHT_RELEASE: MouseEvent = 7;
pub const MouseEvent_WHEEL_UP: MouseEvent = 8;
pub const MouseEvent_WHEEL_DOWN: MouseEvent = 9;
pub type MouseEvent = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_cons_t {
    pub context: *mut RzConsContext,
    pub input: *mut RzConsInputContext,
    pub lastline: *mut ::std::os::raw::c_char,
    pub is_html: bool,
    pub was_html: bool,
    pub lines: ::std::os::raw::c_int,
    pub rows: ::std::os::raw::c_int,
    pub echo: ::std::os::raw::c_int,
    pub columns: ::std::os::raw::c_int,
    pub force_rows: ::std::os::raw::c_int,
    pub force_columns: ::std::os::raw::c_int,
    pub fix_rows: ::std::os::raw::c_int,
    pub fix_columns: ::std::os::raw::c_int,
    pub break_lines: bool,
    pub show_autocomplete_widget: bool,
    pub fdin: *mut FILE,
    pub fdout: ::std::os::raw::c_int,
    pub teefile: *const ::std::os::raw::c_char,
    pub user_fgets: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub user_fgets_user: *mut ::std::os::raw::c_void,
    pub event_resize: RzConsEvent,
    pub event_data: *mut ::std::os::raw::c_void,
    pub mouse_event: MouseEvent,
    pub cb_editor: RzConsEditorCallback,
    pub cb_break: RzConsBreakCallback,
    pub cb_sleep_begin: RzConsSleepBeginCallback,
    pub cb_sleep_end: RzConsSleepEndCallback,
    pub cb_click: RzConsClickCallback,
    pub cb_task_oneshot: RzConsQueueTaskOneshot,
    pub cb_fkey: RzConsFunctionKey,
    pub user: *mut ::std::os::raw::c_void,
    pub term_raw: termios,
    pub term_buf: termios,
    pub num: *mut RzNum,
    pub pager: *mut ::std::os::raw::c_char,
    pub blankline: ::std::os::raw::c_int,
    pub highlight: *mut ::std::os::raw::c_char,
    pub enable_highlight: bool,
    pub null: ::std::os::raw::c_int,
    pub mouse: ::std::os::raw::c_int,
    pub is_wine: ::std::os::raw::c_int,
    pub line: *mut rz_line_t,
    pub vline: *mut *const ::std::os::raw::c_char,
    pub refcnt: ::std::os::raw::c_int,
    pub newline: bool,
    pub vtmode: RzVirtTermMode,
    pub flush: bool,
    pub use_utf8: bool,
    pub use_utf8_curvy: bool,
    pub dotted_lines: bool,
    pub linesleep: ::std::os::raw::c_int,
    pub pagesize: ::std::os::raw::c_int,
    pub break_word: *mut ::std::os::raw::c_char,
    pub break_word_len: ::std::os::raw::c_int,
    pub timeout: ::std::os::raw::c_ulonglong,
    pub grep_color: bool,
    pub grep_highlight: bool,
    pub grep_icase: ::std::os::raw::c_int,
    pub filter: bool,
    pub rgbstr: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *mut ::std::os::raw::c_char,
            sz: usize,
            addr: ::std::os::raw::c_ulonglong,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub click_set: bool,
    pub click_x: ::std::os::raw::c_int,
    pub click_y: ::std::os::raw::c_int,
    pub show_vals: bool,
}
#[test]
fn bindgen_test_layout_rz_cons_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_cons_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_cons_t>(),
        464usize,
        concat!("Size of: ", stringify!(rz_cons_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_cons_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_cons_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastline) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(lastline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_html) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(is_html)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).was_html) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(was_html)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lines) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rows) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).echo) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(echo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).columns) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(columns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_rows) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(force_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_columns) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(force_columns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fix_rows) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(fix_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fix_columns) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(fix_columns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).break_lines) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(break_lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_autocomplete_widget) as usize - ptr as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(show_autocomplete_widget)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fdin) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(fdin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fdout) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(fdout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).teefile) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(teefile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_fgets) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(user_fgets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_fgets_user) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(user_fgets_user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_resize) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(event_resize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_data) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(event_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouse_event) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(mouse_event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_editor) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(cb_editor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_break) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(cb_break)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_sleep_begin) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(cb_sleep_begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_sleep_end) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(cb_sleep_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_click) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(cb_click)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_task_oneshot) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(cb_task_oneshot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_fkey) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(cb_fkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).term_raw) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(term_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).term_buf) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(term_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pager) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(pager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blankline) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(blankline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).highlight) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(highlight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_highlight) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(enable_highlight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).null) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(null)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouse) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(mouse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_wine) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(is_wine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vline) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(vline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcnt) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(refcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newline) as usize - ptr as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(newline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtmode) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(vtmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_utf8) as usize - ptr as usize },
        389usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(use_utf8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_utf8_curvy) as usize - ptr as usize },
        390usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(use_utf8_curvy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dotted_lines) as usize - ptr as usize },
        391usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(dotted_lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linesleep) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(linesleep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pagesize) as usize - ptr as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(pagesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).break_word) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(break_word)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).break_word_len) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(break_word_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grep_color) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(grep_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grep_highlight) as usize - ptr as usize },
        425usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(grep_highlight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grep_icase) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(grep_icase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgbstr) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(rgbstr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).click_set) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(click_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).click_x) as usize - ptr as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(click_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).click_y) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(click_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_vals) as usize - ptr as usize },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_t),
            "::",
            stringify!(show_vals)
        )
    );
}
pub type RzCons = rz_cons_t;
pub const PAL_PROMPT: _bindgen_ty_23 = 0;
pub const PAL_ADDRESS: _bindgen_ty_23 = 1;
pub const PAL_DEFAULT: _bindgen_ty_23 = 2;
pub const PAL_CHANGED: _bindgen_ty_23 = 3;
pub const PAL_JUMP: _bindgen_ty_23 = 4;
pub const PAL_CALL: _bindgen_ty_23 = 5;
pub const PAL_PUSH: _bindgen_ty_23 = 6;
pub const PAL_TRAP: _bindgen_ty_23 = 7;
pub const PAL_CMP: _bindgen_ty_23 = 8;
pub const PAL_RET: _bindgen_ty_23 = 9;
pub const PAL_NOP: _bindgen_ty_23 = 10;
pub const PAL_METADATA: _bindgen_ty_23 = 11;
pub const PAL_HEADER: _bindgen_ty_23 = 12;
pub const PAL_PRINTABLE: _bindgen_ty_23 = 13;
pub const PAL_LINES0: _bindgen_ty_23 = 14;
pub const PAL_LINES1: _bindgen_ty_23 = 15;
pub const PAL_LINES2: _bindgen_ty_23 = 16;
pub const PAL_00: _bindgen_ty_23 = 17;
pub const PAL_7F: _bindgen_ty_23 = 18;
pub const PAL_FF: _bindgen_ty_23 = 19;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const LINE_NONE: _bindgen_ty_24 = 0;
pub const LINE_TRUE: _bindgen_ty_24 = 1;
pub const LINE_FALSE: _bindgen_ty_24 = 2;
pub const LINE_UNCJMP: _bindgen_ty_24 = 3;
pub const LINE_NOSYM_VERT: _bindgen_ty_24 = 4;
pub const LINE_NOSYM_HORIZ: _bindgen_ty_24 = 5;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
pub const RViMode_INSERT_MODE: RViMode = 105;
pub const RViMode_CONTROL_MODE: RViMode = 99;
pub type RViMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_cons_canvas_line_style_t {
    pub color: ::std::os::raw::c_int,
    pub symbol: ::std::os::raw::c_int,
    pub dot_style: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_cons_canvas_line_style_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_cons_canvas_line_style_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_cons_canvas_line_style_t>(),
        12usize,
        concat!("Size of: ", stringify!(rz_cons_canvas_line_style_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_cons_canvas_line_style_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rz_cons_canvas_line_style_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_line_style_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_line_style_t),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dot_style) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_cons_canvas_line_style_t),
            "::",
            stringify!(dot_style)
        )
    );
}
pub type RzCanvasLineStyle = rz_cons_canvas_line_style_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_histogram_options_t {
    pub unicode: bool,
    pub thinline: bool,
    pub legend: bool,
    pub offset: bool,
    pub offpos: ::std::os::raw::c_ulonglong,
    pub cursor: bool,
    pub curpos: ::std::os::raw::c_ulonglong,
    pub color: bool,
    pub pal: *mut RzConsPrintablePalette,
}
#[test]
fn bindgen_test_layout_rz_histogram_options_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_histogram_options_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_histogram_options_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_histogram_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_histogram_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_histogram_options_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unicode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_histogram_options_t),
            "::",
            stringify!(unicode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thinline) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_histogram_options_t),
            "::",
            stringify!(thinline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).legend) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_histogram_options_t),
            "::",
            stringify!(legend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_histogram_options_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offpos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_histogram_options_t),
            "::",
            stringify!(offpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_histogram_options_t),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curpos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_histogram_options_t),
            "::",
            stringify!(curpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_histogram_options_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pal) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_histogram_options_t),
            "::",
            stringify!(pal)
        )
    );
}
pub type RzHistogramOptions = rz_histogram_options_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_bar_options_t {
    pub unicode: bool,
    pub thinline: bool,
    pub legend: bool,
    pub offset: bool,
    pub offpos: ::std::os::raw::c_ulonglong,
    pub cursor: bool,
    pub curpos: ::std::os::raw::c_ulonglong,
    pub color: bool,
}
#[test]
fn bindgen_test_layout_rz_bar_options_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_bar_options_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_bar_options_t>(),
        40usize,
        concat!("Size of: ", stringify!(rz_bar_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_bar_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_bar_options_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unicode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_bar_options_t),
            "::",
            stringify!(unicode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thinline) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_bar_options_t),
            "::",
            stringify!(thinline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).legend) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_bar_options_t),
            "::",
            stringify!(legend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_bar_options_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offpos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_bar_options_t),
            "::",
            stringify!(offpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_bar_options_t),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curpos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_bar_options_t),
            "::",
            stringify!(curpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_bar_options_t),
            "::",
            stringify!(color)
        )
    );
}
pub type RzBarOptions = rz_bar_options_t;
extern "C" {
    pub fn rz_cons_canvas_new(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut RzConsCanvas;
}
extern "C" {
    pub fn rz_cons_canvas_free(c: *mut RzConsCanvas);
}
extern "C" {
    pub fn rz_cons_canvas_clear(c: *mut RzConsCanvas);
}
extern "C" {
    pub fn rz_cons_canvas_print(c: *mut RzConsCanvas);
}
extern "C" {
    pub fn rz_cons_canvas_print_region(c: *mut RzConsCanvas);
}
extern "C" {
    pub fn rz_cons_canvas_to_string(c: *mut RzConsCanvas) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_canvas_write(c: *mut RzConsCanvas, _s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_cons_canvas_gotoxy(
        c: *mut RzConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_cons_canvas_box(
        c: *mut RzConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        color: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rz_cons_canvas_line(
        c: *mut RzConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        style: *mut RzCanvasLineStyle,
    );
}
extern "C" {
    pub fn rz_cons_canvas_line_diagonal(
        c: *mut RzConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        style: *mut RzCanvasLineStyle,
    );
}
extern "C" {
    pub fn rz_cons_canvas_line_square(
        c: *mut RzConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        style: *mut RzCanvasLineStyle,
    );
}
extern "C" {
    pub fn rz_cons_canvas_resize(
        c: *mut RzConsCanvas,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_canvas_fill(
        c: *mut RzConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        ch: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rz_cons_canvas_line_square_defined(
        c: *mut RzConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        style: *mut RzCanvasLineStyle,
        bendpoint: ::std::os::raw::c_int,
        isvert: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rz_cons_canvas_line_back_edge(
        c: *mut RzConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        style: *mut RzCanvasLineStyle,
        ybendpoint1: ::std::os::raw::c_int,
        xbendpoint: ::std::os::raw::c_int,
        ybendpoint2: ::std::os::raw::c_int,
        isvert: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rz_cons_new() -> *mut RzCons;
}
extern "C" {
    pub fn rz_cons_singleton() -> *mut RzCons;
}
extern "C" {
    pub fn rz_cons_free() -> *mut RzCons;
}
extern "C" {
    pub fn rz_cons_lastline(size: *mut ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_lastline_utf8_ansi_len(
        len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_set_click(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int, event: MouseEvent);
}
extern "C" {
    pub fn rz_cons_get_click(x: *mut ::std::os::raw::c_int, y: *mut ::std::os::raw::c_int) -> bool;
}
pub type RzConsBreak =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn rz_cons_is_breaked() -> bool;
}
extern "C" {
    pub fn rz_cons_is_interactive() -> bool;
}
extern "C" {
    pub fn rz_cons_default_context_is_interactive() -> bool;
}
extern "C" {
    pub fn rz_cons_sleep_begin() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rz_cons_sleep_end(user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rz_cons_break_push(cb: RzConsBreak, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rz_cons_break_pop();
}
extern "C" {
    pub fn rz_cons_break_clear();
}
extern "C" {
    pub fn rz_cons_breakword(s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_cons_break_end();
}
extern "C" {
    pub fn rz_cons_break_timeout(timeout: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_cons_pipe_open(
        file: *const ::std::os::raw::c_char,
        fdn: ::std::os::raw::c_int,
        append: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_pipe_close(fd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_cons_push();
}
extern "C" {
    pub fn rz_cons_pop();
}
extern "C" {
    pub fn rz_cons_context_new(parent: *mut RzConsContext) -> *mut RzConsContext;
}
extern "C" {
    pub fn rz_cons_context_free(context: *mut RzConsContext);
}
extern "C" {
    pub fn rz_cons_context_load(context: *mut RzConsContext);
}
extern "C" {
    pub fn rz_cons_context_reset();
}
extern "C" {
    pub fn rz_cons_context_is_main() -> bool;
}
extern "C" {
    pub fn rz_cons_context_break(context: *mut RzConsContext);
}
extern "C" {
    pub fn rz_cons_context_break_push(
        context: *mut RzConsContext,
        cb: RzConsBreak,
        user: *mut ::std::os::raw::c_void,
        sig: bool,
    );
}
extern "C" {
    pub fn rz_cons_context_break_pop(context: *mut RzConsContext, sig: bool);
}
extern "C" {
    pub fn rz_cons_reset();
}
extern "C" {
    pub fn rz_cons_reset_colors();
}
extern "C" {
    pub fn rz_cons_goto_origin_reset();
}
extern "C" {
    pub fn rz_cons_echo(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_cons_zero();
}
extern "C" {
    pub fn rz_cons_highlight(word: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_cons_clear();
}
extern "C" {
    pub fn rz_cons_clear_buffer();
}
extern "C" {
    pub fn rz_cons_clear00();
}
extern "C" {
    pub fn rz_cons_clear_line(err: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_cons_fill_line();
}
extern "C" {
    pub fn rz_cons_gotoxy(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_cons_get_cur_line() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_show_cursor(cursor: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_cons_swap_ground(col: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_drop(n: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn rz_cons_chop();
}
extern "C" {
    pub fn rz_cons_set_raw(b: bool);
}
extern "C" {
    pub fn rz_cons_set_interactive(b: bool);
}
extern "C" {
    pub fn rz_cons_set_last_interactive();
}
extern "C" {
    pub fn rz_cons_set_utf8(b: bool);
}
extern "C" {
    pub fn rz_cons_grep(grep: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_cons_printf(format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_printf_list(format: *const ::std::os::raw::c_char, ap: *mut __va_list_tag);
}
extern "C" {
    pub fn rz_cons_strcat(str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_cons_strcat_at(
        str_: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rz_cons_println(str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_cons_strcat_justify(
        str_: *const ::std::os::raw::c_char,
        j: ::std::os::raw::c_int,
        c: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rz_cons_memcat(
        str_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_newline();
}
extern "C" {
    pub fn rz_cons_filter();
}
extern "C" {
    pub fn rz_cons_flush();
}
extern "C" {
    pub fn rz_cons_set_flush(flush: bool);
}
extern "C" {
    pub fn rz_cons_last();
}
extern "C" {
    pub fn rz_cons_less_str(
        str_: *const ::std::os::raw::c_char,
        exitkeys: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_less();
}
extern "C" {
    pub fn rz_cons_memset(ch: ::std::os::raw::c_char, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_cons_visual_flush();
}
extern "C" {
    pub fn rz_cons_visual_write(buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_cons_is_utf8() -> bool;
}
extern "C" {
    pub fn rz_cons_cmd_help(help: *mut *const ::std::os::raw::c_char, use_color: bool);
}
extern "C" {
    pub fn rz_cons_controlz(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_readchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_readbuffer_readchar(ch: *mut ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_cons_readpush(
        str_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_cons_readflush();
}
extern "C" {
    pub fn rz_cons_switchbuf(active: bool);
}
extern "C" {
    pub fn rz_cons_readchar_timeout(usec: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_any_key(msg: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_eof() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_pal_set(
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_pal_update_event();
}
extern "C" {
    pub fn rz_cons_pal_free(ctx: *mut RzConsContext);
}
extern "C" {
    pub fn rz_cons_pal_init(ctx: *mut RzConsContext);
}
extern "C" {
    pub fn rz_cons_pal_copy(dst: *mut RzConsContext, src: *mut RzConsContext);
}
extern "C" {
    pub fn rz_cons_pal_parse(
        str_: *const ::std::os::raw::c_char,
        outcol: *mut RzColor,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_pal_random();
}
extern "C" {
    pub fn rz_cons_pal_get(key: *const ::std::os::raw::c_char) -> RzColor;
}
extern "C" {
    pub fn rz_cons_pal_get_i(index: ::std::os::raw::c_int) -> RzColor;
}
extern "C" {
    pub fn rz_cons_pal_get_name(index: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_pal_len() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_rgb_parse(
        p: *const ::std::os::raw::c_char,
        r: *mut ::std::os::raw::c_uchar,
        g: *mut ::std::os::raw::c_uchar,
        b: *mut ::std::os::raw::c_uchar,
        a: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_rgb_tostring(
        r: ::std::os::raw::c_uchar,
        g: ::std::os::raw::c_uchar,
        b: ::std::os::raw::c_uchar,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_pal_list(rad: ::std::os::raw::c_int, arg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_cons_pal_show();
}
extern "C" {
    pub fn rz_cons_get_size(rows: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_isatty() -> bool;
}
extern "C" {
    pub fn rz_cons_get_cursor(rows: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_arrow_to_hjkl(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_html_filter(
        ptr: *const ::std::os::raw::c_char,
        newlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_rainbow_get(
        idx: ::std::os::raw::c_int,
        last: ::std::os::raw::c_int,
        bg: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_rainbow_free(ctx: *mut RzConsContext);
}
extern "C" {
    pub fn rz_cons_rainbow_new(ctx: *mut RzConsContext, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_cons_fgets(
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_hud(
        list: *mut RzList,
        prompt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_hud_path(
        path: *const ::std::os::raw::c_char,
        dir: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_hud_string(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_hud_file(f: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_get_buffer() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_get_buffer_dup() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_get_buffer_len() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_grep_help();
}
extern "C" {
    pub fn rz_cons_grep_parsecmd(
        cmd: *mut ::std::os::raw::c_char,
        quotestr: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rz_cons_grep_strip(
        cmd: *mut ::std::os::raw::c_char,
        quotestr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_grep_process(grep: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_cons_grep_line(
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_grepbuf();
}
extern "C" {
    pub fn rz_cons_rgb_init();
}
extern "C" {
    pub fn rz_cons_rgb_str_mode(
        mode: RzConsColorMode,
        outstr: *mut ::std::os::raw::c_char,
        sz: usize,
        rcolor: *const RzColor,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_rgb_str(
        outstr: *mut ::std::os::raw::c_char,
        sz: usize,
        rcolor: *const RzColor,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_rgb_str_off(
        outstr: *mut ::std::os::raw::c_char,
        sz: usize,
        off: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_color(
        fg: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
        g: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rz_cons_color_random(alpha: ::std::os::raw::c_uchar) -> RzColor;
}
extern "C" {
    pub fn rz_cons_invert(set: ::std::os::raw::c_int, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_cons_yesno(
        def: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn rz_cons_input(msg: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_cons_set_cup(enable: bool) -> bool;
}
extern "C" {
    pub fn rz_cons_column(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_cons_get_column() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_cons_message(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_cons_set_title(str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_cons_enable_mouse(enable: bool) -> bool;
}
extern "C" {
    pub fn rz_cons_enable_highlight(enable: bool);
}
extern "C" {
    pub fn rz_cons_bind(bind: *mut RzConsBind);
}
extern "C" {
    pub fn rz_cons_get_rune(ch: ::std::os::raw::c_uchar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_histogram_horizontal(
        opts: *mut RzHistogramOptions,
        data: *const ::std::os::raw::c_uchar,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> *mut RzStrBuf;
}
extern "C" {
    pub fn rz_histogram_vertical(
        opts: *mut RzHistogramOptions,
        data: *const ::std::os::raw::c_uchar,
        width: ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
    ) -> *mut RzStrBuf;
}
extern "C" {
    pub fn rz_progressbar(
        opts: *mut RzBarOptions,
        pc: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
    ) -> *mut RzStrBuf;
}
extern "C" {
    pub fn rz_rangebar(
        opts: *mut RzBarOptions,
        startA: ::std::os::raw::c_ulonglong,
        endA: ::std::os::raw::c_ulonglong,
        min: ::std::os::raw::c_ulonglong,
        max: ::std::os::raw::c_ulonglong,
        width: ::std::os::raw::c_int,
    ) -> *mut RzStrBuf;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_selection_widget_t {
    pub options: *mut *const ::std::os::raw::c_char,
    pub options_len: ::std::os::raw::c_int,
    pub selection: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub scroll: ::std::os::raw::c_int,
    pub complete_common: bool,
    pub direction: bool,
}
#[test]
fn bindgen_test_layout_rz_selection_widget_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_selection_widget_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_selection_widget_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_selection_widget_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_selection_widget_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_selection_widget_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_selection_widget_t),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_selection_widget_t),
            "::",
            stringify!(options_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).selection) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_selection_widget_t),
            "::",
            stringify!(selection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_selection_widget_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_selection_widget_t),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scroll) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_selection_widget_t),
            "::",
            stringify!(scroll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).complete_common) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_selection_widget_t),
            "::",
            stringify!(complete_common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_selection_widget_t),
            "::",
            stringify!(direction)
        )
    );
}
pub type RzSelWidget = rz_selection_widget_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_line_hist_t {
    pub data: *mut *mut ::std::os::raw::c_char,
    pub match_: *mut ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub autosave: ::std::os::raw::c_int,
    pub do_setup_match: bool,
}
#[test]
fn bindgen_test_layout_rz_line_hist_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_line_hist_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_line_hist_t>(),
        40usize,
        concat!("Size of: ", stringify!(rz_line_hist_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_line_hist_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_line_hist_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_hist_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_hist_t),
            "::",
            stringify!(match_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_hist_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_hist_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_hist_t),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autosave) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_hist_t),
            "::",
            stringify!(autosave)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_setup_match) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_hist_t),
            "::",
            stringify!(do_setup_match)
        )
    );
}
pub type RzLineHistory = rz_line_hist_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_line_buffer_t {
    pub data: [::std::os::raw::c_char; 4096usize],
    pub index: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_line_buffer_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_line_buffer_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_line_buffer_t>(),
        4104usize,
        concat!("Size of: ", stringify!(rz_line_buffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_line_buffer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rz_line_buffer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_buffer_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_buffer_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4100usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_buffer_t),
            "::",
            stringify!(length)
        )
    );
}
pub type RzLineBuffer = rz_line_buffer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_hud_t {
    pub current_entry_n: ::std::os::raw::c_int,
    pub top_entry_n: ::std::os::raw::c_int,
    pub activate: ::std::os::raw::c_char,
    pub vi: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_hud_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_hud_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_hud_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_hud_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_hud_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rz_hud_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_entry_n) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_hud_t),
            "::",
            stringify!(current_entry_n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_entry_n) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_hud_t),
            "::",
            stringify!(top_entry_n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_hud_t),
            "::",
            stringify!(activate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vi) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_hud_t),
            "::",
            stringify!(vi)
        )
    );
}
pub type RzLineHud = rz_hud_t;
pub type RzLine = rz_line_t;
pub type RzLineCompletion = rz_line_comp_t;
pub const RzLinePromptType_RZ_LINE_PROMPT_DEFAULT: RzLinePromptType = 0;
pub const RzLinePromptType_RZ_LINE_PROMPT_OFFSET: RzLinePromptType = 1;
pub const RzLinePromptType_RZ_LINE_PROMPT_FILE: RzLinePromptType = 2;
pub type RzLinePromptType = ::std::os::raw::c_uint;
pub type RzLineCompletionCb = ::std::option::Option<
    unsafe extern "C" fn(
        completion: *mut RzLineCompletion,
        buf: *mut RzLineBuffer,
        prompt_type: RzLinePromptType,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_line_comp_t {
    pub opt: bool,
    pub args_limit: usize,
    pub quit: bool,
    pub args: RzPVector,
    pub run: RzLineCompletionCb,
    pub run_user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rz_line_comp_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_line_comp_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_line_comp_t>(),
        88usize,
        concat!("Size of: ", stringify!(rz_line_comp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_line_comp_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_line_comp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_comp_t),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args_limit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_comp_t),
            "::",
            stringify!(args_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_comp_t),
            "::",
            stringify!(quit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_comp_t),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).run) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_comp_t),
            "::",
            stringify!(run)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).run_user) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_comp_t),
            "::",
            stringify!(run_user)
        )
    );
}
#[doc = " Autocompletion callback data."]
pub type RzLineNSCompletion = rz_line_ns_completion_t;
#[doc = " Result returned by a completion callback function. It includes all the\n information required to provide meaningful autocompletion suggestion to the\n user."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_line_ns_completion_result_t {
    #[doc = "< Vector of options that can be used for autocompletion"]
    pub options: RzPVector,
    #[doc = "< Hash table to keep track of duplicated autocompletion suggestions"]
    pub options_ht: *mut HtPP,
    #[doc = "< First byte that was considered for autocompletion. Everything before this will be left intact."]
    pub start: usize,
    #[doc = "< Last byte that was considered for autocompletion. Everything after this will be left intact."]
    pub end: usize,
    #[doc = "< String to place after the only option available is autocompleted. By default a space is used."]
    pub end_string: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rz_line_ns_completion_result_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_line_ns_completion_result_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_line_ns_completion_result_t>(),
        80usize,
        concat!("Size of: ", stringify!(rz_line_ns_completion_result_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_line_ns_completion_result_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_line_ns_completion_result_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_ns_completion_result_t),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options_ht) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_ns_completion_result_t),
            "::",
            stringify!(options_ht)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_ns_completion_result_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_ns_completion_result_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_string) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_ns_completion_result_t),
            "::",
            stringify!(end_string)
        )
    );
}
#[doc = " Result returned by a completion callback function. It includes all the\n information required to provide meaningful autocompletion suggestion to the\n user."]
pub type RzLineNSCompletionResult = rz_line_ns_completion_result_t;
#[doc = " Callback that analyze the current user input and provides options for autocompletion.\n\n \\param buf RLineBuffer pointer, containing all the info about the current user input\n \\param prompt_type Type of prompt used\n \\param user User data that was previously setup in \\p RzLineNSCompletion"]
pub type RzLineNSCompletionCb = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut RzLineBuffer,
        prompt_type: RzLinePromptType,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut RzLineNSCompletionResult,
>;
#[doc = " Autocompletion callback data."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_line_ns_completion_t {
    #[doc = "< Callback function that is called when autocompletion is required. (e.g. TAB is pressed)"]
    pub run: RzLineNSCompletionCb,
    #[doc = "< User data that can be passed to the callback"]
    pub run_user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rz_line_ns_completion_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_line_ns_completion_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_line_ns_completion_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_line_ns_completion_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_line_ns_completion_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_line_ns_completion_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).run) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_ns_completion_t),
            "::",
            stringify!(run)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).run_user) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_ns_completion_t),
            "::",
            stringify!(run_user)
        )
    );
}
pub type RzLineEditorCb = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RzLineHistoryUpCb =
    ::std::option::Option<unsafe extern "C" fn(line: *mut RzLine) -> ::std::os::raw::c_int>;
pub type RzLineHistoryDownCb =
    ::std::option::Option<unsafe extern "C" fn(line: *mut RzLine) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_line_t {
    pub completion: RzLineCompletion,
    pub ns_completion: RzLineNSCompletion,
    pub buffer: RzLineBuffer,
    pub history: RzLineHistory,
    pub undo_vec: *mut RzVector,
    pub sel_widget: *mut RzSelWidget,
    pub cb_history_up: RzLineHistoryUpCb,
    pub cb_history_down: RzLineHistoryDownCb,
    pub cb_editor: RzLineEditorCb,
    pub cb_fkey: RzConsFunctionKey,
    pub echo: ::std::os::raw::c_int,
    pub has_echo: ::std::os::raw::c_int,
    pub prompt: *mut ::std::os::raw::c_char,
    pub kill_ring: *mut RzList,
    pub kill_ring_ptr: ::std::os::raw::c_int,
    pub undo_cursor: ::std::os::raw::c_int,
    pub undo_continue: bool,
    pub clipboard: *mut ::std::os::raw::c_char,
    pub disable: ::std::os::raw::c_int,
    pub user: *mut ::std::os::raw::c_void,
    pub hist_up: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub hist_down: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub contents: *mut ::std::os::raw::c_char,
    pub zerosep: bool,
    pub enable_vi_mode: bool,
    pub vi_mode: ::std::os::raw::c_int,
    pub prompt_mode: bool,
    pub prompt_type: RzLinePromptType,
    pub offset_hist_index: ::std::os::raw::c_int,
    pub file_hist_index: ::std::os::raw::c_int,
    pub hud: *mut RzLineHud,
    pub sdbshell_hist: *mut RzList,
    pub sdbshell_hist_iter: *mut RzListIter,
    pub vtmode: RzVirtTermMode,
}
#[test]
fn bindgen_test_layout_rz_line_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_line_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_line_t>(),
        4440usize,
        concat!("Size of: ", stringify!(rz_line_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_line_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_line_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(completion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ns_completion) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(ns_completion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history) as usize - ptr as usize },
        4208usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(history)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).undo_vec) as usize - ptr as usize },
        4248usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(undo_vec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sel_widget) as usize - ptr as usize },
        4256usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(sel_widget)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_history_up) as usize - ptr as usize },
        4264usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(cb_history_up)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_history_down) as usize - ptr as usize },
        4272usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(cb_history_down)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_editor) as usize - ptr as usize },
        4280usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(cb_editor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_fkey) as usize - ptr as usize },
        4288usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(cb_fkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).echo) as usize - ptr as usize },
        4296usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(echo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_echo) as usize - ptr as usize },
        4300usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(has_echo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prompt) as usize - ptr as usize },
        4304usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(prompt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kill_ring) as usize - ptr as usize },
        4312usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(kill_ring)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kill_ring_ptr) as usize - ptr as usize },
        4320usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(kill_ring_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).undo_cursor) as usize - ptr as usize },
        4324usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(undo_cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).undo_continue) as usize - ptr as usize },
        4328usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(undo_continue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipboard) as usize - ptr as usize },
        4336usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(clipboard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disable) as usize - ptr as usize },
        4344usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(disable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        4352usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hist_up) as usize - ptr as usize },
        4360usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(hist_up)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hist_down) as usize - ptr as usize },
        4368usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(hist_down)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contents) as usize - ptr as usize },
        4376usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(contents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zerosep) as usize - ptr as usize },
        4384usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(zerosep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_vi_mode) as usize - ptr as usize },
        4385usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(enable_vi_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vi_mode) as usize - ptr as usize },
        4388usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(vi_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prompt_mode) as usize - ptr as usize },
        4392usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(prompt_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prompt_type) as usize - ptr as usize },
        4396usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(prompt_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset_hist_index) as usize - ptr as usize },
        4400usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(offset_hist_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_hist_index) as usize - ptr as usize },
        4404usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(file_hist_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hud) as usize - ptr as usize },
        4408usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(hud)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdbshell_hist) as usize - ptr as usize },
        4416usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(sdbshell_hist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdbshell_hist_iter) as usize - ptr as usize },
        4424usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(sdbshell_hist_iter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtmode) as usize - ptr as usize },
        4432usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_line_t),
            "::",
            stringify!(vtmode)
        )
    );
}
extern "C" {
    pub fn rz_line_new() -> *mut RzLine;
}
extern "C" {
    pub fn rz_line_singleton() -> *mut RzLine;
}
extern "C" {
    pub fn rz_line_free();
}
extern "C" {
    pub fn rz_line_get_prompt() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_line_set_prompt(prompt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_line_dietline_init() -> bool;
}
extern "C" {
    pub fn rz_line_clipboard_push(str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_line_hist_free();
}
extern "C" {
    pub fn rz_line_autocomplete();
}
pub type RzLineReadCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        line: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn rz_line_readline() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_line_readline_cb(
        cb: RzLineReadCallback,
        user: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_line_hist_load(file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_line_hist_add(line: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_line_hist_save(file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_line_hist_list() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_line_hist_get(n: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_line_set_hist_callback(
        line: *mut RzLine,
        cb_up: RzLineHistoryUpCb,
        cb_down: RzLineHistoryDownCb,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_line_hist_cmd_up(line: *mut RzLine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_line_hist_cmd_down(line: *mut RzLine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_line_completion_init(completion: *mut RzLineCompletion, args_limit: usize);
}
extern "C" {
    pub fn rz_line_completion_fini(completion: *mut RzLineCompletion);
}
extern "C" {
    pub fn rz_line_completion_push(
        completion: *mut RzLineCompletion,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rz_line_completion_set(
        completion: *mut RzLineCompletion,
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rz_line_completion_clear(completion: *mut RzLineCompletion);
}
extern "C" {
    pub fn rz_line_ns_completion_result_new(
        start: usize,
        end: usize,
        end_string: *const ::std::os::raw::c_char,
    ) -> *mut RzLineNSCompletionResult;
}
extern "C" {
    pub fn rz_line_ns_completion_result_free(res: *mut RzLineNSCompletionResult);
}
extern "C" {
    pub fn rz_line_ns_completion_result_add(
        res: *mut RzLineNSCompletionResult,
        option: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rz_line_ns_completion_result_propose(
        res: *mut RzLineNSCompletionResult,
        option: *const ::std::os::raw::c_char,
        cur: *const ::std::os::raw::c_char,
        cur_len: usize,
    );
}
extern "C" {
    pub fn rz_cons_prompt(
        str_: *const ::std::os::raw::c_char,
        txt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type RzPanelsMenuCallback = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_panels_menu_item {
    pub n_sub: ::std::os::raw::c_int,
    pub selectedIndex: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub sub: *mut *mut rz_panels_menu_item,
    pub cb: RzPanelsMenuCallback,
    pub p: *mut RzPanel,
}
#[test]
fn bindgen_test_layout_rz_panels_menu_item() {
    const UNINIT: ::std::mem::MaybeUninit<rz_panels_menu_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_panels_menu_item>(),
        40usize,
        concat!("Size of: ", stringify!(rz_panels_menu_item))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_panels_menu_item>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_panels_menu_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_sub) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_menu_item),
            "::",
            stringify!(n_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).selectedIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_menu_item),
            "::",
            stringify!(selectedIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_menu_item),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sub) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_menu_item),
            "::",
            stringify!(sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_menu_item),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_menu_item),
            "::",
            stringify!(p)
        )
    );
}
pub type RzPanelsMenuItem = rz_panels_menu_item;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_panels_menu_t {
    pub root: *mut RzPanelsMenuItem,
    pub history: *mut *mut RzPanelsMenuItem,
    pub depth: ::std::os::raw::c_int,
    pub n_refresh: ::std::os::raw::c_int,
    pub refreshPanels: *mut *mut RzPanel,
}
#[test]
fn bindgen_test_layout_rz_panels_menu_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_panels_menu_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_panels_menu_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_panels_menu_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_panels_menu_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_panels_menu_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_menu_t),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_menu_t),
            "::",
            stringify!(history)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_menu_t),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_refresh) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_menu_t),
            "::",
            stringify!(n_refresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refreshPanels) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_menu_t),
            "::",
            stringify!(refreshPanels)
        )
    );
}
pub type RzPanelsMenu = rz_panels_menu_t;
pub const RzPanelsMode_PANEL_MODE_DEFAULT: RzPanelsMode = 0;
pub const RzPanelsMode_PANEL_MODE_MENU: RzPanelsMode = 1;
pub const RzPanelsMode_PANEL_MODE_ZOOM: RzPanelsMode = 2;
pub const RzPanelsMode_PANEL_MODE_WINDOW: RzPanelsMode = 3;
pub const RzPanelsMode_PANEL_MODE_HELP: RzPanelsMode = 4;
pub type RzPanelsMode = ::std::os::raw::c_uint;
pub const RzPanelsLayout_PANEL_LAYOUT_DEFAULT_STATIC: RzPanelsLayout = 0;
pub const RzPanelsLayout_PANEL_LAYOUT_DEFAULT_DYNAMIC: RzPanelsLayout = 1;
pub type RzPanelsLayout = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RModal {
    pub data: *mut RzStrBuf,
    pub pos: RzPanelPos,
    pub idx: ::std::os::raw::c_int,
    pub offset: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RModal() {
    const UNINIT: ::std::mem::MaybeUninit<RModal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RModal>(),
        32usize,
        concat!("Size of: ", stringify!(RModal))
    );
    assert_eq!(
        ::std::mem::align_of::<RModal>(),
        8usize,
        concat!("Alignment of ", stringify!(RModal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RModal),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RModal),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RModal),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RModal),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_panels_t {
    pub can: *mut RzConsCanvas,
    pub panel: *mut *mut RzPanel,
    pub n_panels: ::std::os::raw::c_int,
    pub columnWidth: ::std::os::raw::c_int,
    pub curnode: ::std::os::raw::c_int,
    pub mouse_orig_x: ::std::os::raw::c_int,
    pub mouse_orig_y: ::std::os::raw::c_int,
    pub autoUpdate: bool,
    pub mouse_on_edge_x: bool,
    pub mouse_on_edge_y: bool,
    pub panels_menu: *mut RzPanelsMenu,
    pub db: *mut Sdb,
    pub rotate_db: *mut Sdb,
    pub almighty_db: *mut Sdb,
    pub mht: *mut HtPP,
    pub mode: RzPanelsMode,
    pub prevMode: RzPanelsMode,
    pub layout: RzPanelsLayout,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rz_panels_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_panels_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_panels_t>(),
        104usize,
        concat!("Size of: ", stringify!(rz_panels_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_panels_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_panels_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(can)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).panel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(panel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_panels) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(n_panels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).columnWidth) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(columnWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curnode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(curnode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouse_orig_x) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(mouse_orig_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouse_orig_y) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(mouse_orig_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoUpdate) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(autoUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouse_on_edge_x) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(mouse_on_edge_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouse_on_edge_y) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(mouse_on_edge_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).panels_menu) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(panels_menu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).db) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(db)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotate_db) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(rotate_db)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).almighty_db) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(almighty_db)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mht) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(mht)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prevMode) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(prevMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_t),
            "::",
            stringify!(name)
        )
    );
}
pub type RzPanels = rz_panels_t;
pub const RzPanelsRootState_DEFAULT: RzPanelsRootState = 0;
pub const RzPanelsRootState_ROTATE: RzPanelsRootState = 1;
pub const RzPanelsRootState_DEL: RzPanelsRootState = 2;
pub const RzPanelsRootState_QUIT: RzPanelsRootState = 3;
pub type RzPanelsRootState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_panels_root_t {
    pub n_panels: ::std::os::raw::c_int,
    pub cur_panels: ::std::os::raw::c_int,
    pub pdc_caches: *mut Sdb,
    pub cur_pdc_cache: *mut Sdb,
    pub panels: *mut *mut RzPanels,
    pub root_state: RzPanelsRootState,
}
#[test]
fn bindgen_test_layout_rz_panels_root_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_panels_root_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_panels_root_t>(),
        40usize,
        concat!("Size of: ", stringify!(rz_panels_root_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_panels_root_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_panels_root_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_panels) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_root_t),
            "::",
            stringify!(n_panels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_panels) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_root_t),
            "::",
            stringify!(cur_panels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdc_caches) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_root_t),
            "::",
            stringify!(pdc_caches)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_pdc_cache) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_root_t),
            "::",
            stringify!(cur_pdc_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).panels) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_root_t),
            "::",
            stringify!(panels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_state) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_panels_root_t),
            "::",
            stringify!(root_state)
        )
    );
}
pub type RzPanelsRoot = rz_panels_root_t;
pub type RzCoreCmd = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        cmd: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type RzCoreCmdF = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int,
>;
pub type RzCoreDebugBpHit = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        bp: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type RzCoreDebugSyscallHit =
    ::std::option::Option<unsafe extern "C" fn(core: *mut ::std::os::raw::c_void)>;
pub type RzCoreCmdStr = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        cmd: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RzCoreCmdStrF = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        cmd: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RzCorePuts =
    ::std::option::Option<unsafe extern "C" fn(cmd: *const ::std::os::raw::c_char)>;
pub type RzCoreSetArchBits = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        arch: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
    ),
>;
pub type RzCoreGetName = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        off: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char,
>;
pub type RzCoreGetNameDelta = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        off: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RzCoreSeekArchBits = ::std::option::Option<
    unsafe extern "C" fn(core: *mut ::std::os::raw::c_void, addr: ::std::os::raw::c_ulonglong),
>;
pub type RzCoreConfigGetI = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong,
>;
pub type RzCoreConfigGet = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char,
>;
pub type RzCoreConfigSet = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> bool,
>;
pub type RzCoreConfigSetI = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_ulonglong,
    ) -> bool,
>;
pub type RzCoreNumGet = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong,
>;
pub type RzCoreFlagsGet = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        offset: ::std::os::raw::c_ulonglong,
    ) -> *const RzList,
>;
pub type RzCoreBinApplyInfo = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        binfile: *mut ::std::os::raw::c_void,
        mask: ::std::os::raw::c_uint,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_core_bind_t {
    pub core: *mut ::std::os::raw::c_void,
    pub cmd: RzCoreCmd,
    pub cmdf: RzCoreCmdF,
    pub cmdstr: RzCoreCmdStr,
    pub cmdstrf: RzCoreCmdStrF,
    pub puts: RzCorePuts,
    pub bphit: RzCoreDebugBpHit,
    pub syshit: RzCoreDebugSyscallHit,
    pub setab: RzCoreSetArchBits,
    pub getName: RzCoreGetName,
    pub getNameDelta: RzCoreGetNameDelta,
    pub archbits: RzCoreSeekArchBits,
    pub cfggeti: RzCoreConfigGetI,
    pub cfgGet: RzCoreConfigGet,
    pub cfgSet: RzCoreConfigSet,
    pub cfgSetI: RzCoreConfigSetI,
    pub numGet: RzCoreNumGet,
    pub flagsGet: RzCoreFlagsGet,
    pub applyBinInfo: RzCoreBinApplyInfo,
}
#[test]
fn bindgen_test_layout_rz_core_bind_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_core_bind_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_core_bind_t>(),
        152usize,
        concat!("Size of: ", stringify!(rz_core_bind_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_core_bind_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_core_bind_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).core) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(core)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(cmdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdstr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(cmdstr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdstrf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(cmdstrf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).puts) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(puts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bphit) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(bphit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syshit) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(syshit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setab) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(setab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getName) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(getName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getNameDelta) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(getNameDelta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).archbits) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(archbits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfggeti) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(cfggeti)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfgGet) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(cfgGet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfgSet) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(cfgSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfgSetI) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(cfgSetI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numGet) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(numGet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flagsGet) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(flagsGet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).applyBinInfo) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_core_bind_t),
            "::",
            stringify!(applyBinInfo)
        )
    );
}
pub type RzCoreBind = rz_core_bind_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_skyline_item_t {
    pub itv: RzInterval,
    pub user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rz_skyline_item_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_skyline_item_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_skyline_item_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_skyline_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_skyline_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_skyline_item_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).itv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_skyline_item_t),
            "::",
            stringify!(itv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_skyline_item_t),
            "::",
            stringify!(user)
        )
    );
}
pub type RzSkylineItem = rz_skyline_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_skyline_t {
    pub v: RzVector,
}
#[test]
fn bindgen_test_layout_rz_skyline_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_skyline_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_skyline_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_skyline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_skyline_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_skyline_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_skyline_t),
            "::",
            stringify!(v)
        )
    );
}
pub type RzSkyline = rz_skyline_t;
extern "C" {
    pub fn rz_skyline_add(
        skyline: *mut RzSkyline,
        itv: RzInterval,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rz_skyline_get_item_intersect(
        skyline: *mut RzSkyline,
        addr: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_ulonglong,
    ) -> *const RzSkylineItem;
}
pub const __ptrace_request_PTRACE_TRACEME: __ptrace_request = 0;
pub const __ptrace_request_PTRACE_PEEKTEXT: __ptrace_request = 1;
pub const __ptrace_request_PTRACE_PEEKDATA: __ptrace_request = 2;
pub const __ptrace_request_PTRACE_PEEKUSER: __ptrace_request = 3;
pub const __ptrace_request_PTRACE_POKETEXT: __ptrace_request = 4;
pub const __ptrace_request_PTRACE_POKEDATA: __ptrace_request = 5;
pub const __ptrace_request_PTRACE_POKEUSER: __ptrace_request = 6;
pub const __ptrace_request_PTRACE_CONT: __ptrace_request = 7;
pub const __ptrace_request_PTRACE_KILL: __ptrace_request = 8;
pub const __ptrace_request_PTRACE_SINGLESTEP: __ptrace_request = 9;
pub const __ptrace_request_PTRACE_GETREGS: __ptrace_request = 12;
pub const __ptrace_request_PTRACE_SETREGS: __ptrace_request = 13;
pub const __ptrace_request_PTRACE_GETFPREGS: __ptrace_request = 14;
pub const __ptrace_request_PTRACE_SETFPREGS: __ptrace_request = 15;
pub const __ptrace_request_PTRACE_ATTACH: __ptrace_request = 16;
pub const __ptrace_request_PTRACE_DETACH: __ptrace_request = 17;
pub const __ptrace_request_PTRACE_GETFPXREGS: __ptrace_request = 18;
pub const __ptrace_request_PTRACE_SETFPXREGS: __ptrace_request = 19;
pub const __ptrace_request_PTRACE_SYSCALL: __ptrace_request = 24;
pub const __ptrace_request_PTRACE_GET_THREAD_AREA: __ptrace_request = 25;
pub const __ptrace_request_PTRACE_SET_THREAD_AREA: __ptrace_request = 26;
pub const __ptrace_request_PTRACE_ARCH_PRCTL: __ptrace_request = 30;
pub const __ptrace_request_PTRACE_SYSEMU: __ptrace_request = 31;
pub const __ptrace_request_PTRACE_SYSEMU_SINGLESTEP: __ptrace_request = 32;
pub const __ptrace_request_PTRACE_SINGLEBLOCK: __ptrace_request = 33;
pub const __ptrace_request_PTRACE_SETOPTIONS: __ptrace_request = 16896;
pub const __ptrace_request_PTRACE_GETEVENTMSG: __ptrace_request = 16897;
pub const __ptrace_request_PTRACE_GETSIGINFO: __ptrace_request = 16898;
pub const __ptrace_request_PTRACE_SETSIGINFO: __ptrace_request = 16899;
pub const __ptrace_request_PTRACE_GETREGSET: __ptrace_request = 16900;
pub const __ptrace_request_PTRACE_SETREGSET: __ptrace_request = 16901;
pub const __ptrace_request_PTRACE_SEIZE: __ptrace_request = 16902;
pub const __ptrace_request_PTRACE_INTERRUPT: __ptrace_request = 16903;
pub const __ptrace_request_PTRACE_LISTEN: __ptrace_request = 16904;
pub const __ptrace_request_PTRACE_PEEKSIGINFO: __ptrace_request = 16905;
pub const __ptrace_request_PTRACE_GETSIGMASK: __ptrace_request = 16906;
pub const __ptrace_request_PTRACE_SETSIGMASK: __ptrace_request = 16907;
pub const __ptrace_request_PTRACE_SECCOMP_GET_FILTER: __ptrace_request = 16908;
pub const __ptrace_request_PTRACE_SECCOMP_GET_METADATA: __ptrace_request = 16909;
pub const __ptrace_request_PTRACE_GET_SYSCALL_INFO: __ptrace_request = 16910;
pub type __ptrace_request = ::std::os::raw::c_uint;
pub const __ptrace_setoptions_PTRACE_O_TRACESYSGOOD: __ptrace_setoptions = 1;
pub const __ptrace_setoptions_PTRACE_O_TRACEFORK: __ptrace_setoptions = 2;
pub const __ptrace_setoptions_PTRACE_O_TRACEVFORK: __ptrace_setoptions = 4;
pub const __ptrace_setoptions_PTRACE_O_TRACECLONE: __ptrace_setoptions = 8;
pub const __ptrace_setoptions_PTRACE_O_TRACEEXEC: __ptrace_setoptions = 16;
pub const __ptrace_setoptions_PTRACE_O_TRACEVFORKDONE: __ptrace_setoptions = 32;
pub const __ptrace_setoptions_PTRACE_O_TRACEEXIT: __ptrace_setoptions = 64;
pub const __ptrace_setoptions_PTRACE_O_TRACESECCOMP: __ptrace_setoptions = 128;
pub const __ptrace_setoptions_PTRACE_O_EXITKILL: __ptrace_setoptions = 1048576;
pub const __ptrace_setoptions_PTRACE_O_SUSPEND_SECCOMP: __ptrace_setoptions = 2097152;
pub const __ptrace_setoptions_PTRACE_O_MASK: __ptrace_setoptions = 3145983;
pub type __ptrace_setoptions = ::std::os::raw::c_uint;
pub const __ptrace_eventcodes_PTRACE_EVENT_FORK: __ptrace_eventcodes = 1;
pub const __ptrace_eventcodes_PTRACE_EVENT_VFORK: __ptrace_eventcodes = 2;
pub const __ptrace_eventcodes_PTRACE_EVENT_CLONE: __ptrace_eventcodes = 3;
pub const __ptrace_eventcodes_PTRACE_EVENT_EXEC: __ptrace_eventcodes = 4;
pub const __ptrace_eventcodes_PTRACE_EVENT_VFORK_DONE: __ptrace_eventcodes = 5;
pub const __ptrace_eventcodes_PTRACE_EVENT_EXIT: __ptrace_eventcodes = 6;
pub const __ptrace_eventcodes_PTRACE_EVENT_SECCOMP: __ptrace_eventcodes = 7;
pub const __ptrace_eventcodes_PTRACE_EVENT_STOP: __ptrace_eventcodes = 128;
pub type __ptrace_eventcodes = ::std::os::raw::c_uint;
pub const __ptrace_get_syscall_info_op_PTRACE_SYSCALL_INFO_NONE: __ptrace_get_syscall_info_op = 0;
pub const __ptrace_get_syscall_info_op_PTRACE_SYSCALL_INFO_ENTRY: __ptrace_get_syscall_info_op = 1;
pub const __ptrace_get_syscall_info_op_PTRACE_SYSCALL_INFO_EXIT: __ptrace_get_syscall_info_op = 2;
pub const __ptrace_get_syscall_info_op_PTRACE_SYSCALL_INFO_SECCOMP: __ptrace_get_syscall_info_op =
    3;
pub type __ptrace_get_syscall_info_op = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ptrace_peeksiginfo_args {
    pub off: __uint64_t,
    pub flags: __uint32_t,
    pub nr: __int32_t,
}
#[test]
fn bindgen_test_layout___ptrace_peeksiginfo_args() {
    const UNINIT: ::std::mem::MaybeUninit<__ptrace_peeksiginfo_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ptrace_peeksiginfo_args>(),
        16usize,
        concat!("Size of: ", stringify!(__ptrace_peeksiginfo_args))
    );
    assert_eq!(
        ::std::mem::align_of::<__ptrace_peeksiginfo_args>(),
        8usize,
        concat!("Alignment of ", stringify!(__ptrace_peeksiginfo_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_peeksiginfo_args),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_peeksiginfo_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_peeksiginfo_args),
            "::",
            stringify!(nr)
        )
    );
}
pub const __ptrace_peeksiginfo_flags_PTRACE_PEEKSIGINFO_SHARED: __ptrace_peeksiginfo_flags = 1;
pub type __ptrace_peeksiginfo_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ptrace_seccomp_metadata {
    pub filter_off: __uint64_t,
    pub flags: __uint64_t,
}
#[test]
fn bindgen_test_layout___ptrace_seccomp_metadata() {
    const UNINIT: ::std::mem::MaybeUninit<__ptrace_seccomp_metadata> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ptrace_seccomp_metadata>(),
        16usize,
        concat!("Size of: ", stringify!(__ptrace_seccomp_metadata))
    );
    assert_eq!(
        ::std::mem::align_of::<__ptrace_seccomp_metadata>(),
        8usize,
        concat!("Alignment of ", stringify!(__ptrace_seccomp_metadata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_off) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_seccomp_metadata),
            "::",
            stringify!(filter_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_seccomp_metadata),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __ptrace_syscall_info {
    pub op: __uint8_t,
    pub arch: __uint32_t,
    pub instruction_pointer: __uint64_t,
    pub stack_pointer: __uint64_t,
    pub __bindgen_anon_1: __ptrace_syscall_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ptrace_syscall_info__bindgen_ty_1 {
    pub entry: __ptrace_syscall_info__bindgen_ty_1__bindgen_ty_1,
    pub exit: __ptrace_syscall_info__bindgen_ty_1__bindgen_ty_2,
    pub seccomp: __ptrace_syscall_info__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ptrace_syscall_info__bindgen_ty_1__bindgen_ty_1 {
    pub nr: __uint64_t,
    pub args: [__uint64_t; 6usize],
}
#[test]
fn bindgen_test_layout___ptrace_syscall_info__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_1>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(args)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ptrace_syscall_info__bindgen_ty_1__bindgen_ty_2 {
    pub rval: __int64_t,
    pub is_error: __uint8_t,
}
#[test]
fn bindgen_test_layout___ptrace_syscall_info__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(rval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(is_error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ptrace_syscall_info__bindgen_ty_1__bindgen_ty_3 {
    pub nr: __uint64_t,
    pub args: [__uint64_t; 6usize],
    pub ret_data: __uint32_t,
}
#[test]
fn bindgen_test_layout___ptrace_syscall_info__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_3>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ret_data) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(ret_data)
        )
    );
}
#[test]
fn bindgen_test_layout___ptrace_syscall_info__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__ptrace_syscall_info__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ptrace_syscall_info__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(__ptrace_syscall_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__ptrace_syscall_info__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1),
            "::",
            stringify!(exit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seccomp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_syscall_info__bindgen_ty_1),
            "::",
            stringify!(seccomp)
        )
    );
}
#[test]
fn bindgen_test_layout___ptrace_syscall_info() {
    const UNINIT: ::std::mem::MaybeUninit<__ptrace_syscall_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ptrace_syscall_info>(),
        88usize,
        concat!("Size of: ", stringify!(__ptrace_syscall_info))
    );
    assert_eq!(
        ::std::mem::align_of::<__ptrace_syscall_info>(),
        8usize,
        concat!("Alignment of ", stringify!(__ptrace_syscall_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_syscall_info),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arch) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_syscall_info),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instruction_pointer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_syscall_info),
            "::",
            stringify!(instruction_pointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_pointer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__ptrace_syscall_info),
            "::",
            stringify!(stack_pointer)
        )
    );
}
extern "C" {
    pub fn ptrace(__request: __ptrace_request, ...) -> ::std::os::raw::c_long;
}
pub use self::__ptrace_request as rz_ptrace_request_t;
pub type rz_ptrace_data_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn rz_io_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_io_t {
    pub desc: *mut rz_io_desc_t,
    pub off: ::std::os::raw::c_ulonglong,
    pub bits: ::std::os::raw::c_int,
    pub va: ::std::os::raw::c_int,
    pub ff: ::std::os::raw::c_int,
    pub Oxff: ::std::os::raw::c_int,
    pub addrbytes: usize,
    pub aslr: ::std::os::raw::c_int,
    pub autofd: ::std::os::raw::c_int,
    pub cached: ::std::os::raw::c_int,
    pub cachemode: bool,
    pub p_cache: ::std::os::raw::c_int,
    pub map_ids: *mut RzIDPool,
    pub maps: RzPVector,
    pub map_skyline: RzSkyline,
    pub files: *mut RzIDStorage,
    pub cache: RzPVector,
    pub cache_skyline: RzSkyline,
    pub write_mask: *mut ::std::os::raw::c_uchar,
    pub write_mask_len: ::std::os::raw::c_int,
    pub plugins: *mut RzList,
    pub runprofile: *mut ::std::os::raw::c_char,
    pub envprofile: *mut ::std::os::raw::c_char,
    pub ptrace_wrap: *mut ptrace_wrap_instance_t,
    pub args: *mut ::std::os::raw::c_char,
    pub event: *mut RzEvent,
    pub cb_printf: PrintfCallback,
    pub corebind: RzCoreBind,
}
#[test]
fn bindgen_test_layout_rz_io_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_io_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_io_t>(),
        496usize,
        concat!("Size of: ", stringify!(rz_io_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_io_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_io_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).va) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(va)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ff) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(ff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Oxff) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(Oxff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrbytes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(addrbytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aslr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(aslr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autofd) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(autofd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cached) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(cached)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cachemode) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(cachemode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_cache) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(p_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_ids) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(map_ids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maps) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(maps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_skyline) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(map_skyline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).files) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_skyline) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(cache_skyline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_mask) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(write_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_mask_len) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(write_mask_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plugins) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runprofile) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(runprofile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).envprofile) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(envprofile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptrace_wrap) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(ptrace_wrap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_printf) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corebind) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_t),
            "::",
            stringify!(corebind)
        )
    );
}
pub type RzIO = rz_io_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_io_desc_t {
    pub fd: ::std::os::raw::c_int,
    pub perm: ::std::os::raw::c_int,
    pub uri: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub referer: *mut ::std::os::raw::c_char,
    pub cache: *mut HtUP,
    pub data: *mut ::std::os::raw::c_void,
    pub plugin: *mut rz_io_plugin_t,
    pub io: *mut RzIO,
}
#[test]
fn bindgen_test_layout_rz_io_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_io_desc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_io_desc_t>(),
        64usize,
        concat!("Size of: ", stringify!(rz_io_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_io_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_io_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_desc_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perm) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_desc_t),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uri) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_desc_t),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_desc_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_desc_t),
            "::",
            stringify!(referer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_desc_t),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_desc_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plugin) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_desc_t),
            "::",
            stringify!(plugin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_desc_t),
            "::",
            stringify!(io)
        )
    );
}
pub type RzIODesc = rz_io_desc_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzIODescData {
    pub magic: ::std::os::raw::c_ulonglong,
    pub pid: ::std::os::raw::c_int,
    pub tid: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_RzIODescData() {
    const UNINIT: ::std::mem::MaybeUninit<RzIODescData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzIODescData>(),
        24usize,
        concat!("Size of: ", stringify!(RzIODescData))
    );
    assert_eq!(
        ::std::mem::align_of::<RzIODescData>(),
        8usize,
        concat!("Alignment of ", stringify!(RzIODescData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzIODescData),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzIODescData),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RzIODescData),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RzIODescData),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_io_plugin_t {
    pub name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub author: *const ::std::os::raw::c_char,
    pub license: *const ::std::os::raw::c_char,
    pub widget: *mut ::std::os::raw::c_void,
    pub uris: *const ::std::os::raw::c_char,
    pub listener:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RzIODesc) -> ::std::os::raw::c_int>,
    pub init: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub isdbg: bool,
    pub system: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RzIO,
            fd: *mut RzIODesc,
            arg1: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RzIO,
            arg1: *const ::std::os::raw::c_char,
            perm: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
        ) -> *mut RzIODesc,
    >,
    pub open_many: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RzIO,
            arg1: *const ::std::os::raw::c_char,
            perm: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
        ) -> *mut RzList,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RzIO,
            fd: *mut RzIODesc,
            buf: *mut ::std::os::raw::c_uchar,
            count: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub lseek: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RzIO,
            fd: *mut RzIODesc,
            offset: ::std::os::raw::c_ulonglong,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RzIO,
            fd: *mut RzIODesc,
            buf: *const ::std::os::raw::c_uchar,
            count: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub close:
        ::std::option::Option<unsafe extern "C" fn(desc: *mut RzIODesc) -> ::std::os::raw::c_int>,
    pub is_blockdevice: ::std::option::Option<unsafe extern "C" fn(desc: *mut RzIODesc) -> bool>,
    pub is_chardevice: ::std::option::Option<unsafe extern "C" fn(desc: *mut RzIODesc) -> bool>,
    pub getpid:
        ::std::option::Option<unsafe extern "C" fn(desc: *mut RzIODesc) -> ::std::os::raw::c_int>,
    pub gettid:
        ::std::option::Option<unsafe extern "C" fn(desc: *mut RzIODesc) -> ::std::os::raw::c_int>,
    pub getbase: ::std::option::Option<
        unsafe extern "C" fn(desc: *mut RzIODesc, base: *mut ::std::os::raw::c_ulonglong) -> bool,
    >,
    pub resize: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RzIO,
            fd: *mut RzIODesc,
            size: ::std::os::raw::c_ulonglong,
        ) -> bool,
    >,
    pub accept: ::std::option::Option<
        unsafe extern "C" fn(io: *mut RzIO, desc: *mut RzIODesc, fd: ::std::os::raw::c_int) -> bool,
    >,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RzIO,
            file: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub check: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RzIO,
            arg1: *const ::std::os::raw::c_char,
            many: bool,
        ) -> bool,
    >,
    pub get_buf: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *mut RzIODesc,
            size: *mut ::std::os::raw::c_ulonglong,
        ) -> *mut ::std::os::raw::c_uchar,
    >,
}
#[test]
fn bindgen_test_layout_rz_io_plugin_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_io_plugin_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_io_plugin_t>(),
        216usize,
        concat!("Size of: ", stringify!(rz_io_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_io_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_io_plugin_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).author) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).license) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(license)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).widget) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(widget)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uris) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(uris)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listener) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(listener)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isdbg) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(isdbg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_many) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(open_many)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lseek) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(lseek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_blockdevice) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(is_blockdevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_chardevice) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(is_chardevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getpid) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(getpid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gettid) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(gettid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getbase) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(getbase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resize) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(resize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accept) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(accept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).check) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(check)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_buf) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_plugin_t),
            "::",
            stringify!(get_buf)
        )
    );
}
pub type RzIOPlugin = rz_io_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_io_map_t {
    pub fd: ::std::os::raw::c_int,
    pub perm: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_uint,
    pub itv: RzInterval,
    pub delta: ::std::os::raw::c_ulonglong,
    pub name: *mut ::std::os::raw::c_char,
    #[doc = " @brief Uninterpreted data to be injected from outside\n\n RZ_EVENT_IO_MAP_DEL may be listened to if any freeing is necessary.\n (Hint when part of RzCore: RzCoreIOMapInfo is stored here)"]
    pub user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rz_io_map_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_io_map_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_io_map_t>(),
        56usize,
        concat!("Size of: ", stringify!(rz_io_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_io_map_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_io_map_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_map_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perm) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_map_t),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_map_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).itv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_map_t),
            "::",
            stringify!(itv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_map_t),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_map_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_map_t),
            "::",
            stringify!(user)
        )
    );
}
pub type RzIOMap = rz_io_map_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_io_cache_t {
    pub itv: RzInterval,
    pub data: *mut ::std::os::raw::c_uchar,
    pub odata: *mut ::std::os::raw::c_uchar,
    pub written: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_io_cache_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_io_cache_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_io_cache_t>(),
        40usize,
        concat!("Size of: ", stringify!(rz_io_cache_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_io_cache_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_io_cache_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).itv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_cache_t),
            "::",
            stringify!(itv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_cache_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).odata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_cache_t),
            "::",
            stringify!(odata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).written) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_cache_t),
            "::",
            stringify!(written)
        )
    );
}
pub type RzIOCache = rz_io_cache_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_io_desc_cache_t {
    pub cached: ::std::os::raw::c_ulonglong,
    pub cdata: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_rz_io_desc_cache_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_io_desc_cache_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_io_desc_cache_t>(),
        72usize,
        concat!("Size of: ", stringify!(rz_io_desc_cache_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_io_desc_cache_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_io_desc_cache_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cached) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_desc_cache_t),
            "::",
            stringify!(cached)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdata) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_desc_cache_t),
            "::",
            stringify!(cdata)
        )
    );
}
pub type RzIODescCache = rz_io_desc_cache_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_event_io_write_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub buf: *const ::std::os::raw::c_uchar,
    pub len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_event_io_write_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_event_io_write_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_event_io_write_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_event_io_write_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_event_io_write_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_event_io_write_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_io_write_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_io_write_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_io_write_t),
            "::",
            stringify!(len)
        )
    );
}
pub type RzEventIOWrite = rz_event_io_write_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_event_io_desc_close_t {
    pub desc: *mut RzIODesc,
}
#[test]
fn bindgen_test_layout_rz_event_io_desc_close_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_event_io_desc_close_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_event_io_desc_close_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_event_io_desc_close_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_event_io_desc_close_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_event_io_desc_close_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_io_desc_close_t),
            "::",
            stringify!(desc)
        )
    );
}
pub type RzEventIODescClose = rz_event_io_desc_close_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_event_io_map_del_t {
    pub map: *mut RzIOMap,
}
#[test]
fn bindgen_test_layout_rz_event_io_map_del_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_event_io_map_del_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_event_io_map_del_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_event_io_map_del_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_event_io_map_del_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_event_io_map_del_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_event_io_map_del_t),
            "::",
            stringify!(map)
        )
    );
}
pub type RzEventIOMapDel = rz_event_io_map_del_t;
pub type RzIOGetCurrentFd =
    ::std::option::Option<unsafe extern "C" fn(io: *mut RzIO) -> ::std::os::raw::c_int>;
pub type RzIODescUse =
    ::std::option::Option<unsafe extern "C" fn(io: *mut RzIO, fd: ::std::os::raw::c_int) -> bool>;
pub type RzIODescGet = ::std::option::Option<
    unsafe extern "C" fn(io: *mut RzIO, fd: ::std::os::raw::c_int) -> *mut RzIODesc,
>;
pub type RzIODescSize =
    ::std::option::Option<unsafe extern "C" fn(desc: *mut RzIODesc) -> ::std::os::raw::c_ulonglong>;
pub type RzIOOpen = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RzIODesc,
>;
pub type RzIOOpenAt = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        at: ::std::os::raw::c_ulonglong,
        map: *mut *mut RzIOMap,
    ) -> *mut RzIODesc,
>;
pub type RzIOClose =
    ::std::option::Option<unsafe extern "C" fn(io: *mut RzIO, fd: ::std::os::raw::c_int) -> bool>;
pub type RzIOReadAt = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool,
>;
pub type RzIOWriteAt = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool,
>;
pub type RzIOSystem = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        cmd: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RzIOFdOpen = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RzIOFdClose =
    ::std::option::Option<unsafe extern "C" fn(io: *mut RzIO, fd: ::std::os::raw::c_int) -> bool>;
pub type RzIOFdSeek = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong,
>;
pub type RzIOFdSize = ::std::option::Option<
    unsafe extern "C" fn(io: *mut RzIO, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_ulonglong,
>;
pub type RzIOFdResize = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        newsize: ::std::os::raw::c_ulonglong,
    ) -> bool,
>;
pub type RzIOP2V = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        pa: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong,
>;
pub type RzIOV2P = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        va: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong,
>;
pub type RzIOFdRead = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RzIOFdWrite = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RzIOFdReadAt = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RzIOFdWriteAt = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RzIOFdIsDbg =
    ::std::option::Option<unsafe extern "C" fn(io: *mut RzIO, fd: ::std::os::raw::c_int) -> bool>;
pub type RzIOFdGetName = ::std::option::Option<
    unsafe extern "C" fn(io: *mut RzIO, fd: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
>;
pub type RzIOFdGetMap = ::std::option::Option<
    unsafe extern "C" fn(io: *mut RzIO, fd: ::std::os::raw::c_int) -> *mut RzList,
>;
pub type RzIOFdRemap = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool,
>;
pub type RzIOFdGetBuf = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        size: *mut ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_uchar,
>;
pub type RzIOIsValidOff = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        addr: ::std::os::raw::c_ulonglong,
        hasperm: ::std::os::raw::c_int,
    ) -> bool,
>;
pub type RzIOMapGet = ::std::option::Option<
    unsafe extern "C" fn(io: *mut RzIO, addr: ::std::os::raw::c_ulonglong) -> *mut RzIOMap,
>;
pub type RzIOMapGetPaddr = ::std::option::Option<
    unsafe extern "C" fn(io: *mut RzIO, paddr: ::std::os::raw::c_ulonglong) -> *mut RzIOMap,
>;
pub type RzIOAddrIsMapped = ::std::option::Option<
    unsafe extern "C" fn(io: *mut RzIO, addr: ::std::os::raw::c_ulonglong) -> bool,
>;
pub type RzIOMapAdd = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_ulonglong,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut RzIOMap,
>;
pub type RzIOPtraceFn = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        request: rz_ptrace_request_t,
        pid: pid_t,
        addr: *mut ::std::os::raw::c_void,
        data: rz_ptrace_data_t,
    ) -> ::std::os::raw::c_long,
>;
pub type RzIOPtraceFuncFn = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RzIO,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_io_bind_t {
    pub init: ::std::os::raw::c_int,
    pub io: *mut RzIO,
    pub fd_get_current: RzIOGetCurrentFd,
    pub desc_use: RzIODescUse,
    pub desc_get: RzIODescGet,
    pub desc_size: RzIODescSize,
    pub open: RzIOOpen,
    pub open_at: RzIOOpenAt,
    pub close: RzIOClose,
    pub read_at: RzIOReadAt,
    pub write_at: RzIOWriteAt,
    pub system: RzIOSystem,
    pub fd_open: RzIOFdOpen,
    pub fd_close: RzIOFdClose,
    pub fd_seek: RzIOFdSeek,
    pub fd_size: RzIOFdSize,
    pub fd_resize: RzIOFdResize,
    pub fd_read: RzIOFdRead,
    pub fd_write: RzIOFdWrite,
    pub fd_read_at: RzIOFdReadAt,
    pub fd_write_at: RzIOFdWriteAt,
    pub fd_is_dbg: RzIOFdIsDbg,
    pub fd_get_name: RzIOFdGetName,
    pub fd_get_map: RzIOFdGetMap,
    pub fd_remap: RzIOFdRemap,
    pub fd_getbuf: RzIOFdGetBuf,
    pub is_valid_offset: RzIOIsValidOff,
    pub addr_is_mapped: RzIOAddrIsMapped,
    pub map_get: RzIOMapGet,
    pub map_get_paddr: RzIOMapGetPaddr,
    pub map_add: RzIOMapAdd,
    pub v2p: RzIOV2P,
    pub p2v: RzIOP2V,
    pub ptrace: RzIOPtraceFn,
    pub ptrace_func: RzIOPtraceFuncFn,
}
#[test]
fn bindgen_test_layout_rz_io_bind_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_io_bind_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_io_bind_t>(),
        280usize,
        concat!("Size of: ", stringify!(rz_io_bind_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_io_bind_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_io_bind_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(io)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_get_current) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_get_current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc_use) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(desc_use)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc_get) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(desc_get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(desc_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_at) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(open_at)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_at) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(read_at)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_at) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(write_at)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_open) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_close) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_seek) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_size) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_resize) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_resize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_read) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_write) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_read_at) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_read_at)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_write_at) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_write_at)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_is_dbg) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_is_dbg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_get_name) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_get_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_get_map) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_get_map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_remap) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_remap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_getbuf) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(fd_getbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_valid_offset) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(is_valid_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_is_mapped) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(addr_is_mapped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_get) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(map_get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_get_paddr) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(map_get_paddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_add) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(map_add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2p) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(v2p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p2v) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(p2v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptrace) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(ptrace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptrace_func) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_io_bind_t),
            "::",
            stringify!(ptrace_func)
        )
    );
}
pub type RzIOBind = rz_io_bind_t;
extern "C" {
    pub fn rz_io_map_new(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_ulonglong,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut RzIOMap;
}
extern "C" {
    pub fn rz_io_map_init(io: *mut RzIO);
}
extern "C" {
    pub fn rz_io_map_remap(
        io: *mut RzIO,
        id: ::std::os::raw::c_uint,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_map_remap_fd(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_map_location(
        io: *mut RzIO,
        size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_io_map_exists(io: *mut RzIO, map: *mut RzIOMap) -> bool;
}
extern "C" {
    pub fn rz_io_map_exists_for_id(io: *mut RzIO, id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn rz_io_map_resolve(io: *mut RzIO, id: ::std::os::raw::c_uint) -> *mut RzIOMap;
}
extern "C" {
    pub fn rz_io_map_add(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_ulonglong,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut RzIOMap;
}
extern "C" {
    pub fn rz_io_map_add_batch(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_ulonglong,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut RzIOMap;
}
extern "C" {
    pub fn rz_io_map_get(io: *mut RzIO, addr: ::std::os::raw::c_ulonglong) -> *mut RzIOMap;
}
extern "C" {
    pub fn rz_io_update(io: *mut RzIO);
}
extern "C" {
    pub fn rz_io_map_is_mapped(io: *mut RzIO, addr: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn rz_io_map_get_paddr(io: *mut RzIO, paddr: ::std::os::raw::c_ulonglong) -> *mut RzIOMap;
}
extern "C" {
    pub fn rz_io_map_reset(io: *mut RzIO);
}
extern "C" {
    pub fn rz_io_map_del(io: *mut RzIO, id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn rz_io_map_del_for_fd(io: *mut RzIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn rz_io_map_depriorize(io: *mut RzIO, id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn rz_io_map_priorize(io: *mut RzIO, id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn rz_io_map_priorize_for_fd(io: *mut RzIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn rz_io_map_cleanup(io: *mut RzIO);
}
extern "C" {
    pub fn rz_io_map_fini(io: *mut RzIO);
}
extern "C" {
    pub fn rz_io_map_set_name(map: *mut RzIOMap, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_io_map_del_name(map: *mut RzIOMap);
}
extern "C" {
    pub fn rz_io_map_get_for_fd(io: *mut RzIO, fd: ::std::os::raw::c_int) -> *mut RzList;
}
extern "C" {
    pub fn rz_io_map_resize(
        io: *mut RzIO,
        id: ::std::os::raw::c_uint,
        newsize: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_maps(io: *mut RzIO) -> *mut RzPVector;
}
extern "C" {
    pub fn rz_io_map_next_available(
        io: *mut RzIO,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
        load_align: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_io_map_next_address(
        io: *mut RzIO,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_io_p2v(io: *mut RzIO, pa: ::std::os::raw::c_ulonglong)
        -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_io_v2p(io: *mut RzIO, va: ::std::os::raw::c_ulonglong)
        -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_io_new() -> *mut RzIO;
}
extern "C" {
    pub fn rz_io_init(io: *mut RzIO) -> *mut RzIO;
}
extern "C" {
    pub fn rz_io_open_nomap(
        io: *mut RzIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RzIODesc;
}
extern "C" {
    pub fn rz_io_open(
        io: *mut RzIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RzIODesc;
}
extern "C" {
    pub fn rz_io_open_at(
        io: *mut RzIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        at: ::std::os::raw::c_ulonglong,
        map: *mut *mut RzIOMap,
    ) -> *mut RzIODesc;
}
extern "C" {
    pub fn rz_io_open_many(
        io: *mut RzIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_io_open_buffer(
        io: *mut RzIO,
        b: *mut RzBuffer,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RzIODesc;
}
extern "C" {
    pub fn rz_io_close(io: *mut RzIO) -> bool;
}
extern "C" {
    pub fn rz_io_reopen(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_close_all(io: *mut RzIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_pread_at(
        io: *mut RzIO,
        paddr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_pwrite_at(
        io: *mut RzIO,
        paddr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_vread_at_mapped(
        io: *mut RzIO,
        vaddr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_read_at(
        io: *mut RzIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_read_at_mapped(
        io: *mut RzIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_nread_at(
        io: *mut RzIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_write_at(
        io: *mut RzIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_read(
        io: *mut RzIO,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_write(
        io: *mut RzIO,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_size(io: *mut RzIO) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_io_is_listener(io: *mut RzIO) -> bool;
}
extern "C" {
    pub fn rz_io_system(
        io: *mut RzIO,
        cmd: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_io_resize(io: *mut RzIO, newsize: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn rz_io_extend_at(
        io: *mut RzIO,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_set_write_mask(
        io: *mut RzIO,
        mask: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_bind(io: *mut RzIO, bnd: *mut RzIOBind);
}
extern "C" {
    pub fn rz_io_shift(
        io: *mut RzIO,
        start: ::std::os::raw::c_ulonglong,
        end: ::std::os::raw::c_ulonglong,
        move_: ::std::os::raw::c_longlong,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_seek(
        io: *mut RzIO,
        offset: ::std::os::raw::c_ulonglong,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_io_fini(io: *mut RzIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_free(io: *mut RzIO);
}
extern "C" {
    pub fn rz_io_plugin_init(io: *mut RzIO) -> bool;
}
extern "C" {
    pub fn rz_io_plugin_add(io: *mut RzIO, plugin: *mut RzIOPlugin) -> bool;
}
extern "C" {
    pub fn rz_io_plugin_del(io: *mut RzIO, plugin: *mut RzIOPlugin) -> bool;
}
extern "C" {
    pub fn rz_io_plugin_read(
        desc: *mut RzIODesc,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_plugin_write(
        desc: *mut RzIODesc,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_plugin_read_at(
        desc: *mut RzIODesc,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_plugin_write_at(
        desc: *mut RzIODesc,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_plugin_resolve(
        io: *mut RzIO,
        filename: *const ::std::os::raw::c_char,
        many: bool,
    ) -> *mut RzIOPlugin;
}
extern "C" {
    pub fn rz_io_plugin_get_default(
        io: *mut RzIO,
        filename: *const ::std::os::raw::c_char,
        many: bool,
    ) -> *mut RzIOPlugin;
}
extern "C" {
    pub fn rz_io_desc_new(
        io: *mut RzIO,
        plugin: *mut RzIOPlugin,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RzIODesc;
}
extern "C" {
    pub fn rz_io_desc_open(
        io: *mut RzIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RzIODesc;
}
extern "C" {
    pub fn rz_io_desc_open_plugin(
        io: *mut RzIO,
        plugin: *mut RzIOPlugin,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RzIODesc;
}
extern "C" {
    pub fn rz_io_desc_close(desc: *mut RzIODesc) -> bool;
}
extern "C" {
    pub fn rz_io_desc_read(
        desc: *mut RzIODesc,
        buf: *mut ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_desc_write(
        desc: *mut RzIODesc,
        buf: *const ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_desc_free(desc: *mut RzIODesc);
}
extern "C" {
    pub fn rz_io_desc_add(io: *mut RzIO, desc: *mut RzIODesc) -> bool;
}
extern "C" {
    pub fn rz_io_desc_del(io: *mut RzIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn rz_io_desc_get(io: *mut RzIO, fd: ::std::os::raw::c_int) -> *mut RzIODesc;
}
extern "C" {
    pub fn rz_io_desc_seek(
        desc: *mut RzIODesc,
        offset: ::std::os::raw::c_ulonglong,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_io_desc_resize(desc: *mut RzIODesc, newsize: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn rz_io_desc_size(desc: *mut RzIODesc) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_io_desc_get_buf(
        desc: *mut RzIODesc,
        size: *mut ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_io_desc_is_blockdevice(desc: *mut RzIODesc) -> bool;
}
extern "C" {
    pub fn rz_io_desc_is_chardevice(desc: *mut RzIODesc) -> bool;
}
extern "C" {
    pub fn rz_io_desc_exchange(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        fdx: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_desc_is_dbg(desc: *mut RzIODesc) -> bool;
}
extern "C" {
    pub fn rz_io_desc_get_pid(desc: *mut RzIODesc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_desc_get_tid(desc: *mut RzIODesc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_desc_get_base(desc: *mut RzIODesc, base: *mut ::std::os::raw::c_ulonglong)
        -> bool;
}
extern "C" {
    pub fn rz_io_desc_read_at(
        desc: *mut RzIODesc,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_desc_write_at(
        desc: *mut RzIODesc,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_desc_init(io: *mut RzIO) -> bool;
}
extern "C" {
    pub fn rz_io_desc_fini(io: *mut RzIO) -> bool;
}
extern "C" {
    pub fn rz_io_cache_invalidate(
        io: *mut RzIO,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_cache_at(io: *mut RzIO, addr: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn rz_io_cache_commit(
        io: *mut RzIO,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn rz_io_cache_init(io: *mut RzIO);
}
extern "C" {
    pub fn rz_io_cache_fini(io: *mut RzIO);
}
extern "C" {
    pub fn rz_io_cache_reset(io: *mut RzIO, set: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_io_cache_write(
        io: *mut RzIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_cache_read(
        io: *mut RzIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_desc_cache_init(desc: *mut RzIODesc) -> bool;
}
extern "C" {
    pub fn rz_io_desc_cache_write(
        desc: *mut RzIODesc,
        paddr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_desc_cache_read(
        desc: *mut RzIODesc,
        paddr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_desc_cache_commit(desc: *mut RzIODesc) -> bool;
}
extern "C" {
    pub fn rz_io_desc_cache_cleanup(desc: *mut RzIODesc);
}
extern "C" {
    pub fn rz_io_desc_cache_fini(desc: *mut RzIODesc);
}
extern "C" {
    pub fn rz_io_desc_cache_fini_all(io: *mut RzIO);
}
extern "C" {
    pub fn rz_io_desc_cache_list(desc: *mut RzIODesc) -> *mut RzList;
}
extern "C" {
    pub fn rz_io_fd_open(
        io: *mut RzIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_fd_close(io: *mut RzIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn rz_io_fd_read(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_fd_write(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_fd_seek(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_io_fd_size(io: *mut RzIO, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_io_fd_get_buf(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        size: *mut ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_io_fd_resize(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        newsize: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_fd_is_blockdevice(io: *mut RzIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn rz_io_fd_is_chardevice(io: *mut RzIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn rz_io_fd_read_at(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_fd_write_at(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_fd_is_dbg(io: *mut RzIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn rz_io_fd_get_pid(io: *mut RzIO, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_fd_get_tid(io: *mut RzIO, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_fd_get_base(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
        base: *mut ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_fd_get_name(
        io: *mut RzIO,
        fd: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_io_fd_get_current(io: *mut RzIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_fd_get_next(io: *mut RzIO, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_fd_get_prev(io: *mut RzIO, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_fd_get_highest(io: *mut RzIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_fd_get_lowest(io: *mut RzIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_io_use_fd(io: *mut RzIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn rz_io_is_valid_offset(
        io: *mut RzIO,
        offset: ::std::os::raw::c_ulonglong,
        hasperm: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_addr_is_mapped(io: *mut RzIO, vaddr: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn rz_io_read_i(
        io: *mut RzIO,
        addr: ::std::os::raw::c_ulonglong,
        val: *mut ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
        endian: bool,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_write_i(
        io: *mut RzIO,
        addr: ::std::os::raw::c_ulonglong,
        val: *mut ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
        endian: bool,
    ) -> bool;
}
extern "C" {
    pub fn rz_io_ptrace(
        io: *mut RzIO,
        request: rz_ptrace_request_t,
        pid: pid_t,
        addr: *mut ::std::os::raw::c_void,
        data: rz_ptrace_data_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rz_io_ptrace_fork(
        io: *mut RzIO,
        child_callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        child_callback_user: *mut ::std::os::raw::c_void,
    ) -> pid_t;
}
extern "C" {
    pub fn rz_io_ptrace_func(
        io: *mut RzIO,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub static mut rz_io_plugin_procpid: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_malloc: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_sparse: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_ptrace: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_w32dbg: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_windbg: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_mach: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_debug: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_dmp: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_shm: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_gdb: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_rap: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_http: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_bfdbg: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_w32: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_zip: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_default: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_ihex: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_srec: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_self: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_gzip: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_winkd: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_rzpipe: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_rzweb: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_qnx: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_rzk: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_tcp: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_bochs: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_null: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_ar: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_winedbg: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_gprobe: RzIOPlugin;
}
extern "C" {
    pub static mut rz_io_plugin_fd: RzIOPlugin;
}
extern "C" {
    pub fn rz_reg_version() -> *const ::std::os::raw::c_char;
}
pub const RzRegisterType_RZ_REG_TYPE_GPR: RzRegisterType = 0;
pub const RzRegisterType_RZ_REG_TYPE_DRX: RzRegisterType = 1;
pub const RzRegisterType_RZ_REG_TYPE_FPU: RzRegisterType = 2;
pub const RzRegisterType_RZ_REG_TYPE_MMX: RzRegisterType = 3;
pub const RzRegisterType_RZ_REG_TYPE_XMM: RzRegisterType = 4;
pub const RzRegisterType_RZ_REG_TYPE_YMM: RzRegisterType = 5;
pub const RzRegisterType_RZ_REG_TYPE_FLG: RzRegisterType = 6;
pub const RzRegisterType_RZ_REG_TYPE_SEG: RzRegisterType = 7;
pub const RzRegisterType_RZ_REG_TYPE_SYS: RzRegisterType = 8;
pub const RzRegisterType_RZ_REG_TYPE_SEC: RzRegisterType = 9;
pub const RzRegisterType_RZ_REG_TYPE_VC: RzRegisterType = 10;
pub const RzRegisterType_RZ_REG_TYPE_VCC: RzRegisterType = 11;
pub const RzRegisterType_RZ_REG_TYPE_CTR: RzRegisterType = 12;
pub const RzRegisterType_RZ_REG_TYPE_LAST: RzRegisterType = 13;
pub const RzRegisterType_RZ_REG_TYPE_ANY: RzRegisterType = -1;
pub type RzRegisterType = ::std::os::raw::c_int;
pub const RzRegisterId_RZ_REG_NAME_PC: RzRegisterId = 0;
pub const RzRegisterId_RZ_REG_NAME_SP: RzRegisterId = 1;
pub const RzRegisterId_RZ_REG_NAME_SR: RzRegisterId = 2;
pub const RzRegisterId_RZ_REG_NAME_BP: RzRegisterId = 3;
pub const RzRegisterId_RZ_REG_NAME_LR: RzRegisterId = 4;
pub const RzRegisterId_RZ_REG_NAME_A0: RzRegisterId = 5;
pub const RzRegisterId_RZ_REG_NAME_A1: RzRegisterId = 6;
pub const RzRegisterId_RZ_REG_NAME_A2: RzRegisterId = 7;
pub const RzRegisterId_RZ_REG_NAME_A3: RzRegisterId = 8;
pub const RzRegisterId_RZ_REG_NAME_A4: RzRegisterId = 9;
pub const RzRegisterId_RZ_REG_NAME_A5: RzRegisterId = 10;
pub const RzRegisterId_RZ_REG_NAME_A6: RzRegisterId = 11;
pub const RzRegisterId_RZ_REG_NAME_A7: RzRegisterId = 12;
pub const RzRegisterId_RZ_REG_NAME_A8: RzRegisterId = 13;
pub const RzRegisterId_RZ_REG_NAME_A9: RzRegisterId = 14;
pub const RzRegisterId_RZ_REG_NAME_R0: RzRegisterId = 15;
pub const RzRegisterId_RZ_REG_NAME_R1: RzRegisterId = 16;
pub const RzRegisterId_RZ_REG_NAME_R2: RzRegisterId = 17;
pub const RzRegisterId_RZ_REG_NAME_R3: RzRegisterId = 18;
pub const RzRegisterId_RZ_REG_NAME_ZF: RzRegisterId = 19;
pub const RzRegisterId_RZ_REG_NAME_SF: RzRegisterId = 20;
pub const RzRegisterId_RZ_REG_NAME_CF: RzRegisterId = 21;
pub const RzRegisterId_RZ_REG_NAME_OF: RzRegisterId = 22;
pub const RzRegisterId_RZ_REG_NAME_SN: RzRegisterId = 23;
pub const RzRegisterId_RZ_REG_NAME_LAST: RzRegisterId = 24;
pub type RzRegisterId = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzRegProfileAlias {
    #[doc = "< Register role (PC, Argument etc.)"]
    pub role: RzRegisterId,
    #[doc = "< Alias of register."]
    pub alias: *mut ::std::os::raw::c_char,
    #[doc = "< Real register name of alias."]
    pub reg_name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RzRegProfileAlias() {
    const UNINIT: ::std::mem::MaybeUninit<RzRegProfileAlias> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzRegProfileAlias>(),
        24usize,
        concat!("Size of: ", stringify!(RzRegProfileAlias))
    );
    assert_eq!(
        ::std::mem::align_of::<RzRegProfileAlias>(),
        8usize,
        concat!("Alignment of ", stringify!(RzRegProfileAlias))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).role) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzRegProfileAlias),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzRegProfileAlias),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RzRegProfileAlias),
            "::",
            stringify!(reg_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzRegProfileDef {
    #[doc = "< Reg type."]
    pub type_: RzRegisterType,
    #[doc = "< The arena the register belongs to (e.g. flags belong to gpr; xmm into fpu)."]
    pub arena_type: RzRegisterType,
    #[doc = "< Register name."]
    pub name: *mut ::std::os::raw::c_char,
    #[doc = "< Register size in bits."]
    pub size: ::std::os::raw::c_uint,
    #[doc = "< Packet size of register in tes."]
    pub packed: ::std::os::raw::c_uint,
    #[doc = "< Offset into profile in bits."]
    pub offset: ::std::os::raw::c_uint,
    #[doc = "< Comment about register."]
    pub comment: *mut ::std::os::raw::c_char,
    #[doc = "< String describing the flags of the register."]
    pub flags: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RzRegProfileDef() {
    const UNINIT: ::std::mem::MaybeUninit<RzRegProfileDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzRegProfileDef>(),
        48usize,
        concat!("Size of: ", stringify!(RzRegProfileDef))
    );
    assert_eq!(
        ::std::mem::align_of::<RzRegProfileDef>(),
        8usize,
        concat!("Alignment of ", stringify!(RzRegProfileDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzRegProfileDef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arena_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RzRegProfileDef),
            "::",
            stringify!(arena_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzRegProfileDef),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RzRegProfileDef),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packed) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RzRegProfileDef),
            "::",
            stringify!(packed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RzRegProfileDef),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RzRegProfileDef),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RzRegProfileDef),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzRegProfile {
    pub alias: *mut RzList,
    pub defs: *mut RzList,
}
#[test]
fn bindgen_test_layout_RzRegProfile() {
    const UNINIT: ::std::mem::MaybeUninit<RzRegProfile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzRegProfile>(),
        16usize,
        concat!("Size of: ", stringify!(RzRegProfile))
    );
    assert_eq!(
        ::std::mem::align_of::<RzRegProfile>(),
        8usize,
        concat!("Alignment of ", stringify!(RzRegProfile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzRegProfile),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzRegProfile),
            "::",
            stringify!(defs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_reg_item_t {
    pub name: *mut ::std::os::raw::c_char,
    #[doc = "< Register type."]
    pub type_: RzRegisterType,
    #[doc = "< in bits> 8,16,32,64 ... 128/256"]
    pub size: ::std::os::raw::c_int,
    #[doc = "< Offset into register profile in bits."]
    pub offset: ::std::os::raw::c_int,
    #[doc = "< 0 means no packed register, 1byte pack, 2b pack..."]
    pub packed_size: ::std::os::raw::c_int,
    #[doc = "< Flag for float registers."]
    pub is_float: bool,
    pub flags: *mut ::std::os::raw::c_char,
    #[doc = "< Comment to register."]
    pub comment: *mut ::std::os::raw::c_char,
    #[doc = "< Index in register profile."]
    pub index: ::std::os::raw::c_int,
    #[doc = "< In which arena is this reg living. Usually equals type."]
    pub arena: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_reg_item_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_reg_item_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_reg_item_t>(),
        56usize,
        concat!("Size of: ", stringify!(rz_reg_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_reg_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_reg_item_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_item_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_item_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_item_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_item_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packed_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_item_t),
            "::",
            stringify!(packed_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_float) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_item_t),
            "::",
            stringify!(is_float)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_item_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_item_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_item_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arena) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_item_t),
            "::",
            stringify!(arena)
        )
    );
}
pub type RzRegItem = rz_reg_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_reg_arena_t {
    pub bytes: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_reg_arena_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_reg_arena_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_reg_arena_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_reg_arena_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_reg_arena_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_reg_arena_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_arena_t),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_arena_t),
            "::",
            stringify!(size)
        )
    );
}
pub type RzRegArena = rz_reg_arena_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_reg_set_t {
    pub arena: *mut RzRegArena,
    #[doc = "< RzRegArena"]
    pub pool: *mut RzList,
    #[doc = "< RzRegItem"]
    pub regs: *mut RzList,
    #[doc = "< name:RzRegItem"]
    pub ht_regs: *mut HtPP,
    pub cur: *mut RzListIter,
    #[doc = "< which type of regs has this register set (logic mask with 1 << RZ_REG_TYPE_XXX)"]
    pub maskregstype: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_rz_reg_set_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_reg_set_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_reg_set_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_reg_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_reg_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_reg_set_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arena) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_set_t),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_set_t),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_set_t),
            "::",
            stringify!(regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_regs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_set_t),
            "::",
            stringify!(ht_regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_set_t),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskregstype) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_set_t),
            "::",
            stringify!(maskregstype)
        )
    );
}
pub type RzRegSet = rz_reg_set_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_reg_t {
    pub profile: *mut ::std::os::raw::c_char,
    pub reg_profile_cmt: *mut ::std::os::raw::c_char,
    pub reg_profile_str: *mut ::std::os::raw::c_char,
    pub reg_profile: RzRegProfile,
    pub name: [*mut ::std::os::raw::c_char; 24usize],
    pub regset: [RzRegSet; 13usize],
    pub allregs: *mut RzList,
    pub roregs: *mut RzList,
    pub iters: ::std::os::raw::c_int,
    pub arch: ::std::os::raw::c_int,
    pub bits: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub is_thumb: bool,
    pub big_endian: bool,
}
#[test]
fn bindgen_test_layout_rz_reg_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_reg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_reg_t>(),
        896usize,
        concat!("Size of: ", stringify!(rz_reg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_reg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_reg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_t),
            "::",
            stringify!(profile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_profile_cmt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_t),
            "::",
            stringify!(reg_profile_cmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_profile_str) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_t),
            "::",
            stringify!(reg_profile_str)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_profile) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_t),
            "::",
            stringify!(reg_profile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regset) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_t),
            "::",
            stringify!(regset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allregs) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_t),
            "::",
            stringify!(allregs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roregs) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_t),
            "::",
            stringify!(roregs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iters) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_t),
            "::",
            stringify!(iters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arch) as usize - ptr as usize },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        884usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_thumb) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_t),
            "::",
            stringify!(is_thumb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).big_endian) as usize - ptr as usize },
        889usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_t),
            "::",
            stringify!(big_endian)
        )
    );
}
pub type RzReg = rz_reg_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_reg_flags_t {
    pub s: bool,
    pub z: bool,
    pub a: bool,
    pub c: bool,
    pub o: bool,
    pub p: bool,
}
#[test]
fn bindgen_test_layout_rz_reg_flags_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_reg_flags_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_reg_flags_t>(),
        6usize,
        concat!("Size of: ", stringify!(rz_reg_flags_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_reg_flags_t>(),
        1usize,
        concat!("Alignment of ", stringify!(rz_reg_flags_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_flags_t),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_flags_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_flags_t),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_flags_t),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_flags_t),
            "::",
            stringify!(o)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_reg_flags_t),
            "::",
            stringify!(p)
        )
    );
}
pub type RzRegFlags = rz_reg_flags_t;
extern "C" {
    pub fn rz_reg_free(reg: *mut RzReg);
}
extern "C" {
    pub fn rz_reg_free_internal(reg: *mut RzReg, init: bool);
}
extern "C" {
    pub fn rz_reg_new() -> *mut RzReg;
}
extern "C" {
    pub fn rz_reg_set_name(
        reg: *mut RzReg,
        role: RzRegisterId,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_reg_set_profile_string(
        reg: *mut RzReg,
        profile: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_reg_profile_to_cc(reg: *mut RzReg) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_reg_set_reg_profile(reg: *mut RzReg) -> bool;
}
extern "C" {
    pub fn rz_reg_set_profile(reg: *mut RzReg, profile: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_reg_parse_gdb_profile(
        profile: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_reg_is_readonly(reg: *mut RzReg, item: *mut RzRegItem) -> bool;
}
extern "C" {
    pub fn rz_reg_regset_get(r: *mut RzReg, type_: ::std::os::raw::c_int) -> *mut RzRegSet;
}
extern "C" {
    pub fn rz_reg_getv(
        reg: *mut RzReg,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_reg_getv_by_role_or_name(
        reg: *mut RzReg,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_reg_setv(
        reg: *mut RzReg,
        name: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_reg_32_to_64(
        reg: *mut RzReg,
        rreg32: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_reg_64_to_32(
        reg: *mut RzReg,
        rreg64: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_reg_get_name_by_type(
        reg: *mut RzReg,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_reg_get_type(idx: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_reg_get_name(
        reg: *mut RzReg,
        kind: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_reg_get_by_role(reg: *mut RzReg, role: RzRegisterId) -> *mut RzRegItem;
}
extern "C" {
    pub fn rz_reg_get_role(role: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_reg_role_by_name(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_reg_get(
        reg: *mut RzReg,
        name: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> *mut RzRegItem;
}
extern "C" {
    pub fn rz_reg_get_by_role_or_name(
        reg: *mut RzReg,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RzRegItem;
}
extern "C" {
    pub fn rz_reg_get_list(reg: *mut RzReg, type_: ::std::os::raw::c_int) -> *const RzList;
}
extern "C" {
    pub fn rz_reg_get_at(
        reg: *mut RzReg,
        type_: ::std::os::raw::c_int,
        regsize: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_int,
    ) -> *mut RzRegItem;
}
extern "C" {
    pub fn rz_reg_next_diff(
        reg: *mut RzReg,
        type_: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_uchar,
        buflen: ::std::os::raw::c_int,
        prev_ri: *mut RzRegItem,
        regsize: ::std::os::raw::c_int,
    ) -> *mut RzRegItem;
}
extern "C" {
    pub fn rz_reg_reindex(reg: *mut RzReg);
}
extern "C" {
    pub fn rz_reg_index_get(reg: *mut RzReg, idx: ::std::os::raw::c_int) -> *mut RzRegItem;
}
extern "C" {
    pub fn rz_reg_item_free(item: *mut RzRegItem);
}
extern "C" {
    pub fn rz_reg_type_by_name(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_reg_get_name_idx(type_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_reg_cond_get(reg: *mut RzReg, name: *const ::std::os::raw::c_char) -> *mut RzRegItem;
}
extern "C" {
    pub fn rz_reg_cond_apply(r: *mut RzReg, f: *mut RzRegFlags);
}
extern "C" {
    pub fn rz_reg_cond_set(reg: *mut RzReg, name: *const ::std::os::raw::c_char, val: bool)
        -> bool;
}
extern "C" {
    pub fn rz_reg_cond_get_value(
        r: *mut RzReg,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_reg_cond_bits_set(
        r: *mut RzReg,
        type_: ::std::os::raw::c_int,
        f: *mut RzRegFlags,
        v: bool,
    ) -> bool;
}
extern "C" {
    pub fn rz_reg_cond_bits(
        r: *mut RzReg,
        type_: ::std::os::raw::c_int,
        f: *mut RzRegFlags,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_reg_cond_retrieve(r: *mut RzReg, f: *mut RzRegFlags) -> *mut RzRegFlags;
}
extern "C" {
    pub fn rz_reg_cond(r: *mut RzReg, type_: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_reg_get_bv(reg: *mut RzReg, item: *mut RzRegItem) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_reg_set_bv(reg: *mut RzReg, item: *mut RzRegItem, bv: *const RzBitVector) -> bool;
}
extern "C" {
    pub fn rz_reg_get_value(reg: *mut RzReg, item: *mut RzRegItem) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_reg_set_value(
        reg: *mut RzReg,
        item: *mut RzRegItem,
        value: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_reg_get_value_by_role(
        reg: *mut RzReg,
        role: RzRegisterId,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_reg_set_value_by_role(
        reg: *mut RzReg,
        role: RzRegisterId,
        value: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn rz_reg_get_bytes(
        reg: *mut RzReg,
        type_: ::std::os::raw::c_int,
        size: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_reg_set_bytes(
        reg: *mut RzReg,
        type_: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_reg_read_regs(
        reg: *mut RzReg,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_reg_arena_set_bytes(
        reg: *mut RzReg,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_reg_arena_new(size: usize) -> *mut RzRegArena;
}
extern "C" {
    pub fn rz_reg_arena_free(ra: *mut RzRegArena);
}
extern "C" {
    pub fn rz_reg_fit_arena(reg: *mut RzReg) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_reg_arena_swap(reg: *mut RzReg, copy: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_reg_arena_push(reg: *mut RzReg) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_reg_arena_pop(reg: *mut RzReg);
}
extern "C" {
    pub fn rz_reg_arena_zero(reg: *mut RzReg, type_: RzRegisterType);
}
extern "C" {
    pub fn rz_reg_arena_peek(reg: *mut RzReg) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_reg_arena_poke(reg: *mut RzReg, buf: *const ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn rz_reg_arena_dup(
        reg: *mut RzReg,
        source: *const ::std::os::raw::c_uchar,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_reg_cond_to_string(n: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_reg_cond_from_string(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_reg_arena_shrink(reg: *mut RzReg);
}
extern "C" {
    pub fn rz_reg_filter_items_covered(regs: *const RzList) -> *mut RzList;
}
pub type RzPrintNameCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char,
>;
pub type RzPrintSizeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int,
>;
pub type RzPrintCommentCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RzPrintSectionGet = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char,
>;
pub type RzPrintColorFor = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        addr: ::std::os::raw::c_ulonglong,
        verbose: bool,
    ) -> *const ::std::os::raw::c_char,
>;
pub type RzPrintHasRefs = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char,
>;
pub const RzAsmTokenType_RZ_ASM_TOKEN_UNKNOWN: RzAsmTokenType = 0;
pub const RzAsmTokenType_RZ_ASM_TOKEN_MNEMONIC: RzAsmTokenType = 1;
pub const RzAsmTokenType_RZ_ASM_TOKEN_OPERATOR: RzAsmTokenType = 2;
pub const RzAsmTokenType_RZ_ASM_TOKEN_NUMBER: RzAsmTokenType = 3;
pub const RzAsmTokenType_RZ_ASM_TOKEN_REGISTER: RzAsmTokenType = 4;
pub const RzAsmTokenType_RZ_ASM_TOKEN_SEPARATOR: RzAsmTokenType = 5;
pub const RzAsmTokenType_RZ_ASM_TOKEN_META: RzAsmTokenType = 6;
pub const RzAsmTokenType_RZ_ASM_TOKEN_LAST: RzAsmTokenType = 7;
pub type RzAsmTokenType = ::std::os::raw::c_uint;
#[doc = "  \\brief A token of an asm string holding meta data."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RzAsmToken {
    pub start: usize,
    pub len: usize,
    pub type_: RzAsmTokenType,
    pub val: RzAsmToken__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RzAsmToken__bindgen_ty_1 {
    pub number: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_RzAsmToken__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<RzAsmToken__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzAsmToken__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(RzAsmToken__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RzAsmToken__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RzAsmToken__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzAsmToken__bindgen_ty_1),
            "::",
            stringify!(number)
        )
    );
}
#[test]
fn bindgen_test_layout_RzAsmToken() {
    const UNINIT: ::std::mem::MaybeUninit<RzAsmToken> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzAsmToken>(),
        32usize,
        concat!("Size of: ", stringify!(RzAsmToken))
    );
    assert_eq!(
        ::std::mem::align_of::<RzAsmToken>(),
        8usize,
        concat!("Alignment of ", stringify!(RzAsmToken))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzAsmToken),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzAsmToken),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RzAsmToken),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RzAsmToken),
            "::",
            stringify!(val)
        )
    );
}
#[doc = " \\brief An tokenized asm string."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzAsmTokenString {
    #[doc = "< RzAnalysisOpType. Mnemonic color depends on this."]
    pub op_type: ::std::os::raw::c_uint,
    pub str_: *mut RzStrBuf,
    pub tokens: *mut RzVector,
}
#[test]
fn bindgen_test_layout_RzAsmTokenString() {
    const UNINIT: ::std::mem::MaybeUninit<RzAsmTokenString> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzAsmTokenString>(),
        24usize,
        concat!("Size of: ", stringify!(RzAsmTokenString))
    );
    assert_eq!(
        ::std::mem::align_of::<RzAsmTokenString>(),
        8usize,
        concat!("Alignment of ", stringify!(RzAsmTokenString))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzAsmTokenString),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzAsmTokenString),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tokens) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RzAsmTokenString),
            "::",
            stringify!(tokens)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzAsmParseParam {
    #[doc = "< Array of reg sets used to lookup register names during parsing."]
    pub reg_sets: *const RzRegSet,
    #[doc = "< Analysis op type (see: _RzAnalysisOpType) of the token string to parse."]
    pub ana_op_type: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RzAsmParseParam() {
    const UNINIT: ::std::mem::MaybeUninit<RzAsmParseParam> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzAsmParseParam>(),
        16usize,
        concat!("Size of: ", stringify!(RzAsmParseParam))
    );
    assert_eq!(
        ::std::mem::align_of::<RzAsmParseParam>(),
        8usize,
        concat!("Alignment of ", stringify!(RzAsmParseParam))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_sets) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzAsmParseParam),
            "::",
            stringify!(reg_sets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ana_op_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzAsmParseParam),
            "::",
            stringify!(ana_op_type)
        )
    );
}
#[doc = " \\brief Pattern for a asm string token."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzAsmTokenPattern {
    pub type_: RzAsmTokenType,
    pub pattern: *mut ::std::os::raw::c_char,
    pub regex: *mut RzRegex,
}
#[test]
fn bindgen_test_layout_RzAsmTokenPattern() {
    const UNINIT: ::std::mem::MaybeUninit<RzAsmTokenPattern> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzAsmTokenPattern>(),
        24usize,
        concat!("Size of: ", stringify!(RzAsmTokenPattern))
    );
    assert_eq!(
        ::std::mem::align_of::<RzAsmTokenPattern>(),
        8usize,
        concat!("Alignment of ", stringify!(RzAsmTokenPattern))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzAsmTokenPattern),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pattern) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzAsmTokenPattern),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RzAsmTokenPattern),
            "::",
            stringify!(regex)
        )
    );
}
#[doc = " \\brief Holds certain options to alter the colorizing of asm strings.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RzPrintAsmColorOpts {
    pub reset_bg: bool,
    pub hl_addr: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_RzPrintAsmColorOpts() {
    const UNINIT: ::std::mem::MaybeUninit<RzPrintAsmColorOpts> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzPrintAsmColorOpts>(),
        16usize,
        concat!("Size of: ", stringify!(RzPrintAsmColorOpts))
    );
    assert_eq!(
        ::std::mem::align_of::<RzPrintAsmColorOpts>(),
        8usize,
        concat!("Alignment of ", stringify!(RzPrintAsmColorOpts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset_bg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzPrintAsmColorOpts),
            "::",
            stringify!(reset_bg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hl_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RzPrintAsmColorOpts),
            "::",
            stringify!(hl_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_print_zoom_t {
    pub buf: *mut ::std::os::raw::c_uchar,
    pub from: ::std::os::raw::c_ulonglong,
    pub to: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rz_print_zoom_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_print_zoom_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_print_zoom_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_print_zoom_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_print_zoom_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_print_zoom_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_zoom_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_zoom_t),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_zoom_t),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_zoom_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_zoom_t),
            "::",
            stringify!(mode)
        )
    );
}
pub type RzPrintZoom = rz_print_zoom_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_print_t {
    pub user: *mut ::std::os::raw::c_void,
    pub iob: RzIOBind,
    pub pava: bool,
    pub coreb: RzCoreBind,
    pub cfmt: *const ::std::os::raw::c_char,
    pub datefmt: [::std::os::raw::c_char; 32usize],
    pub datezone: ::std::os::raw::c_int,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub cb_printf: PrintfCallback,
    pub cb_eprintf: PrintfCallback,
    pub cb_color: ::std::option::Option<
        unsafe extern "C" fn(
            idx: ::std::os::raw::c_int,
            last: ::std::os::raw::c_int,
            bg: bool,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub scr_prompt: bool,
    pub disasm: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_void,
            addr: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_int,
    >,
    pub oprintf: PrintfCallback,
    pub big_endian: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub limit: ::std::os::raw::c_int,
    pub bits: ::std::os::raw::c_int,
    pub histblock: bool,
    pub cur_enabled: bool,
    pub cur: ::std::os::raw::c_int,
    pub ocur: ::std::os::raw::c_int,
    pub cols: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub seggrn: ::std::os::raw::c_int,
    pub use_comments: bool,
    pub addrmod: ::std::os::raw::c_int,
    pub col: ::std::os::raw::c_int,
    pub stride: ::std::os::raw::c_int,
    pub bytespace: ::std::os::raw::c_int,
    pub pairs: ::std::os::raw::c_int,
    pub resetbg: bool,
    pub zoom: *mut RzPrintZoom,
    pub offname: RzPrintNameCallback,
    pub offsize: RzPrintSizeCallback,
    pub colorfor: RzPrintColorFor,
    pub hasrefs: RzPrintHasRefs,
    pub get_comments: RzPrintCommentCallback,
    pub get_section_name: RzPrintSectionGet,
    pub sdb_types: *mut Sdb,
    pub cons: *mut RzCons,
    pub consbind: RzConsBind,
    pub num: *mut RzNum,
    pub reg: *mut RzReg,
    pub get_register: ::std::option::Option<
        unsafe extern "C" fn(
            reg: *mut RzReg,
            name: *const ::std::os::raw::c_char,
            type_: ::std::os::raw::c_int,
        ) -> *mut RzRegItem,
    >,
    pub get_register_value: ::std::option::Option<
        unsafe extern "C" fn(reg: *mut RzReg, item: *mut RzRegItem) -> ::std::os::raw::c_ulonglong,
    >,
    pub exists_var: ::std::option::Option<
        unsafe extern "C" fn(
            print: *mut rz_print_t,
            func_addr: ::std::os::raw::c_ulonglong,
            str_: *mut ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub esc_bslash: bool,
    pub wide_offsets: bool,
    pub strconv_mode: *const ::std::os::raw::c_char,
    pub io_unalloc_ch: ::std::os::raw::c_char,
    pub show_offset: bool,
    pub calc_row_offsets: bool,
    pub row_offsets: *mut ::std::os::raw::c_uint,
    pub row_offsets_sz: ::std::os::raw::c_int,
    pub vflush: bool,
    pub screen_bounds: ::std::os::raw::c_ulonglong,
    pub rows: ::std::os::raw::c_int,
    #[doc = "< Coloize options for asm strings."]
    pub colorize_opts: RzPrintAsmColorOpts,
}
#[test]
fn bindgen_test_layout_rz_print_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_print_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_print_t>(),
        856usize,
        concat!("Size of: ", stringify!(rz_print_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_print_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_print_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iob) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(iob)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pava) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(pava)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coreb) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(coreb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfmt) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(cfmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datefmt) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(datefmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datezone) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(datezone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_printf) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_eprintf) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(cb_eprintf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_color) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(cb_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scr_prompt) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(scr_prompt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disasm) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(disasm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oprintf) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(oprintf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).big_endian) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(big_endian)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).histblock) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(histblock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_enabled) as usize - ptr as usize },
        569usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(cur_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur) as usize - ptr as usize },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ocur) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(ocur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cols) as usize - ptr as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seggrn) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(seggrn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_comments) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(use_comments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrmod) as usize - ptr as usize },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(addrmod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytespace) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(bytespace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pairs) as usize - ptr as usize },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(pairs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resetbg) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(resetbg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zoom) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(zoom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offname) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(offname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offsize) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(offsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorfor) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(colorfor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasrefs) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(hasrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_comments) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(get_comments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_section_name) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(get_section_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdb_types) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(sdb_types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cons) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(cons)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).consbind) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(consbind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_register) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(get_register)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_register_value) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(get_register_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exists_var) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(exists_var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esc_bslash) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(esc_bslash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wide_offsets) as usize - ptr as usize },
        785usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(wide_offsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strconv_mode) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(strconv_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_unalloc_ch) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(io_unalloc_ch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_offset) as usize - ptr as usize },
        801usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(show_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calc_row_offsets) as usize - ptr as usize },
        802usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(calc_row_offsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_offsets) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(row_offsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_offsets_sz) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(row_offsets_sz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vflush) as usize - ptr as usize },
        820usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(vflush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).screen_bounds) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(screen_bounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rows) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorize_opts) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_print_t),
            "::",
            stringify!(colorize_opts)
        )
    );
}
pub type RzPrint = rz_print_t;
pub type RzPrintIsInterruptedCallback = ::std::option::Option<unsafe extern "C" fn() -> bool>;
extern "C" {
    pub fn rz_print_is_interrupted() -> bool;
}
extern "C" {
    pub fn rz_print_set_is_interrupted_cb(cb: RzPrintIsInterruptedCallback);
}
extern "C" {
    pub fn rz_print_hexpair(
        p: *mut RzPrint,
        str_: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_print_new() -> *mut RzPrint;
}
extern "C" {
    pub fn rz_print_free(p: *mut RzPrint) -> *mut RzPrint;
}
extern "C" {
    pub fn rz_print_set_flags(p: *mut RzPrint, _flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_print_addr(p: *mut RzPrint, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn rz_print_section_str(
        p: *mut RzPrint,
        at: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_print_hexii(
        p: *mut RzPrint,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rz_print_hexdump_str(
        p: *mut RzPrint,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        base: ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        zoomsz: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_print_jsondump_str(
        p: *mut RzPrint,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        wordsize: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_print_hexdiff_str(
        p: *mut RzPrint,
        aa: ::std::os::raw::c_ulonglong,
        _a: *const ::std::os::raw::c_uchar,
        ba: ::std::os::raw::c_ulonglong,
        _b: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        scndcol: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_print_bytes(
        p: *mut RzPrint,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rz_print_byte(
        p: *mut RzPrint,
        fmt: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
        ch: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rz_print_byte_color(
        p: *mut RzPrint,
        ch: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_print_raw(
        p: *mut RzPrint,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rz_print_have_cursor(
        p: *mut RzPrint,
        cur: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_print_cursor_pointer(
        p: *mut RzPrint,
        cur: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rz_print_cursor(
        p: *mut RzPrint,
        cur: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        set: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rz_print_get_cursor(p: *mut RzPrint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_print_set_cursor(
        p: *mut RzPrint,
        curset: ::std::os::raw::c_int,
        ocursor: ::std::os::raw::c_int,
        cursor: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rz_print_offset(
        p: *mut RzPrint,
        off: ::std::os::raw::c_ulonglong,
        invert: ::std::os::raw::c_int,
        opt: ::std::os::raw::c_int,
        dec: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_int,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rz_print_offset_sg(
        p: *mut RzPrint,
        off: ::std::os::raw::c_ulonglong,
        invert: ::std::os::raw::c_int,
        offseg: ::std::os::raw::c_int,
        seggrn: ::std::os::raw::c_int,
        offdec: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_int,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rz_print_color_op_type(
        p: *mut RzPrint,
        analysis_type: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_print_init_rowoffsets(p: *mut RzPrint);
}
extern "C" {
    pub fn rz_print_rowoff(p: *mut RzPrint, i: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_print_set_rowoff(
        p: *mut RzPrint,
        i: ::std::os::raw::c_int,
        offset: ::std::os::raw::c_uint,
        overwrite: bool,
    );
}
extern "C" {
    pub fn rz_print_row_at_off(
        p: *mut RzPrint,
        offset: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_print_set_screenbounds(p: *mut RzPrint, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn rz_print_json_indent(
        s: *const ::std::os::raw::c_char,
        color: bool,
        tab: *const ::std::os::raw::c_char,
        colors: *mut *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_print_json_human(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_print_json_path(
        s: *const ::std::os::raw::c_char,
        pos: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_print_colorize_asm_str(
        p: *mut RzPrint,
        toks: *const RzAsmTokenString,
    ) -> *mut RzStrBuf;
}
extern "C" {
    pub fn rz_type_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_type_target_t {
    pub cpu: *mut ::std::os::raw::c_char,
    pub bits: ::std::os::raw::c_int,
    #[doc = "< size of a pointer if > 0, otherwise bits is used."]
    pub addr_bits: ::std::os::raw::c_int,
    pub os: *mut ::std::os::raw::c_char,
    pub big_endian: bool,
    pub default_type: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rz_type_target_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_type_target_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_type_target_t>(),
        40usize,
        concat!("Size of: ", stringify!(rz_type_target_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_type_target_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_type_target_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_target_t),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_target_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_bits) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_target_t),
            "::",
            stringify!(addr_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).os) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_target_t),
            "::",
            stringify!(os)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).big_endian) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_target_t),
            "::",
            stringify!(big_endian)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_type) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_target_t),
            "::",
            stringify!(default_type)
        )
    );
}
pub type RzTypeTarget = rz_type_target_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_type_parser_t {
    _unused: [u8; 0],
}
pub type RzTypeParser = rz_type_parser_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_type_db_t {
    pub user: *mut ::std::os::raw::c_void,
    pub types: *mut HtPP,
    pub formats: *mut HtPP,
    pub callables: *mut HtPP,
    pub target: *mut RzTypeTarget,
    pub parser: *mut RzTypeParser,
    pub num: *mut RzNum,
    pub iob: RzIOBind,
}
#[test]
fn bindgen_test_layout_rz_type_db_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_type_db_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_type_db_t>(),
        336usize,
        concat!("Size of: ", stringify!(rz_type_db_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_type_db_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_type_db_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_db_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_db_t),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).formats) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_db_t),
            "::",
            stringify!(formats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callables) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_db_t),
            "::",
            stringify!(callables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_db_t),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parser) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_db_t),
            "::",
            stringify!(parser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_db_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iob) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_db_t),
            "::",
            stringify!(iob)
        )
    );
}
pub type RzTypeDB = rz_type_db_t;
pub type RzType = rz_type_t;
pub type RzTypeAttribute = ::std::os::raw::c_ulonglong;
pub const RzTypeAttributeMask_RZ_TYPE_ATTRIBUTE_TYPECLASS_MASK: RzTypeAttributeMask = 15;
pub type RzTypeAttributeMask = ::std::os::raw::c_uint;
pub const RzTypeTypeclass_RZ_TYPE_TYPECLASS_NONE: RzTypeTypeclass = 0;
pub const RzTypeTypeclass_RZ_TYPE_TYPECLASS_NUM: RzTypeTypeclass = 1;
pub const RzTypeTypeclass_RZ_TYPE_TYPECLASS_INTEGRAL: RzTypeTypeclass = 2;
pub const RzTypeTypeclass_RZ_TYPE_TYPECLASS_FLOATING: RzTypeTypeclass = 3;
pub const RzTypeTypeclass_RZ_TYPE_TYPECLASS_ADDRESS: RzTypeTypeclass = 4;
pub const RzTypeTypeclass_RZ_TYPE_TYPECLASS_INTEGRAL_SIGNED: RzTypeTypeclass = 5;
pub const RzTypeTypeclass_RZ_TYPE_TYPECLASS_INTEGRAL_UNSIGNED: RzTypeTypeclass = 6;
pub const RzTypeTypeclass_RZ_TYPE_TYPECLASS_INVALID: RzTypeTypeclass = 7;
pub type RzTypeTypeclass = ::std::os::raw::c_uint;
pub const RzBaseTypeKind_RZ_BASE_TYPE_KIND_STRUCT: RzBaseTypeKind = 0;
pub const RzBaseTypeKind_RZ_BASE_TYPE_KIND_UNION: RzBaseTypeKind = 1;
pub const RzBaseTypeKind_RZ_BASE_TYPE_KIND_ENUM: RzBaseTypeKind = 2;
pub const RzBaseTypeKind_RZ_BASE_TYPE_KIND_TYPEDEF: RzBaseTypeKind = 3;
pub const RzBaseTypeKind_RZ_BASE_TYPE_KIND_ATOMIC: RzBaseTypeKind = 4;
pub type RzBaseTypeKind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_type_enum_case_t {
    pub name: *mut ::std::os::raw::c_char,
    pub val: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_rz_type_enum_case_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_type_enum_case_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_type_enum_case_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_type_enum_case_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_type_enum_case_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_type_enum_case_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_enum_case_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_enum_case_t),
            "::",
            stringify!(val)
        )
    );
}
pub type RzTypeEnumCase = rz_type_enum_case_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_type_struct_member_t {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut RzType,
    pub offset: usize,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_rz_type_struct_member_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_type_struct_member_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_type_struct_member_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_type_struct_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_type_struct_member_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_type_struct_member_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_struct_member_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_struct_member_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_struct_member_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_struct_member_t),
            "::",
            stringify!(size)
        )
    );
}
pub type RzTypeStructMember = rz_type_struct_member_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_type_union_member_t {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut RzType,
    pub offset: usize,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_rz_type_union_member_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_type_union_member_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_type_union_member_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_type_union_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_type_union_member_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_type_union_member_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_union_member_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_union_member_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_union_member_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_union_member_t),
            "::",
            stringify!(size)
        )
    );
}
pub type RzTypeUnionMember = rz_type_union_member_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_base_type_struct_t {
    pub members: RzVector,
}
#[test]
fn bindgen_test_layout_rz_base_type_struct_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_base_type_struct_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_base_type_struct_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_base_type_struct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_base_type_struct_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_base_type_struct_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).members) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_base_type_struct_t),
            "::",
            stringify!(members)
        )
    );
}
pub type RzBaseTypeStruct = rz_base_type_struct_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_base_type_union_t {
    pub members: RzVector,
}
#[test]
fn bindgen_test_layout_rz_base_type_union_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_base_type_union_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_base_type_union_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_base_type_union_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_base_type_union_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_base_type_union_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).members) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_base_type_union_t),
            "::",
            stringify!(members)
        )
    );
}
pub type RzBaseTypeUnion = rz_base_type_union_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_base_type_enum_t {
    pub cases: RzVector,
}
#[test]
fn bindgen_test_layout_rz_base_type_enum_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_base_type_enum_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_base_type_enum_t>(),
        48usize,
        concat!("Size of: ", stringify!(rz_base_type_enum_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_base_type_enum_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_base_type_enum_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cases) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_base_type_enum_t),
            "::",
            stringify!(cases)
        )
    );
}
pub type RzBaseTypeEnum = rz_base_type_enum_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rz_base_type_t {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut RzType,
    pub size: ::std::os::raw::c_ulonglong,
    pub kind: RzBaseTypeKind,
    pub attrs: RzTypeAttribute,
    pub __bindgen_anon_1: rz_base_type_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rz_base_type_t__bindgen_ty_1 {
    pub struct_data: RzBaseTypeStruct,
    pub enum_data: RzBaseTypeEnum,
    pub union_data: RzBaseTypeUnion,
}
#[test]
fn bindgen_test_layout_rz_base_type_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rz_base_type_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_base_type_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(rz_base_type_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_base_type_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_base_type_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_base_type_t__bindgen_ty_1),
            "::",
            stringify!(struct_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enum_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_base_type_t__bindgen_ty_1),
            "::",
            stringify!(enum_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).union_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_base_type_t__bindgen_ty_1),
            "::",
            stringify!(union_data)
        )
    );
}
#[test]
fn bindgen_test_layout_rz_base_type_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_base_type_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_base_type_t>(),
        88usize,
        concat!("Size of: ", stringify!(rz_base_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_base_type_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_base_type_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_base_type_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_base_type_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_base_type_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_base_type_t),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_base_type_t),
            "::",
            stringify!(attrs)
        )
    );
}
pub type RzBaseType = rz_base_type_t;
pub const RzTypeKind_RZ_TYPE_KIND_IDENTIFIER: RzTypeKind = 0;
pub const RzTypeKind_RZ_TYPE_KIND_POINTER: RzTypeKind = 1;
pub const RzTypeKind_RZ_TYPE_KIND_ARRAY: RzTypeKind = 2;
pub const RzTypeKind_RZ_TYPE_KIND_CALLABLE: RzTypeKind = 3;
pub type RzTypeKind = ::std::os::raw::c_uint;
pub const RzTypeIdentifierKind_RZ_TYPE_IDENTIFIER_KIND_UNSPECIFIED: RzTypeIdentifierKind = 0;
pub const RzTypeIdentifierKind_RZ_TYPE_IDENTIFIER_KIND_STRUCT: RzTypeIdentifierKind = 1;
pub const RzTypeIdentifierKind_RZ_TYPE_IDENTIFIER_KIND_UNION: RzTypeIdentifierKind = 2;
pub const RzTypeIdentifierKind_RZ_TYPE_IDENTIFIER_KIND_ENUM: RzTypeIdentifierKind = 3;
pub type RzTypeIdentifierKind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_callable_arg_t {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut RzType,
}
#[test]
fn bindgen_test_layout_rz_callable_arg_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_callable_arg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_callable_arg_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_callable_arg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_callable_arg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_callable_arg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_callable_arg_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_callable_arg_t),
            "::",
            stringify!(type_)
        )
    );
}
pub type RzCallableArg = rz_callable_arg_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_callable_at {
    pub name: *mut ::std::os::raw::c_char,
    pub ret: *mut RzType,
    #[doc = " optional for the time being"]
    pub args: *mut RzPVector,
    pub cc: *const ::std::os::raw::c_char,
    pub noret: bool,
}
#[test]
fn bindgen_test_layout_rz_callable_at() {
    const UNINIT: ::std::mem::MaybeUninit<rz_callable_at> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_callable_at>(),
        40usize,
        concat!("Size of: ", stringify!(rz_callable_at))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_callable_at>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_callable_at))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_callable_at),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ret) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_callable_at),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_callable_at),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_callable_at),
            "::",
            stringify!(cc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noret) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_callable_at),
            "::",
            stringify!(noret)
        )
    );
}
pub type RzCallable = rz_callable_at;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rz_type_t {
    pub kind: RzTypeKind,
    pub __bindgen_anon_1: rz_type_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rz_type_t__bindgen_ty_1 {
    pub identifier: rz_type_t__bindgen_ty_1__bindgen_ty_1,
    pub pointer: rz_type_t__bindgen_ty_1__bindgen_ty_2,
    pub array: rz_type_t__bindgen_ty_1__bindgen_ty_3,
    pub callable: *mut RzCallable,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_type_t__bindgen_ty_1__bindgen_ty_1 {
    pub kind: RzTypeIdentifierKind,
    pub name: *mut ::std::os::raw::c_char,
    pub is_const: bool,
}
#[test]
fn bindgen_test_layout_rz_type_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rz_type_t__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_type_t__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(rz_type_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_type_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_type_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_const) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(is_const)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_type_t__bindgen_ty_1__bindgen_ty_2 {
    pub type_: *mut RzType,
    pub is_const: bool,
}
#[test]
fn bindgen_test_layout_rz_type_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<rz_type_t__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_type_t__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(rz_type_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_type_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_type_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_const) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(is_const)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_type_t__bindgen_ty_1__bindgen_ty_3 {
    pub type_: *mut RzType,
    pub count: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_rz_type_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<rz_type_t__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_type_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(rz_type_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_type_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_type_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(count)
        )
    );
}
#[test]
fn bindgen_test_layout_rz_type_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rz_type_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_type_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(rz_type_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_type_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_type_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_t__bindgen_ty_1),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_t__bindgen_ty_1),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_t__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_t__bindgen_ty_1),
            "::",
            stringify!(callable)
        )
    );
}
#[test]
fn bindgen_test_layout_rz_type_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_type_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_type_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_type_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_type_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_t),
            "::",
            stringify!(kind)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_type_path_t {
    #[doc = "< type at the leaf"]
    pub typ: *mut RzType,
    pub path: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rz_type_path_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_type_path_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_type_path_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_type_path_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_type_path_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_type_path_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_path_t),
            "::",
            stringify!(typ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_path_t),
            "::",
            stringify!(path)
        )
    );
}
pub type RzTypePath = rz_type_path_t;
#[doc = " A path and the type that the path came from"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_type_path_tuple_t {
    pub path: *mut RzTypePath,
    pub root: *mut RzType,
}
#[test]
fn bindgen_test_layout_rz_type_path_tuple_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_type_path_tuple_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_type_path_tuple_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_type_path_tuple_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_type_path_tuple_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_type_path_tuple_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_path_tuple_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_path_tuple_t),
            "::",
            stringify!(root)
        )
    );
}
#[doc = " A path and the type that the path came from"]
pub type RzTypePathTuple = rz_type_path_tuple_t;
#[doc = "< Always executed (no condition)"]
pub const RzTypeCond_RZ_TYPE_COND_AL: RzTypeCond = 0;
#[doc = "< Equal"]
pub const RzTypeCond_RZ_TYPE_COND_EQ: RzTypeCond = 1;
#[doc = "< Not equal"]
pub const RzTypeCond_RZ_TYPE_COND_NE: RzTypeCond = 2;
#[doc = "< Greater or equal"]
pub const RzTypeCond_RZ_TYPE_COND_GE: RzTypeCond = 3;
#[doc = "< Greater than"]
pub const RzTypeCond_RZ_TYPE_COND_GT: RzTypeCond = 4;
#[doc = "< Less or equal"]
pub const RzTypeCond_RZ_TYPE_COND_LE: RzTypeCond = 5;
#[doc = "< Less than"]
pub const RzTypeCond_RZ_TYPE_COND_LT: RzTypeCond = 6;
#[doc = "< Never executed             must be a nop? :D"]
pub const RzTypeCond_RZ_TYPE_COND_NV: RzTypeCond = 7;
#[doc = "< Carry set                  >, ==, or unordered"]
pub const RzTypeCond_RZ_TYPE_COND_HS: RzTypeCond = 8;
#[doc = "< Carry clear                Less than"]
pub const RzTypeCond_RZ_TYPE_COND_LO: RzTypeCond = 9;
#[doc = "< Minus, negative            Less than"]
pub const RzTypeCond_RZ_TYPE_COND_MI: RzTypeCond = 10;
#[doc = "< Plus, positive or zero     >, ==, or unordered"]
pub const RzTypeCond_RZ_TYPE_COND_PL: RzTypeCond = 11;
#[doc = "< Overflow                   Unordered"]
pub const RzTypeCond_RZ_TYPE_COND_VS: RzTypeCond = 12;
#[doc = "< No overflow                Not unordered"]
pub const RzTypeCond_RZ_TYPE_COND_VC: RzTypeCond = 13;
#[doc = "< Unsigned higher            Greater than, or unordered"]
pub const RzTypeCond_RZ_TYPE_COND_HI: RzTypeCond = 14;
#[doc = "< Unsigned lower or same     Less than or equal"]
pub const RzTypeCond_RZ_TYPE_COND_LS: RzTypeCond = 15;
pub const RzTypeCond_RZ_TYPE_COND_HEX_SCL_TRUE: RzTypeCond = 16;
pub const RzTypeCond_RZ_TYPE_COND_HEX_SCL_FALSE: RzTypeCond = 17;
pub const RzTypeCond_RZ_TYPE_COND_HEX_VEC_TRUE: RzTypeCond = 18;
pub const RzTypeCond_RZ_TYPE_COND_HEX_VEC_FALSE: RzTypeCond = 19;
pub const RzTypeCond_RZ_TYPE_COND_EXCEPTION: RzTypeCond = 20;
#[doc = " \\brief Type Conditions"]
pub type RzTypeCond = ::std::os::raw::c_uint;
#[doc = " \\brief type constrained by the type conditions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_type_constraint_t {
    pub cond: RzTypeCond,
    pub val: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_rz_type_constraint_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_type_constraint_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_type_constraint_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_type_constraint_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_type_constraint_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_type_constraint_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cond) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_constraint_t),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_type_constraint_t),
            "::",
            stringify!(val)
        )
    );
}
#[doc = " \\brief type constrained by the type conditions"]
pub type RzTypeConstraint = rz_type_constraint_t;
pub const RzTypePrintOpts_RZ_TYPE_PRINT_NO_OPTS: RzTypePrintOpts = 0;
pub const RzTypePrintOpts_RZ_TYPE_PRINT_MULTILINE: RzTypePrintOpts = 1;
pub const RzTypePrintOpts_RZ_TYPE_PRINT_UNFOLD_ANON_ONLY: RzTypePrintOpts = 2;
pub const RzTypePrintOpts_RZ_TYPE_PRINT_UNFOLD_ANON_ONLY_STRICT: RzTypePrintOpts = 4;
pub const RzTypePrintOpts_RZ_TYPE_PRINT_ZERO_VLA: RzTypePrintOpts = 8;
pub const RzTypePrintOpts_RZ_TYPE_PRINT_NO_END_SEMICOLON: RzTypePrintOpts = 16;
pub const RzTypePrintOpts_RZ_TYPE_PRINT_ANONYMOUS: RzTypePrintOpts = 32;
pub const RzTypePrintOpts_RZ_TYPE_PRINT_END_NEWLINE: RzTypePrintOpts = 64;
pub const RzTypePrintOpts_RZ_TYPE_PRINT_SHOW_TYPEDEF: RzTypePrintOpts = 128;
pub const RzTypePrintOpts_RZ_TYPE_PRINT_ALLOW_NON_EXISTENT_BASE_TYPE: RzTypePrintOpts = 256;
pub type RzTypePrintOpts = ::std::os::raw::c_uint;
extern "C" {
    pub fn rz_type_db_new() -> *mut RzTypeDB;
}
extern "C" {
    pub fn rz_type_db_free(typedb: *mut RzTypeDB);
}
extern "C" {
    pub fn rz_type_db_load_sdb(typedb: *mut RzTypeDB, path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_type_db_load_sdb_str(
        typedb: *mut RzTypeDB,
        str_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_db_load_callables_sdb(
        typedb: *mut RzTypeDB,
        path: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_db_load_callables_sdb_str(
        typedb: *mut RzTypeDB,
        str_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_db_set_bits(typedb: *mut RzTypeDB, bits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_type_db_set_address_bits(typedb: *mut RzTypeDB, addr_bits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rz_type_db_set_os(typedb: *mut RzTypeDB, os: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_type_db_set_cpu(typedb: *mut RzTypeDB, cpu: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_type_db_set_endian(typedb: *mut RzTypeDB, big_endian: bool);
}
extern "C" {
    pub fn rz_type_db_pointer_size(typedb: *const RzTypeDB) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rz_type_db_del(typedb: *mut RzTypeDB, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_type_db_init(
        typedb: *mut RzTypeDB,
        dir_prefix: *const ::std::os::raw::c_char,
        arch: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
        os: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rz_type_db_reload(typedb: *mut RzTypeDB, dir_prefix: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_type_db_purge(typedb: *mut RzTypeDB);
}
extern "C" {
    pub fn rz_type_base_type_free(type_: *mut RzBaseType);
}
extern "C" {
    pub fn rz_type_base_type_new(kind: RzBaseTypeKind) -> *mut RzBaseType;
}
extern "C" {
    pub fn rz_type_base_type_kind_as_string(kind: RzBaseTypeKind) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_base_enum_case_free(
        e: *mut ::std::os::raw::c_void,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rz_type_base_struct_member_free(
        e: *mut ::std::os::raw::c_void,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rz_type_base_union_member_free(
        e: *mut ::std::os::raw::c_void,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rz_type_db_get_base_type(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RzBaseType;
}
extern "C" {
    pub fn rz_type_db_get_compound_type(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RzBaseType;
}
extern "C" {
    pub fn rz_type_db_save_base_type(typedb: *const RzTypeDB, type_: *const RzBaseType);
}
extern "C" {
    pub fn rz_type_db_delete_base_type(typedb: *mut RzTypeDB, type_: *mut RzBaseType) -> bool;
}
extern "C" {
    pub fn rz_type_db_get_base_types_of_kind(
        typedb: *const RzTypeDB,
        kind: RzBaseTypeKind,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_db_get_base_types(typedb: *const RzTypeDB) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_db_base_type_as_string(
        typedb: *const RzTypeDB,
        btype: *const RzBaseType,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_db_base_type_as_pretty_string(
        typedb: *const RzTypeDB,
        btype: *const RzBaseType,
        opts: ::std::os::raw::c_uint,
        unfold_level: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_db_edit_base_type(
        typedb: *mut RzTypeDB,
        name: *const ::std::os::raw::c_char,
        typestr: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_db_base_type_unwrap_typedef(
        typedb: *const RzTypeDB,
        btype: *const RzBaseType,
    ) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_clone(type_: *const RzType) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_identifier(type_: *const RzType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_types_equal(type1: *const RzType, type2: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_as_string(
        typedb: *const RzTypeDB,
        type_: *const RzType,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_declaration_as_string(
        typedb: *const RzTypeDB,
        type_: *const RzType,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_identifier_declaration_as_string(
        typedb: *const RzTypeDB,
        type_: *const RzType,
        identifier: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_as_pretty_string(
        typedb: *const RzTypeDB,
        type_: *const RzType,
        identifier: *const ::std::os::raw::c_char,
        opts: ::std::os::raw::c_uint,
        unfold_level: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_free(type_: *mut RzType);
}
extern "C" {
    pub fn rz_type_exists(typedb: *mut RzTypeDB, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn rz_type_kind(
        typedb: *mut RzTypeDB,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_type_typeclass_as_string(typeclass: RzTypeTypeclass)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_typeclass_from_string(
        typeclass: *const ::std::os::raw::c_char,
    ) -> RzTypeTypeclass;
}
extern "C" {
    pub fn rz_base_type_typeclass(
        typedb: *const RzTypeDB,
        type_: *const RzBaseType,
    ) -> RzTypeTypeclass;
}
extern "C" {
    pub fn rz_type_typeclass(typedb: *const RzTypeDB, type_: *const RzType) -> RzTypeTypeclass;
}
extern "C" {
    pub fn rz_base_type_is_num(typedb: *const RzTypeDB, type_: *const RzBaseType) -> bool;
}
extern "C" {
    pub fn rz_type_is_num(typedb: *const RzTypeDB, type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_base_type_is_integral(typedb: *const RzTypeDB, type_: *const RzBaseType) -> bool;
}
extern "C" {
    pub fn rz_type_is_integral(typedb: *const RzTypeDB, type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_base_type_is_floating(typedb: *const RzTypeDB, type_: *const RzBaseType) -> bool;
}
extern "C" {
    pub fn rz_type_is_floating(typedb: *const RzTypeDB, type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_base_type_is_integral_signed(
        typedb: *const RzTypeDB,
        type_: *const RzBaseType,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_is_integral_signed(typedb: *const RzTypeDB, type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_base_type_is_integral_unsigned(
        typedb: *const RzTypeDB,
        type_: *const RzBaseType,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_is_integral_unsigned(typedb: *const RzTypeDB, type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_typeclass_get_all(
        typedb: *const RzTypeDB,
        typeclass: RzTypeTypeclass,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_typeclass_get_all_sized(
        typedb: *const RzTypeDB,
        typeclass: RzTypeTypeclass,
        size: usize,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_typeclass_get_default_sized(
        typedb: *const RzTypeDB,
        typeclass: RzTypeTypeclass,
        size: usize,
    ) -> *mut RzBaseType;
}
extern "C" {
    pub fn rz_type_path_new(
        type_: *mut RzType,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut RzTypePath;
}
extern "C" {
    pub fn rz_type_path_free(tpath: *mut RzTypePath);
}
extern "C" {
    pub fn rz_type_offset_by_path(
        typedb: *const RzTypeDB,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rz_base_type_path_by_offset(
        typedb: *const RzTypeDB,
        btype: *const RzBaseType,
        offset: ::std::os::raw::c_ulonglong,
        max_depth: ::std::os::raw::c_uint,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_path_by_offset(
        typedb: *const RzTypeDB,
        type_: *const RzType,
        offset: ::std::os::raw::c_ulonglong,
        max_depth: ::std::os::raw::c_uint,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_db_get_by_offset(
        typedb: *const RzTypeDB,
        offset: ::std::os::raw::c_ulonglong,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_db_struct_member_packed_offset(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_type_db_struct_member_offset(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_type_parser_new() -> *mut RzTypeParser;
}
extern "C" {
    pub fn rz_type_parser_init(types: *mut HtPP, callables: *mut HtPP) -> *mut RzTypeParser;
}
extern "C" {
    pub fn rz_type_parser_free(parser: *mut RzTypeParser);
}
extern "C" {
    pub fn rz_type_parser_free_purge(parser: *mut RzTypeParser);
}
extern "C" {
    pub fn rz_type_parse_string_stateless(
        parser: *mut RzTypeParser,
        code: *const ::std::os::raw::c_char,
        error_msg: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_type_parse_file_stateless(
        parser: *mut RzTypeParser,
        path: *const ::std::os::raw::c_char,
        dir: *const ::std::os::raw::c_char,
        error_msg: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_type_parse_string_single(
        parser: *mut RzTypeParser,
        code: *const ::std::os::raw::c_char,
        error_msg: *mut *mut ::std::os::raw::c_char,
    ) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_parse_string_declaration_single(
        parser: *mut RzTypeParser,
        code: *const ::std::os::raw::c_char,
        error_msg: *mut *mut ::std::os::raw::c_char,
    ) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_parse_string(
        typedb: *mut RzTypeDB,
        code: *const ::std::os::raw::c_char,
        error_msg: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_type_parse_file(
        typedb: *mut RzTypeDB,
        path: *const ::std::os::raw::c_char,
        dir: *const ::std::os::raw::c_char,
        error_msg: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_type_parse_reset(typedb: *mut RzTypeDB);
}
extern "C" {
    pub fn rz_type_db_get_enum(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RzBaseType;
}
extern "C" {
    pub fn rz_type_db_get_union(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RzBaseType;
}
extern "C" {
    pub fn rz_type_db_get_struct(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RzBaseType;
}
extern "C" {
    pub fn rz_type_db_get_typedef(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RzBaseType;
}
extern "C" {
    pub fn rz_type_db_enum_member_by_name(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_type_db_enum_member_by_val(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_db_find_enums_by_val(
        typedb: *const RzTypeDB,
        val: ::std::os::raw::c_ulonglong,
    ) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_db_enum_get_bitfield(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_db_base_get_bitsize(
        typedb: *const RzTypeDB,
        btype: *mut RzBaseType,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_type_db_get_bitsize(
        typedb: *const RzTypeDB,
        type_: *mut RzType,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rz_type_atomic_eq(
        typedb: *const RzTypeDB,
        typ1: *const RzType,
        typ2: *const RzType,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_atomic_str_eq(
        typedb: *const RzTypeDB,
        typ1: *const RzType,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_atomic_is_void(typedb: *const RzTypeDB, type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_atomic_is_const(typedb: *const RzTypeDB, type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_integral_set_sign(
        typedb: *const RzTypeDB,
        type_: *mut *mut RzType,
        sign: bool,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_is_void_ptr(type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_is_void_ptr_nested(type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_is_char_ptr(type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_is_char_ptr_nested(type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_is_identifier(type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_is_strictly_atomic(typedb: *const RzTypeDB, type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_is_atomic(typedb: *const RzTypeDB, type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_is_default(typedb: *const RzTypeDB, type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_new_default(typedb: *const RzTypeDB) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_identifier_of_base_type(
        typedb: *const RzTypeDB,
        btype: *const RzBaseType,
        is_const: bool,
    ) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_identifier_of_base_type_str(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_pointer_of_base_type(
        typedb: *const RzTypeDB,
        btype: *const RzBaseType,
        is_const: bool,
    ) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_pointer_of_base_type_str(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
        is_const: bool,
    ) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_pointer_of_type(
        typedb: *const RzTypeDB,
        type_: *mut RzType,
        is_const: bool,
    ) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_array_of_base_type(
        typedb: *const RzTypeDB,
        btype: *const RzBaseType,
        count: usize,
    ) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_array_of_base_type_str(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
        count: usize,
    ) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_array_of_type(
        typedb: *const RzTypeDB,
        type_: *mut RzType,
        count: usize,
    ) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_callable(callable: *mut RzCallable) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_get_base_type(typedb: *const RzTypeDB, type_: *const RzType) -> *mut RzBaseType;
}
extern "C" {
    pub fn rz_type_db_format_get(
        typedb: *const RzTypeDB,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_db_format_set(
        typedb: *mut RzTypeDB,
        name: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rz_type_db_format_all(typedb: *mut RzTypeDB) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_db_format_delete(typedb: *mut RzTypeDB, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rz_type_db_format_purge(typedb: *mut RzTypeDB);
}
extern "C" {
    pub fn rz_base_type_as_format(
        typedb: *const RzTypeDB,
        type_: *mut RzBaseType,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_format(
        typedb: *const RzTypeDB,
        type_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_format_struct_size(
        typedb: *const RzTypeDB,
        f: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_type_format_data(
        t: *const RzTypeDB,
        p: *mut RzPrint,
        seek: ::std::os::raw::c_ulonglong,
        b: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        formatname: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        setval: *const ::std::os::raw::c_char,
        ofield: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_as_format(
        typedb: *const RzTypeDB,
        type_: *mut RzType,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_as_format_pair(
        typedb: *const RzTypeDB,
        type_: *mut RzType,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_callable_new(name: *const ::std::os::raw::c_char) -> *mut RzCallable;
}
extern "C" {
    pub fn rz_type_callable_clone(callable: *const RzCallable) -> *mut RzCallable;
}
extern "C" {
    pub fn rz_type_callable_free(callable: *mut RzCallable);
}
extern "C" {
    pub fn rz_type_callable_arg_new(
        typedb: *mut RzTypeDB,
        name: *const ::std::os::raw::c_char,
        type_: *mut RzType,
    ) -> *mut RzCallableArg;
}
extern "C" {
    pub fn rz_type_callable_arg_clone(arg: *const RzCallableArg) -> *mut RzCallableArg;
}
extern "C" {
    pub fn rz_type_callable_arg_free(arg: *mut RzCallableArg);
}
extern "C" {
    pub fn rz_type_callable_arg_add(callable: *mut RzCallable, arg: *mut RzCallableArg) -> bool;
}
extern "C" {
    pub fn rz_type_func_new(
        typedb: *mut RzTypeDB,
        name: *const ::std::os::raw::c_char,
        type_: *mut RzType,
    ) -> *mut RzCallable;
}
extern "C" {
    pub fn rz_type_func_save(typedb: *mut RzTypeDB, callable: *mut RzCallable) -> bool;
}
extern "C" {
    pub fn rz_type_func_get(
        typedb: *mut RzTypeDB,
        func_name: *const ::std::os::raw::c_char,
    ) -> *mut RzCallable;
}
extern "C" {
    pub fn rz_type_func_delete(
        typedb: *mut RzTypeDB,
        func_name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_func_delete_all(typedb: *mut RzTypeDB);
}
extern "C" {
    pub fn rz_type_func_exist(
        typedb: *mut RzTypeDB,
        func_name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_func_ret(
        typedb: *mut RzTypeDB,
        func_name: *const ::std::os::raw::c_char,
    ) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_func_ret_set(
        typedb: *mut RzTypeDB,
        func_name: *const ::std::os::raw::c_char,
        type_: *mut RzType,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_func_cc(
        typedb: *mut RzTypeDB,
        func_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_func_cc_set(
        typedb: *mut RzTypeDB,
        name: *const ::std::os::raw::c_char,
        cc: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_func_args_count(
        typedb: *mut RzTypeDB,
        func_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rz_type_func_args_type(
        typedb: *mut RzTypeDB,
        func_name: *const ::std::os::raw::c_char,
        i: ::std::os::raw::c_int,
    ) -> *mut RzType;
}
extern "C" {
    pub fn rz_type_func_args_name(
        typedb: *mut RzTypeDB,
        func_name: *const ::std::os::raw::c_char,
        i: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_func_arg_add(
        typedb: *mut RzTypeDB,
        func_name: *const ::std::os::raw::c_char,
        arg_name: *const ::std::os::raw::c_char,
        arg_type: *mut RzType,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_is_callable(type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_is_callable_ptr(type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_is_callable_ptr_nested(type_: *const RzType) -> bool;
}
extern "C" {
    pub fn rz_type_callable_as_string(
        typedb: *const RzTypeDB,
        callable: *const RzCallable,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_callable_ptr_as_string(
        typedb: *const RzTypeDB,
        type_: *const RzType,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_func_is_noreturn(
        typedb: *mut RzTypeDB,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_func_noreturn_add(
        typedb: *mut RzTypeDB,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_func_noreturn_drop(
        typedb: *mut RzTypeDB,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_function_names(typedb: *mut RzTypeDB) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_noreturn_function_names(typedb: *mut RzTypeDB) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_db_enum_names(typedb: *mut RzTypeDB) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_db_struct_names(typedb: *mut RzTypeDB) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_db_union_names(typedb: *mut RzTypeDB) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_db_typedef_names(typedb: *mut RzTypeDB) -> *mut RzList;
}
extern "C" {
    pub fn rz_type_db_all(typedb: *mut RzTypeDB) -> *mut RzList;
}
extern "C" {
    pub fn rz_serialize_types_save(db: *mut Sdb, typedb: *const RzTypeDB);
}
extern "C" {
    pub fn rz_serialize_types_load(
        db: *mut Sdb,
        typedb: *mut RzTypeDB,
        res: *mut RzSerializeResultInfo,
    ) -> bool;
}
extern "C" {
    pub fn rz_serialize_callables_save(db: *mut Sdb, typedb: *mut RzTypeDB);
}
extern "C" {
    pub fn rz_serialize_callables_load(
        db: *mut Sdb,
        typedb: *mut RzTypeDB,
        res: *mut RzSerializeResultInfo,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_cond_tostring(cc: RzTypeCond) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_type_cond_invert(cond: RzTypeCond) -> RzTypeCond;
}
extern "C" {
    pub fn rz_type_cond_eval(
        cond: RzTypeCond,
        arg0: ::std::os::raw::c_longlong,
        arg1: ::std::os::raw::c_longlong,
    ) -> bool;
}
extern "C" {
    pub fn rz_type_cond_eval_single(cond: RzTypeCond, arg0: ::std::os::raw::c_longlong) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_bool_t {
    pub b: bool,
}
#[test]
fn bindgen_test_layout_rz_il_bool_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_bool_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_bool_t>(),
        1usize,
        concat!("Size of: ", stringify!(rz_il_bool_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_bool_t>(),
        1usize,
        concat!("Alignment of ", stringify!(rz_il_bool_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_bool_t),
            "::",
            stringify!(b)
        )
    );
}
pub type RzILBool = rz_il_bool_t;
extern "C" {
    pub fn rz_il_bool_new(true_or_false: bool) -> *mut RzILBool;
}
extern "C" {
    pub fn rz_il_bool_and(a: *mut RzILBool, b: *mut RzILBool) -> *mut RzILBool;
}
extern "C" {
    pub fn rz_il_bool_or(a: *mut RzILBool, b: *mut RzILBool) -> *mut RzILBool;
}
extern "C" {
    pub fn rz_il_bool_xor(a: *mut RzILBool, b: *mut RzILBool) -> *mut RzILBool;
}
extern "C" {
    pub fn rz_il_bool_not(a: *mut RzILBool) -> *mut RzILBool;
}
extern "C" {
    pub fn rz_il_bool_free(bool_var: *mut RzILBool);
}
pub const RzILTypePure_RZ_IL_TYPE_PURE_BOOL: RzILTypePure = 0;
pub const RzILTypePure_RZ_IL_TYPE_PURE_BITVECTOR: RzILTypePure = 1;
pub const RzILTypePure_RZ_IL_TYPE_PURE_FLOAT: RzILTypePure = 2;
#[doc = " \\file\n \\brief Type and Sort identifiers for values in the IL\n\n Our notion:\n  * Types only tell which kind of value something is. E.g. whether it is a bitvector or boolean, but no other info.\n    They can generally be expressed sufficiently as an enum.\n  * Sorts carry any additional info that makes up the structure of a value, in particular bitvector sorts specify a concrete bit count."]
pub type RzILTypePure = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rz_il_sort_pure_t {
    pub type_: RzILTypePure,
    pub props: rz_il_sort_pure_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rz_il_sort_pure_t__bindgen_ty_1 {
    pub bv: rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_1,
    pub f: rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_1 {
    pub length: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_2 {
    pub format: RzFloatFormat,
}
#[test]
fn bindgen_test_layout_rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_sort_pure_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(format)
        )
    );
}
#[test]
fn bindgen_test_layout_rz_il_sort_pure_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_sort_pure_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_sort_pure_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(rz_il_sort_pure_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_sort_pure_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rz_il_sort_pure_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_sort_pure_t__bindgen_ty_1),
            "::",
            stringify!(bv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_sort_pure_t__bindgen_ty_1),
            "::",
            stringify!(f)
        )
    );
}
#[test]
fn bindgen_test_layout_rz_il_sort_pure_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_sort_pure_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_sort_pure_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_il_sort_pure_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_sort_pure_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rz_il_sort_pure_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_sort_pure_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).props) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_sort_pure_t),
            "::",
            stringify!(props)
        )
    );
}
pub type RzILSortPure = rz_il_sort_pure_t;
extern "C" {
    pub fn rz_il_sort_pure_stringify(sort: RzILSortPure) -> *mut ::std::os::raw::c_char;
}
#[doc = "< nop"]
pub const RzILTypeEffect_RZ_IL_TYPE_EFFECT_NONE: RzILTypeEffect = 0;
#[doc = "< mutating mems, vars, etc."]
pub const RzILTypeEffect_RZ_IL_TYPE_EFFECT_DATA: RzILTypeEffect = 1;
#[doc = "< jmp/goto"]
pub const RzILTypeEffect_RZ_IL_TYPE_EFFECT_CTRL: RzILTypeEffect = 2;
pub type RzILTypeEffect = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union RzValUnion {
    pub bv: *mut RzBitVector,
    pub b: *mut RzILBool,
    pub f: *mut RzFloat,
}
#[test]
fn bindgen_test_layout_RzValUnion() {
    const UNINIT: ::std::mem::MaybeUninit<RzValUnion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RzValUnion>(),
        8usize,
        concat!("Size of: ", stringify!(RzValUnion))
    );
    assert_eq!(
        ::std::mem::align_of::<RzValUnion>(),
        8usize,
        concat!("Alignment of ", stringify!(RzValUnion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzValUnion),
            "::",
            stringify!(bv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzValUnion),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RzValUnion),
            "::",
            stringify!(f)
        )
    );
}
#[doc = " A concrete value of `'a pure`. Either a bitvector or boolean."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rz_il_val_t {
    #[doc = "< type of value"]
    pub type_: RzILTypePure,
    #[doc = "< data pointer"]
    pub data: RzValUnion,
}
#[test]
fn bindgen_test_layout_rz_il_val_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_val_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_val_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_val_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_val_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_val_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_val_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_val_t),
            "::",
            stringify!(data)
        )
    );
}
#[doc = " A concrete value of `'a pure`. Either a bitvector or boolean."]
pub type RzILVal = rz_il_val_t;
extern "C" {
    pub fn rz_il_value_new_bitv(bv: *mut RzBitVector) -> *mut RzILVal;
}
extern "C" {
    pub fn rz_il_value_new_bool(b: *mut RzILBool) -> *mut RzILVal;
}
extern "C" {
    pub fn rz_il_value_new_float(f: *mut RzFloat) -> *mut RzILVal;
}
extern "C" {
    pub fn rz_il_value_new_zero_of(sort: RzILSortPure) -> *mut RzILVal;
}
extern "C" {
    pub fn rz_il_value_dup(val: *const RzILVal) -> *mut RzILVal;
}
extern "C" {
    pub fn rz_il_value_free(val: *mut RzILVal);
}
extern "C" {
    pub fn rz_il_value_get_sort(val: *mut RzILVal) -> RzILSortPure;
}
extern "C" {
    pub fn rz_il_value_to_bv(val: *const RzILVal) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_il_value_eq(a: *const RzILVal, b: *const RzILVal) -> bool;
}
extern "C" {
    pub fn rz_il_value_stringify(val: *const RzILVal) -> *mut ::std::os::raw::c_char;
}
pub const RzILEffectLabelType_EFFECT_LABEL_ADDR: RzILEffectLabelType = 0;
pub const RzILEffectLabelType_EFFECT_LABEL_SYSCALL: RzILEffectLabelType = 1;
pub const RzILEffectLabelType_EFFECT_LABEL_HOOK: RzILEffectLabelType = 2;
pub type RzILEffectLabelType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rz_il_effect_label_t {
    #[doc = "< Label name"]
    pub label_id: *mut ::std::os::raw::c_char,
    pub __bindgen_anon_1: rz_il_effect_label_t__bindgen_ty_1,
    #[doc = "< type of label"]
    pub type_: RzILEffectLabelType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rz_il_effect_label_t__bindgen_ty_1 {
    #[doc = "< RzBitVector address if EFFECT_LABEL_ADDR"]
    pub addr: *mut RzBitVector,
    #[doc = "< Function pointer if EFFECT_LABEL_SYSCALL / EFFECT_LABEL_HOOK"]
    pub hook: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rz_il_effect_label_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_effect_label_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_effect_label_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(rz_il_effect_label_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_effect_label_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_il_effect_label_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_effect_label_t__bindgen_ty_1),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hook) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_effect_label_t__bindgen_ty_1),
            "::",
            stringify!(hook)
        )
    );
}
#[test]
fn bindgen_test_layout_rz_il_effect_label_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_effect_label_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_effect_label_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_il_effect_label_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_effect_label_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_effect_label_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_effect_label_t),
            "::",
            stringify!(label_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_effect_label_t),
            "::",
            stringify!(type_)
        )
    );
}
pub type RzILEffectLabel = rz_il_effect_label_t;
extern "C" {
    pub fn rz_il_effect_label_new(
        name: *const ::std::os::raw::c_char,
        type_: RzILEffectLabelType,
    ) -> *mut RzILEffectLabel;
}
extern "C" {
    pub fn rz_il_effect_label_free(lbl: *mut RzILEffectLabel);
}
extern "C" {
    pub fn rz_il_effect_label_dup(lbl: *mut RzILEffectLabel) -> *mut RzILEffectLabel;
}
#[doc = "  \\brief Definition of a variable inside the vm"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rz_il_var_t {
    pub name: *mut ::std::os::raw::c_char,
    #[doc = "< \"type\" of the variable"]
    pub sort: RzILSortPure,
}
#[test]
fn bindgen_test_layout_rz_il_var_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_var_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_var_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_var_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_var_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_var_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_var_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sort) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_var_t),
            "::",
            stringify!(sort)
        )
    );
}
#[doc = "  \\brief Definition of a variable inside the vm"]
pub type RzILVar = rz_il_var_t;
extern "C" {
    pub fn rz_il_variable_new(
        name: *const ::std::os::raw::c_char,
        sort: RzILSortPure,
    ) -> *mut RzILVar;
}
extern "C" {
    pub fn rz_il_variable_free(var: *mut RzILVar);
}
#[doc = " \\brief Holds a set of variable definitions and their current contents\n This is meant only as a low-level container to be used in RzILVM."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_var_set_t {
    pub vars: *mut HtPP,
    pub contents: *mut HtPP,
}
#[test]
fn bindgen_test_layout_rz_il_var_set_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_var_set_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_var_set_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_var_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_var_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_var_set_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vars) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_var_set_t),
            "::",
            stringify!(vars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contents) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_var_set_t),
            "::",
            stringify!(contents)
        )
    );
}
#[doc = " \\brief Holds a set of variable definitions and their current contents\n This is meant only as a low-level container to be used in RzILVM."]
pub type RzILVarSet = rz_il_var_set_t;
extern "C" {
    pub fn rz_il_var_set_init(vs: *mut RzILVarSet) -> bool;
}
extern "C" {
    pub fn rz_il_var_set_fini(vs: *mut RzILVarSet);
}
extern "C" {
    pub fn rz_il_var_set_reset(vs: *mut RzILVarSet);
}
extern "C" {
    pub fn rz_il_var_set_create_var(
        vs: *mut RzILVarSet,
        name: *const ::std::os::raw::c_char,
        sort: RzILSortPure,
    ) -> *mut RzILVar;
}
extern "C" {
    pub fn rz_il_var_set_remove_var(
        vs: *mut RzILVarSet,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RzILVal;
}
extern "C" {
    pub fn rz_il_var_set_bind(
        vs: *mut RzILVarSet,
        name: *const ::std::os::raw::c_char,
        val: *mut RzILVal,
    ) -> bool;
}
extern "C" {
    pub fn rz_il_var_set_get(
        vs: *mut RzILVarSet,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RzILVar;
}
extern "C" {
    pub fn rz_il_var_set_get_all(vs: *mut RzILVarSet) -> *mut RzPVector;
}
extern "C" {
    pub fn rz_il_var_set_get_value(
        vs: *mut RzILVarSet,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RzILVal;
}
#[doc = "< global var, usually bound to a physical representation like a register."]
pub const RzILVarKind_RZ_IL_VAR_KIND_GLOBAL: RzILVarKind = 0;
#[doc = "< local var, defined and assigned by set ops, mutable and useable across effects."]
pub const RzILVarKind_RZ_IL_VAR_KIND_LOCAL: RzILVarKind = 1;
#[doc = "< local pure var, bound only by let expressions, scope is limited to the let's pure body, thus it's immutable."]
pub const RzILVarKind_RZ_IL_VAR_KIND_LOCAL_PURE: RzILVarKind = 2;
pub type RzILVarKind = ::std::os::raw::c_uint;
extern "C" {
    pub fn rz_il_var_kind_name(kind: RzILVarKind) -> *const ::std::os::raw::c_char;
}
pub type RzILMemIndex = ::std::os::raw::c_uint;
#[doc = " \\brief A single memory as part of the RzIL VM.\n\n This can be seen as an array of bitvectors, indexed by bitvector keys, covering a\n certain address space. It corresponds to `('a, 'b) mem` in bap where 'a and 'b\n statically determine the size of all keys and values, respectively.\n Because currently our memory can only bind to an RzBuffer, the key size is limited to\n a maximum of 64bits and the value size is always 8, but this can be extended in\n the future if necessary."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_mem_t {
    pub buf: *mut RzBuffer,
    pub key_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_rz_il_mem_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_mem_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_mem_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_mem_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_mem_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_mem_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_mem_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_mem_t),
            "::",
            stringify!(key_len)
        )
    );
}
#[doc = " \\brief A single memory as part of the RzIL VM.\n\n This can be seen as an array of bitvectors, indexed by bitvector keys, covering a\n certain address space. It corresponds to `('a, 'b) mem` in bap where 'a and 'b\n statically determine the size of all keys and values, respectively.\n Because currently our memory can only bind to an RzBuffer, the key size is limited to\n a maximum of 64bits and the value size is always 8, but this can be extended in\n the future if necessary."]
pub type RzILMem = rz_il_mem_t;
extern "C" {
    pub fn rz_il_mem_new(buf: *mut RzBuffer, key_len: ::std::os::raw::c_uint) -> *mut RzILMem;
}
extern "C" {
    pub fn rz_il_mem_free(mem: *mut RzILMem);
}
extern "C" {
    pub fn rz_il_mem_key_len(mem: *mut RzILMem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_il_mem_value_len(mem: *mut RzILMem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rz_il_mem_load(mem: *mut RzILMem, key: *mut RzBitVector) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_il_mem_store(
        mem: *mut RzILMem,
        key: *mut RzBitVector,
        value: *mut RzBitVector,
    ) -> bool;
}
extern "C" {
    pub fn rz_il_mem_loadw(
        mem: *mut RzILMem,
        key: *mut RzBitVector,
        n_bits: ::std::os::raw::c_uint,
        big_endian: bool,
    ) -> *mut RzBitVector;
}
extern "C" {
    pub fn rz_il_mem_storew(
        mem: *mut RzILMem,
        key: *mut RzBitVector,
        value: *mut RzBitVector,
        big_endian: bool,
    ) -> bool;
}
extern "C" {
    pub fn rz_il_float_new(format: RzFloatFormat, bv: *mut RzBitVector) -> *mut RzFloat;
}
extern "C" {
    pub fn rz_il_float_stringify_rmode(mode: RzFloatRMode) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_il_float_stringify_format(format: RzFloatFormat) -> *const ::std::os::raw::c_char;
}
#[doc = " \\file\n \\brief signatures of core theory opcodes\n\n Modular Hierarchy of the whole core theory\n (we implement the Minimal part only)\n                          o Core\n                            |\n             Trans o--------+--------o Float\n                            |        |\n                            o Basic  o FBasic\n                            |\n                            o Minimal\n                            |\n           +-------+--------+--------+-------+\n           |       |        |        |       |\n           o       o        o        o       o\n         Init    RzILBool     Bitv    Memory   Effect\n\n See also the references :\n 0. A gentle introduction to core theory http://binaryanalysisplatform.github.io/bap/api/odoc/bap-core-theory/Bap_core_theory/index.html\n 1. http://binaryanalysisplatform.github.io/bap/api/odoc/bap-core-theory/Bap_core_theory/Theory/index.html\n 2. For core and array theories https://smtlib.cs.uiowa.edu/theories.shtml"]
pub type RzILOpPure = rz_il_op_pure_t;
#[doc = " \\brief An IL op performing a pure computation, 'a pure\n\n BAP uses ocaml's type system for statically differentiating between different\n kinds of pure ops. Some ops however are polymorphic over all pure types,\n such as `ite : bool -> 'a pure -> 'a pure -> 'a pure`, which is not directly possible in C.\n So our pure ops are dynamically typed (only on the level of C, the IL is still fully statically typed)\n and we simply use typedefs like `RzILOpBool` and `RzILOpBitVector` to at least weakly indicate which concrete type is required."]
pub type RzILOpBool = RzILOpPure;
#[doc = " \\brief An IL op performing a pure computation, 'a pure\n\n BAP uses ocaml's type system for statically differentiating between different\n kinds of pure ops. Some ops however are polymorphic over all pure types,\n such as `ite : bool -> 'a pure -> 'a pure -> 'a pure`, which is not directly possible in C.\n So our pure ops are dynamically typed (only on the level of C, the IL is still fully statically typed)\n and we simply use typedefs like `RzILOpBool` and `RzILOpBitVector` to at least weakly indicate which concrete type is required."]
pub type RzILOpBitVector = RzILOpPure;
#[doc = " \\brief An IL op performing a pure computation, 'a pure\n\n BAP uses ocaml's type system for statically differentiating between different\n kinds of pure ops. Some ops however are polymorphic over all pure types,\n such as `ite : bool -> 'a pure -> 'a pure -> 'a pure`, which is not directly possible in C.\n So our pure ops are dynamically typed (only on the level of C, the IL is still fully statically typed)\n and we simply use typedefs like `RzILOpBool` and `RzILOpBitVector` to at least weakly indicate which concrete type is required."]
pub type RzILOpFloat = RzILOpPure;
pub type RzILOpEffect = rz_il_op_effect_t;
#[doc = " \\brief value is a bitvector constant.\n\n In BAP: `int : 's Bitv.t Value.sort -> word -> 's bitv`"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_bv_t {
    #[doc = "< value of bitvector"]
    pub value: *mut RzBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_bv_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_bv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_bv_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_il_op_args_bv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_bv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_bv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_bv_t),
            "::",
            stringify!(value)
        )
    );
}
#[doc = " \\brief value is a bitvector constant.\n\n In BAP: `int : 's Bitv.t Value.sort -> word -> 's bitv`"]
pub type RzILOpArgsBv = rz_il_op_args_bv_t;
#[doc = "  \\brief op structure for `'s bitv -> bool`\n  [MSB] msb x is the most significant bit of x.\n  [LSB] lsb x is the least significant bit of x.\n  [IS_ZERO] is_zero x holds if x is a bitvector of all zeros."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_un_bv_b_t {
    pub bv: *mut RzILOpBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_un_bv_b_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_un_bv_b_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_un_bv_b_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_il_op_args_un_bv_b_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_un_bv_b_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_un_bv_b_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_un_bv_b_t),
            "::",
            stringify!(bv)
        )
    );
}
#[doc = "  \\brief op structure for `'s bitv -> bool`\n  [MSB] msb x is the most significant bit of x.\n  [LSB] lsb x is the least significant bit of x.\n  [IS_ZERO] is_zero x holds if x is a bitvector of all zeros."]
pub type RzILOpArgsMsb = rz_il_op_args_un_bv_b_t;
#[doc = "  \\brief op structure for `'s bitv -> bool`\n  [MSB] msb x is the most significant bit of x.\n  [LSB] lsb x is the least significant bit of x.\n  [IS_ZERO] is_zero x holds if x is a bitvector of all zeros."]
pub type RzILOpArgsLsb = rz_il_op_args_un_bv_b_t;
#[doc = "  \\brief op structure for `'s bitv -> bool`\n  [MSB] msb x is the most significant bit of x.\n  [LSB] lsb x is the least significant bit of x.\n  [IS_ZERO] is_zero x holds if x is a bitvector of all zeros."]
pub type RzILOpArgsIsZero = rz_il_op_args_un_bv_b_t;
#[doc = " op structure for\n `not` ('s bitv -> 's bitv)\n   not x is one-complement negation.\n `neg` ('s bitv -> 's bitv)\n   neg x is two-complement unary minus"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_bv_unop_t {
    #[doc = "< unary operand"]
    pub bv: *mut RzILOpBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_bv_unop_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_bv_unop_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_bv_unop_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_il_op_args_bv_unop_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_bv_unop_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_bv_unop_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_bv_unop_t),
            "::",
            stringify!(bv)
        )
    );
}
#[doc = " op structure for\n `not` ('s bitv -> 's bitv)\n   not x is one-complement negation.\n `neg` ('s bitv -> 's bitv)\n   neg x is two-complement unary minus"]
pub type RzILOpArgsLogNot = rz_il_op_args_bv_unop_t;
#[doc = " op structure for\n `not` ('s bitv -> 's bitv)\n   not x is one-complement negation.\n `neg` ('s bitv -> 's bitv)\n   neg x is two-complement unary minus"]
pub type RzILOpArgsNeg = rz_il_op_args_bv_unop_t;
#[doc = "  \\brief op structure for two-operand algorithm and logical operations ('s bitv -> 's bitv -> 's bitv)\n\n  [ADD] add x y addition modulo 2^'s\n  [SUB] sub x y subtraction modulo 2^'s\n  [MUL] mul x y multiplication modulo 2^'s\n  [DIV] div x y unsigned division modulo 2^'s truncating towards 0. The division by zero is defined to be a vector of all ones of size 's.\n  [MOD] modulo x y is the remainder of div x y modulo 2^'s.\n  [SDIV] sdiv x y is signed division of x by y modulo 2^'s.\n  [SMOD] smodulo x y is the signed remainder of div x y modulo 2^'s.\n  [LOGAND] logand x y is a bitwise logical and of x and y.\n  [LOGOR] logor x y is a bitwise logical or of x and y.\n  [LOGXOR] logxor x y is a bitwise logical xor of x and y."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_alg_log_operations_t {
    #[doc = "< left operand"]
    pub x: *mut RzILOpBitVector,
    #[doc = "< right operand"]
    pub y: *mut RzILOpBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_alg_log_operations_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_alg_log_operations_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_alg_log_operations_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_op_args_alg_log_operations_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_alg_log_operations_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_il_op_args_alg_log_operations_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_alg_log_operations_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_alg_log_operations_t),
            "::",
            stringify!(y)
        )
    );
}
#[doc = "  \\brief op structure for two-operand algorithm and logical operations ('s bitv -> 's bitv -> 's bitv)\n\n  [ADD] add x y addition modulo 2^'s\n  [SUB] sub x y subtraction modulo 2^'s\n  [MUL] mul x y multiplication modulo 2^'s\n  [DIV] div x y unsigned division modulo 2^'s truncating towards 0. The division by zero is defined to be a vector of all ones of size 's.\n  [MOD] modulo x y is the remainder of div x y modulo 2^'s.\n  [SDIV] sdiv x y is signed division of x by y modulo 2^'s.\n  [SMOD] smodulo x y is the signed remainder of div x y modulo 2^'s.\n  [LOGAND] logand x y is a bitwise logical and of x and y.\n  [LOGOR] logor x y is a bitwise logical or of x and y.\n  [LOGXOR] logxor x y is a bitwise logical xor of x and y."]
pub type RzILOpArgsAdd = rz_il_op_args_alg_log_operations_t;
#[doc = "  \\brief op structure for two-operand algorithm and logical operations ('s bitv -> 's bitv -> 's bitv)\n\n  [ADD] add x y addition modulo 2^'s\n  [SUB] sub x y subtraction modulo 2^'s\n  [MUL] mul x y multiplication modulo 2^'s\n  [DIV] div x y unsigned division modulo 2^'s truncating towards 0. The division by zero is defined to be a vector of all ones of size 's.\n  [MOD] modulo x y is the remainder of div x y modulo 2^'s.\n  [SDIV] sdiv x y is signed division of x by y modulo 2^'s.\n  [SMOD] smodulo x y is the signed remainder of div x y modulo 2^'s.\n  [LOGAND] logand x y is a bitwise logical and of x and y.\n  [LOGOR] logor x y is a bitwise logical or of x and y.\n  [LOGXOR] logxor x y is a bitwise logical xor of x and y."]
pub type RzILOpArgsSub = rz_il_op_args_alg_log_operations_t;
#[doc = "  \\brief op structure for two-operand algorithm and logical operations ('s bitv -> 's bitv -> 's bitv)\n\n  [ADD] add x y addition modulo 2^'s\n  [SUB] sub x y subtraction modulo 2^'s\n  [MUL] mul x y multiplication modulo 2^'s\n  [DIV] div x y unsigned division modulo 2^'s truncating towards 0. The division by zero is defined to be a vector of all ones of size 's.\n  [MOD] modulo x y is the remainder of div x y modulo 2^'s.\n  [SDIV] sdiv x y is signed division of x by y modulo 2^'s.\n  [SMOD] smodulo x y is the signed remainder of div x y modulo 2^'s.\n  [LOGAND] logand x y is a bitwise logical and of x and y.\n  [LOGOR] logor x y is a bitwise logical or of x and y.\n  [LOGXOR] logxor x y is a bitwise logical xor of x and y."]
pub type RzILOpArgsMul = rz_il_op_args_alg_log_operations_t;
#[doc = "  \\brief op structure for two-operand algorithm and logical operations ('s bitv -> 's bitv -> 's bitv)\n\n  [ADD] add x y addition modulo 2^'s\n  [SUB] sub x y subtraction modulo 2^'s\n  [MUL] mul x y multiplication modulo 2^'s\n  [DIV] div x y unsigned division modulo 2^'s truncating towards 0. The division by zero is defined to be a vector of all ones of size 's.\n  [MOD] modulo x y is the remainder of div x y modulo 2^'s.\n  [SDIV] sdiv x y is signed division of x by y modulo 2^'s.\n  [SMOD] smodulo x y is the signed remainder of div x y modulo 2^'s.\n  [LOGAND] logand x y is a bitwise logical and of x and y.\n  [LOGOR] logor x y is a bitwise logical or of x and y.\n  [LOGXOR] logxor x y is a bitwise logical xor of x and y."]
pub type RzILOpArgsDiv = rz_il_op_args_alg_log_operations_t;
#[doc = "  \\brief op structure for two-operand algorithm and logical operations ('s bitv -> 's bitv -> 's bitv)\n\n  [ADD] add x y addition modulo 2^'s\n  [SUB] sub x y subtraction modulo 2^'s\n  [MUL] mul x y multiplication modulo 2^'s\n  [DIV] div x y unsigned division modulo 2^'s truncating towards 0. The division by zero is defined to be a vector of all ones of size 's.\n  [MOD] modulo x y is the remainder of div x y modulo 2^'s.\n  [SDIV] sdiv x y is signed division of x by y modulo 2^'s.\n  [SMOD] smodulo x y is the signed remainder of div x y modulo 2^'s.\n  [LOGAND] logand x y is a bitwise logical and of x and y.\n  [LOGOR] logor x y is a bitwise logical or of x and y.\n  [LOGXOR] logxor x y is a bitwise logical xor of x and y."]
pub type RzILOpArgsSdiv = rz_il_op_args_alg_log_operations_t;
#[doc = "  \\brief op structure for two-operand algorithm and logical operations ('s bitv -> 's bitv -> 's bitv)\n\n  [ADD] add x y addition modulo 2^'s\n  [SUB] sub x y subtraction modulo 2^'s\n  [MUL] mul x y multiplication modulo 2^'s\n  [DIV] div x y unsigned division modulo 2^'s truncating towards 0. The division by zero is defined to be a vector of all ones of size 's.\n  [MOD] modulo x y is the remainder of div x y modulo 2^'s.\n  [SDIV] sdiv x y is signed division of x by y modulo 2^'s.\n  [SMOD] smodulo x y is the signed remainder of div x y modulo 2^'s.\n  [LOGAND] logand x y is a bitwise logical and of x and y.\n  [LOGOR] logor x y is a bitwise logical or of x and y.\n  [LOGXOR] logxor x y is a bitwise logical xor of x and y."]
pub type RzILOpArgsMod = rz_il_op_args_alg_log_operations_t;
#[doc = "  \\brief op structure for two-operand algorithm and logical operations ('s bitv -> 's bitv -> 's bitv)\n\n  [ADD] add x y addition modulo 2^'s\n  [SUB] sub x y subtraction modulo 2^'s\n  [MUL] mul x y multiplication modulo 2^'s\n  [DIV] div x y unsigned division modulo 2^'s truncating towards 0. The division by zero is defined to be a vector of all ones of size 's.\n  [MOD] modulo x y is the remainder of div x y modulo 2^'s.\n  [SDIV] sdiv x y is signed division of x by y modulo 2^'s.\n  [SMOD] smodulo x y is the signed remainder of div x y modulo 2^'s.\n  [LOGAND] logand x y is a bitwise logical and of x and y.\n  [LOGOR] logor x y is a bitwise logical or of x and y.\n  [LOGXOR] logxor x y is a bitwise logical xor of x and y."]
pub type RzILOpArgsSmod = rz_il_op_args_alg_log_operations_t;
#[doc = "  \\brief op structure for two-operand algorithm and logical operations ('s bitv -> 's bitv -> 's bitv)\n\n  [ADD] add x y addition modulo 2^'s\n  [SUB] sub x y subtraction modulo 2^'s\n  [MUL] mul x y multiplication modulo 2^'s\n  [DIV] div x y unsigned division modulo 2^'s truncating towards 0. The division by zero is defined to be a vector of all ones of size 's.\n  [MOD] modulo x y is the remainder of div x y modulo 2^'s.\n  [SDIV] sdiv x y is signed division of x by y modulo 2^'s.\n  [SMOD] smodulo x y is the signed remainder of div x y modulo 2^'s.\n  [LOGAND] logand x y is a bitwise logical and of x and y.\n  [LOGOR] logor x y is a bitwise logical or of x and y.\n  [LOGXOR] logxor x y is a bitwise logical xor of x and y."]
pub type RzILOpArgsLogand = rz_il_op_args_alg_log_operations_t;
#[doc = "  \\brief op structure for two-operand algorithm and logical operations ('s bitv -> 's bitv -> 's bitv)\n\n  [ADD] add x y addition modulo 2^'s\n  [SUB] sub x y subtraction modulo 2^'s\n  [MUL] mul x y multiplication modulo 2^'s\n  [DIV] div x y unsigned division modulo 2^'s truncating towards 0. The division by zero is defined to be a vector of all ones of size 's.\n  [MOD] modulo x y is the remainder of div x y modulo 2^'s.\n  [SDIV] sdiv x y is signed division of x by y modulo 2^'s.\n  [SMOD] smodulo x y is the signed remainder of div x y modulo 2^'s.\n  [LOGAND] logand x y is a bitwise logical and of x and y.\n  [LOGOR] logor x y is a bitwise logical or of x and y.\n  [LOGXOR] logxor x y is a bitwise logical xor of x and y."]
pub type RzILOpArgsLogor = rz_il_op_args_alg_log_operations_t;
#[doc = "  \\brief op structure for two-operand algorithm and logical operations ('s bitv -> 's bitv -> 's bitv)\n\n  [ADD] add x y addition modulo 2^'s\n  [SUB] sub x y subtraction modulo 2^'s\n  [MUL] mul x y multiplication modulo 2^'s\n  [DIV] div x y unsigned division modulo 2^'s truncating towards 0. The division by zero is defined to be a vector of all ones of size 's.\n  [MOD] modulo x y is the remainder of div x y modulo 2^'s.\n  [SDIV] sdiv x y is signed division of x by y modulo 2^'s.\n  [SMOD] smodulo x y is the signed remainder of div x y modulo 2^'s.\n  [LOGAND] logand x y is a bitwise logical and of x and y.\n  [LOGOR] logor x y is a bitwise logical or of x and y.\n  [LOGXOR] logxor x y is a bitwise logical xor of x and y."]
pub type RzILOpArgsLogxor = rz_il_op_args_alg_log_operations_t;
#[doc = "  \\brief op structure for binary comparison ops ('a bitv -> 'a bitv -> bool)\n\n  [EQ] eq x y binary predicate for bitwise equality\n  [SLE] sle x y binary predicate for singed less than or equal\n  [ULE] ule x y binary predicate for unsigned less than or equal"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_cmp_t {
    #[doc = "< index of operand 1"]
    pub x: *mut RzILOpBitVector,
    #[doc = "< index of operand 2"]
    pub y: *mut RzILOpBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_cmp_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_cmp_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_cmp_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_op_args_cmp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_cmp_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_cmp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_cmp_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_cmp_t),
            "::",
            stringify!(y)
        )
    );
}
#[doc = "  \\brief op structure for binary comparison ops ('a bitv -> 'a bitv -> bool)\n\n  [EQ] eq x y binary predicate for bitwise equality\n  [SLE] sle x y binary predicate for singed less than or equal\n  [ULE] ule x y binary predicate for unsigned less than or equal"]
pub type RzILOpArgsEq = rz_il_op_args_cmp_t;
#[doc = "  \\brief op structure for binary comparison ops ('a bitv -> 'a bitv -> bool)\n\n  [EQ] eq x y binary predicate for bitwise equality\n  [SLE] sle x y binary predicate for singed less than or equal\n  [ULE] ule x y binary predicate for unsigned less than or equal"]
pub type RzILOpArgsSle = rz_il_op_args_cmp_t;
#[doc = "  \\brief op structure for binary comparison ops ('a bitv -> 'a bitv -> bool)\n\n  [EQ] eq x y binary predicate for bitwise equality\n  [SLE] sle x y binary predicate for singed less than or equal\n  [ULE] ule x y binary predicate for unsigned less than or equal"]
pub type RzILOpArgsUle = rz_il_op_args_cmp_t;
#[doc = "  \\brief op structure for casting bitv"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_cast_t {
    #[doc = "< new bits length"]
    pub length: ::std::os::raw::c_uint,
    #[doc = "< If m = size val - length > 0 then m fill-bits are prepended to the most significant part of the vector."]
    pub fill: *mut RzILOpBool,
    #[doc = "< value to cast"]
    pub val: *mut RzILOpBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_cast_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_cast_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_cast_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_il_op_args_cast_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_cast_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_cast_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_cast_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fill) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_cast_t),
            "::",
            stringify!(fill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_cast_t),
            "::",
            stringify!(val)
        )
    );
}
#[doc = "  \\brief op structure for casting bitv"]
pub type RzILOpArgsCast = rz_il_op_args_cast_t;
#[doc = "  \\struct rz_il_op_args_append_t\n  \\brief op structure for appending 2 bitv: MSB:LSB high:low"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_append_t {
    #[doc = "< bitvector occupying the most significant bits"]
    pub high: *mut RzILOpBitVector,
    #[doc = "< bitvector occupying the least significant bits"]
    pub low: *mut RzILOpBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_append_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_append_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_append_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_op_args_append_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_append_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_append_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).high) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_append_t),
            "::",
            stringify!(high)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).low) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_append_t),
            "::",
            stringify!(low)
        )
    );
}
#[doc = "  \\struct rz_il_op_args_append_t\n  \\brief op structure for appending 2 bitv: MSB:LSB high:low"]
pub type RzILOpArgsAppend = rz_il_op_args_append_t;
#[doc = "  \\brief op structure for lshift and rshift (bool -> 's bitv -> 'b bitv -> 's bitv)\n\n  [LSHIFT] shiftl s x m shifts x left by m bits filling with s.\n  [RSHIFT] shiftr s x m shifts x right by m bits filling with s."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_shift_t {
    #[doc = "< index of fill bit"]
    pub fill_bit: *mut RzILOpBool,
    #[doc = "< index of operand 1"]
    pub x: *mut RzILOpBitVector,
    #[doc = "< index of operand 2"]
    pub y: *mut RzILOpBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_shift_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_shift_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_shift_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_il_op_args_shift_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_shift_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_shift_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fill_bit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_shift_t),
            "::",
            stringify!(fill_bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_shift_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_shift_t),
            "::",
            stringify!(y)
        )
    );
}
#[doc = "  \\brief op structure for lshift and rshift (bool -> 's bitv -> 'b bitv -> 's bitv)\n\n  [LSHIFT] shiftl s x m shifts x left by m bits filling with s.\n  [RSHIFT] shiftr s x m shifts x right by m bits filling with s."]
pub type RzILOpArgsShiftLeft = rz_il_op_args_shift_t;
#[doc = "  \\brief op structure for lshift and rshift (bool -> 's bitv -> 'b bitv -> 's bitv)\n\n  [LSHIFT] shiftl s x m shifts x left by m bits filling with s.\n  [RSHIFT] shiftr s x m shifts x right by m bits filling with s."]
pub type RzILOpArgsShiftRight = rz_il_op_args_shift_t;
#[doc = " \\brief op structure for `set` ('a var -> 'a pure -> data eff)\n\n set v x changes the value stored in v to the value of x."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_set_t {
    #[doc = "< name of variable, const one"]
    pub v: *const ::std::os::raw::c_char,
    #[doc = "< whether a global variable should be set or a local optionally created and set"]
    pub is_local: bool,
    #[doc = "< value to set the variable to"]
    pub x: *mut RzILOpPure,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_set_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_set_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_set_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_il_op_args_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_set_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_set_t),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_local) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_set_t),
            "::",
            stringify!(is_local)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_set_t),
            "::",
            stringify!(x)
        )
    );
}
#[doc = " \\brief op structure for `set` ('a var -> 'a pure -> data eff)\n\n set v x changes the value stored in v to the value of x."]
pub type RzILOpArgsSet = rz_il_op_args_set_t;
#[doc = " \\brief op structure for `let_ : 'a var -> 'a pure -> 'b pure -> 'b pure`\n\n `let_ v exp body` binds the value of exp to v body."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_let_t {
    #[doc = "< name of variable"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = "< value/expression to bind the variable to"]
    pub exp: *mut RzILOpPure,
    #[doc = "< body in which the variable will be bound and that produces the result"]
    pub body: *mut RzILOpPure,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_let_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_let_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_let_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_il_op_args_let_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_let_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_let_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_let_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_let_t),
            "::",
            stringify!(exp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_let_t),
            "::",
            stringify!(body)
        )
    );
}
#[doc = " \\brief op structure for `let_ : 'a var -> 'a pure -> 'b pure -> 'b pure`\n\n `let_ v exp body` binds the value of exp to v body."]
pub type RzILOpArgsLet = rz_il_op_args_let_t;
#[doc = "  \\brief op structure for `jmp` (_ bitv -> ctrl eff)\n\n  jmp dst passes the control to a program located at dst."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_jmp_t {
    #[doc = "< index of destination address"]
    pub dst: *mut RzILOpBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_jmp_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_jmp_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_jmp_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_il_op_args_jmp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_jmp_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_jmp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_jmp_t),
            "::",
            stringify!(dst)
        )
    );
}
#[doc = "  \\brief op structure for `jmp` (_ bitv -> ctrl eff)\n\n  jmp dst passes the control to a program located at dst."]
pub type RzILOpArgsJmp = rz_il_op_args_jmp_t;
#[doc = "  \\brief op structure for `goto` (label -> ctrl eff)\n\n  goto lbl passes the control to a program labeled with lbl."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_goto_t {
    #[doc = "< name of the label, const one"]
    pub lbl: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_goto_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_goto_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_goto_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_il_op_args_goto_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_goto_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_goto_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_goto_t),
            "::",
            stringify!(lbl)
        )
    );
}
#[doc = "  \\brief op structure for `goto` (label -> ctrl eff)\n\n  goto lbl passes the control to a program labeled with lbl."]
pub type RzILOpArgsGoto = rz_il_op_args_goto_t;
#[doc = "  \\brief op structure for `Seq` ('a eff -> 'a eff -> 'a eff)\n\n  seq x y performs effect x, after that perform effect y. Pack two effects into one."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_seq_t {
    #[doc = "< perform this first"]
    pub x: *mut RzILOpEffect,
    #[doc = "< perform this second"]
    pub y: *mut RzILOpEffect,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_seq_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_seq_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_seq_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_op_args_seq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_seq_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_seq_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_seq_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_seq_t),
            "::",
            stringify!(y)
        )
    );
}
#[doc = "  \\brief op structure for `Seq` ('a eff -> 'a eff -> 'a eff)\n\n  seq x y performs effect x, after that perform effect y. Pack two effects into one."]
pub type RzILOpArgsSeq = rz_il_op_args_seq_t;
#[doc = "  \\brief op structure for `blk` (label -> data eff -> ctrl eff -> unit eff)\n\n  blk lbl data ctrl a labeled sequence of effects."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rzil_op_blk_t {
    #[doc = "< name of the label, const one"]
    pub label: *const ::std::os::raw::c_char,
    #[doc = "< index of data_eff"]
    pub data_eff: *mut RzILOpEffect,
    #[doc = "< index of ctrl_eff"]
    pub ctrl_eff: *mut RzILOpEffect,
}
#[test]
fn bindgen_test_layout_rzil_op_blk_t() {
    const UNINIT: ::std::mem::MaybeUninit<rzil_op_blk_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rzil_op_blk_t>(),
        24usize,
        concat!("Size of: ", stringify!(rzil_op_blk_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rzil_op_blk_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rzil_op_blk_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rzil_op_blk_t),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_eff) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rzil_op_blk_t),
            "::",
            stringify!(data_eff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_eff) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rzil_op_blk_t),
            "::",
            stringify!(ctrl_eff)
        )
    );
}
#[doc = "  \\brief op structure for `blk` (label -> data eff -> ctrl eff -> unit eff)\n\n  blk lbl data ctrl a labeled sequence of effects."]
pub type RzILOpArgsBlk = rzil_op_blk_t;
#[doc = "  \\brief op structure for `repeat` (bool -> data eff -> data eff)\n\n  repeat c data repeats data effects till the condition c holds."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rzil_op_repeat_t {
    #[doc = "< index of BOOL condition"]
    pub condition: *mut RzILOpBool,
    #[doc = "< index of data effect"]
    pub data_eff: *mut RzILOpEffect,
}
#[test]
fn bindgen_test_layout_rzil_op_repeat_t() {
    const UNINIT: ::std::mem::MaybeUninit<rzil_op_repeat_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rzil_op_repeat_t>(),
        16usize,
        concat!("Size of: ", stringify!(rzil_op_repeat_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rzil_op_repeat_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rzil_op_repeat_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rzil_op_repeat_t),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_eff) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rzil_op_repeat_t),
            "::",
            stringify!(data_eff)
        )
    );
}
#[doc = "  \\brief op structure for `repeat` (bool -> data eff -> data eff)\n\n  repeat c data repeats data effects till the condition c holds."]
pub type RzILOpArgsRepeat = rzil_op_repeat_t;
#[doc = "  \\brief op structure for `branch` (bool -> 'a eff -> 'a eff -> 'a eff)\n\n  branch c lhs rhs if c holds then performs lhs else rhs."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_branch_t {
    pub condition: *mut RzILOpBool,
    #[doc = "< effect for when condition evaluates to true"]
    pub true_eff: *mut RzILOpEffect,
    #[doc = "< effect for when condition evaluates to false"]
    pub false_eff: *mut RzILOpEffect,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_branch_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_branch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_branch_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_il_op_args_branch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_branch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_branch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_branch_t),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).true_eff) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_branch_t),
            "::",
            stringify!(true_eff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).false_eff) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_branch_t),
            "::",
            stringify!(false_eff)
        )
    );
}
#[doc = "  \\brief op structure for `branch` (bool -> 'a eff -> 'a eff -> 'a eff)\n\n  branch c lhs rhs if c holds then performs lhs else rhs."]
pub type RzILOpArgsBranch = rz_il_op_args_branch_t;
#[doc = "  \\brief op structure for `ite` (bool -> 'a pure -> 'a pure -> 'a pure)\n\n  ite c x y is x if c evaluates to b1 else y."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_ite_t {
    #[doc = "< index of BOOL condition"]
    pub condition: *mut RzILOpBool,
    #[doc = "< index of RzILVal operand 1"]
    pub x: *mut RzILOpPure,
    #[doc = "< index of RzILVal operand 2"]
    pub y: *mut RzILOpPure,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_ite_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_ite_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_ite_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_il_op_args_ite_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_ite_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_ite_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_ite_t),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_ite_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_ite_t),
            "::",
            stringify!(y)
        )
    );
}
#[doc = "  \\brief op structure for `ite` (bool -> 'a pure -> 'a pure -> 'a pure)\n\n  ite c x y is x if c evaluates to b1 else y."]
pub type RzILOpArgsIte = rz_il_op_args_ite_t;
#[doc = "  \\brief op structure for `var` ('a var -> 'a pure)\n\n  var v is the value of the variable v."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_var_t {
    #[doc = "< name of variable, const one"]
    pub v: *const ::std::os::raw::c_char,
    #[doc = "< set of variables to pick from"]
    pub kind: RzILVarKind,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_var_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_var_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_var_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_op_args_var_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_var_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_var_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_var_t),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_var_t),
            "::",
            stringify!(kind)
        )
    );
}
#[doc = "  \\brief op structure for `var` ('a var -> 'a pure)\n\n  var v is the value of the variable v."]
pub type RzILOpArgsVar = rz_il_op_args_var_t;
#[doc = "  \\brief op structure for `and`, `or` and `xor` (bool -> bool -> bool)\n\n  BAP equivalent:\n    val and_ : bool -> bool -> bool\n    val or_ : bool -> bool -> bool\n  and(x, y) is a conjunction of x and y.\n  or(x, y)  is a conjunction of x or y.\n  xor(x, y) is a conjunction of x xor y."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_bool_operation_t {
    #[doc = "< left operand"]
    pub x: *mut RzILOpBool,
    #[doc = "< right operand"]
    pub y: *mut RzILOpBool,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_bool_operation_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_bool_operation_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_bool_operation_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_op_args_bool_operation_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_bool_operation_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_bool_operation_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_bool_operation_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_bool_operation_t),
            "::",
            stringify!(y)
        )
    );
}
#[doc = "  \\brief op structure for `and`, `or` and `xor` (bool -> bool -> bool)\n\n  BAP equivalent:\n    val and_ : bool -> bool -> bool\n    val or_ : bool -> bool -> bool\n  and(x, y) is a conjunction of x and y.\n  or(x, y)  is a conjunction of x or y.\n  xor(x, y) is a conjunction of x xor y."]
pub type RzILOpArgsBoolAnd = rz_il_op_args_bool_operation_t;
#[doc = "  \\brief op structure for `and`, `or` and `xor` (bool -> bool -> bool)\n\n  BAP equivalent:\n    val and_ : bool -> bool -> bool\n    val or_ : bool -> bool -> bool\n  and(x, y) is a conjunction of x and y.\n  or(x, y)  is a conjunction of x or y.\n  xor(x, y) is a conjunction of x xor y."]
pub type RzILOpArgsBoolOr = rz_il_op_args_bool_operation_t;
#[doc = "  \\brief op structure for `and`, `or` and `xor` (bool -> bool -> bool)\n\n  BAP equivalent:\n    val and_ : bool -> bool -> bool\n    val or_ : bool -> bool -> bool\n  and(x, y) is a conjunction of x and y.\n  or(x, y)  is a conjunction of x or y.\n  xor(x, y) is a conjunction of x xor y."]
pub type RzILOpArgsBoolXor = rz_il_op_args_bool_operation_t;
#[doc = "  \\brief op structure for `inv` (!bool -> bool)\n\n\tBAP equivalent:\n\t  val inv : bool -> bool\n  inv(x) inverts x (also known as not operation)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_bool_inv_t {
    #[doc = "< single operand"]
    pub x: *mut RzILOpBool,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_bool_inv_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_bool_inv_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_bool_inv_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_il_op_args_bool_inv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_bool_inv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_bool_inv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_bool_inv_t),
            "::",
            stringify!(x)
        )
    );
}
#[doc = "  \\brief op structure for `inv` (!bool -> bool)\n\n\tBAP equivalent:\n\t  val inv : bool -> bool\n  inv(x) inverts x (also known as not operation)."]
pub type RzILOpArgsBoolInv = rz_il_op_args_bool_inv_t;
#[doc = "  \\brief op structure for `load` (('a, 'b) mem -> 'a bitv -> 'b bitv)\n\n  load m k is the value associated with the key k in the memory m."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_load_t {
    #[doc = "< index of the mem inside the vm to use"]
    pub mem: RzILMemIndex,
    #[doc = "< index of the cell (address) in mem, must have exactly the size of a key in the memory"]
    pub key: *mut RzILOpBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_load_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_load_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_load_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_op_args_load_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_load_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_load_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_load_t),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_load_t),
            "::",
            stringify!(key)
        )
    );
}
#[doc = "  \\brief op structure for `load` (('a, 'b) mem -> 'a bitv -> 'b bitv)\n\n  load m k is the value associated with the key k in the memory m."]
pub type RzILOpArgsLoad = rz_il_op_args_load_t;
#[doc = "  \\brief op structure for `store` (('a, 'b) mem -> 'a bitv -> 'b bitv -> ('a, 'b) mem)\n\n  store m k x a memory m in which the key k is associated with the word x."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_store_t {
    #[doc = "< index of memory in the vm to use"]
    pub mem: RzILMemIndex,
    #[doc = "< address where to store to, must have exactly the size of a key in the memory"]
    pub key: *mut RzILOpBitVector,
    #[doc = "< value to store, must have exactly the size of a memory cell"]
    pub value: *mut RzILOpBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_store_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_store_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_store_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_il_op_args_store_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_store_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_store_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_store_t),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_store_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_store_t),
            "::",
            stringify!(value)
        )
    );
}
#[doc = "  \\brief op structure for `store` (('a, 'b) mem -> 'a bitv -> 'b bitv -> ('a, 'b) mem)\n\n  store m k x a memory m in which the key k is associated with the word x."]
pub type RzILOpArgsStore = rz_il_op_args_store_t;
#[doc = " \\brief Load an entire word of arbitrary bit size from a memory\n\n Endianness is determined by the vm"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_loadw_t {
    #[doc = "< index of the mem inside the vm to use"]
    pub mem: RzILMemIndex,
    #[doc = "< memory index of the RzBitVector key (address)"]
    pub key: *mut RzILOpBitVector,
    #[doc = "< n of bits to read, and of the resulting bitvector"]
    pub n_bits: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_loadw_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_loadw_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_loadw_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_il_op_args_loadw_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_loadw_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_loadw_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_loadw_t),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_loadw_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_bits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_loadw_t),
            "::",
            stringify!(n_bits)
        )
    );
}
#[doc = " \\brief Load an entire word of arbitrary bit size from a memory\n\n Endianness is determined by the vm"]
pub type RzILOpArgsLoadW = rz_il_op_args_loadw_t;
#[doc = " \\brief Store an entire word of arbitrary bit size into a memory\n\n Endianness is determined by the vm"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_storew_t {
    #[doc = "< index of memory in the vm to use"]
    pub mem: RzILMemIndex,
    #[doc = "< address where to store to"]
    pub key: *mut RzILOpBitVector,
    #[doc = "< value to store, arbitrary size"]
    pub value: *mut RzILOpBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_storew_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_storew_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_storew_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_il_op_args_storew_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_storew_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_storew_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_storew_t),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_storew_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_storew_t),
            "::",
            stringify!(value)
        )
    );
}
#[doc = " \\brief Store an entire word of arbitrary bit size into a memory\n\n Endianness is determined by the vm"]
pub type RzILOpArgsStoreW = rz_il_op_args_storew_t;
#[doc = " \\brief value for a float constant\n `float s x` interprets x as a floating-point number in format s.\n In BAP : `( 'r, 's ) format Float.t Value.sort -> 's bitv -> ( 'r, 's ) format float"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_float_t {
    pub r: RzFloatFormat,
    pub bv: *mut RzILOpBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_float_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_float_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_float_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_op_args_float_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_float_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_float_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_t),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_t),
            "::",
            stringify!(bv)
        )
    );
}
#[doc = " \\brief value for a float constant\n `float s x` interprets x as a floating-point number in format s.\n In BAP : `( 'r, 's ) format Float.t Value.sort -> 's bitv -> ( 'r, 's ) format float"]
pub type RzILOpArgsFloat = rz_il_op_args_float_t;
#[doc = " \\brief op structure for unary without rmode"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_float_unary_t {
    pub f: *mut RzILOpFloat,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_float_unary_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_float_unary_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_float_unary_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_il_op_args_float_unary_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_float_unary_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_float_unary_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_unary_t),
            "::",
            stringify!(f)
        )
    );
}
#[doc = " \\brief opstructure for fbits : ( 'r, 's ) format float -> 's bitv\n fbits x is a bitvector representation of the floating-point number x."]
pub type RzILOpArgsFbits = rz_il_op_args_float_unary_t;
#[doc = " \\brief op structure for 'f float -> bool\n [IS_FINITE] is_finite x holds if x represents a finite number.\n [IS_NAN] is_nan x holds if x represents a not-a-number (NaN).\n [IS_INF] is_inf x holds if x represents an infinite number.\n [IS_FZERO] is_fzero x holds if x represents a zero.\n [IS_FNEG] is_fpos x holds if x represents a positive number.\n [IS_FPOS] is_fneg x hold if x represents a negative number."]
pub type RzILOpArgsIsFinite = rz_il_op_args_float_unary_t;
#[doc = " \\brief op structure for unary without rmode"]
pub type RzILOpArgsIsNan = rz_il_op_args_float_unary_t;
#[doc = " \\brief op structure for unary without rmode"]
pub type RzILOpArgsIsInf = rz_il_op_args_float_unary_t;
#[doc = " \\brief op structure for unary without rmode"]
pub type RzILOpArgsIsFzero = rz_il_op_args_float_unary_t;
#[doc = " \\brief op structure for unary without rmode"]
pub type RzILOpArgsIsFpos = rz_il_op_args_float_unary_t;
#[doc = " \\brief op structure for unary without rmode"]
pub type RzILOpArgsIsFneg = rz_il_op_args_float_unary_t;
#[doc = " op structure for 'f float -> float\n [FNEG] fneg x is -x\n [FABS] fabs x is absolute value of x (|x|)\n [FSUCC] fsucc x is the least floating-point number representable in (sort x) that is greater than x.\n [FPRED] fpred x is the greatest floating-point number representable in (sort x) that is less than x."]
pub type RzILOpArgsFneg = rz_il_op_args_float_unary_t;
#[doc = " \\brief op structure for unary without rmode"]
pub type RzILOpArgsFabs = rz_il_op_args_float_unary_t;
#[doc = " \\brief op structure for unary without rmode"]
pub type RzILOpArgsFsucc = rz_il_op_args_float_unary_t;
#[doc = " \\brief op structure for unary without rmode"]
pub type RzILOpArgsFpred = rz_il_op_args_float_unary_t;
#[doc = " \\brief op structure for cast to bv from float\n [FCAST_INT] `f_cast_int s rm x` returns an integer closest to x.\n [FCAST_SINT] `f_cast_sint s rm x` returns an integer closest to x."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_float_cast_int_t {
    pub length: ::std::os::raw::c_uint,
    pub mode: RzFloatRMode,
    pub f: *mut RzILOpFloat,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_float_cast_int_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_float_cast_int_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_float_cast_int_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_op_args_float_cast_int_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_float_cast_int_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_float_cast_int_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_cast_int_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_cast_int_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_cast_int_t),
            "::",
            stringify!(f)
        )
    );
}
#[doc = " \\brief op structure for cast to bv from float\n [FCAST_INT] `f_cast_int s rm x` returns an integer closest to x.\n [FCAST_SINT] `f_cast_sint s rm x` returns an integer closest to x."]
pub type RzILOpArgsFCastint = rz_il_op_args_float_cast_int_t;
#[doc = " \\brief op structure for cast to bv from float\n [FCAST_INT] `f_cast_int s rm x` returns an integer closest to x.\n [FCAST_SINT] `f_cast_sint s rm x` returns an integer closest to x."]
pub type RzILOpArgsFCastsint = rz_il_op_args_float_cast_int_t;
#[doc = " \\brief for cast to float from bv\n 'f Float.t Value.sort -> rmode -> 'a bitv -> 'f float\n [FCAST_FLOAT] `cast_float s rm x` is the closest to x floating-point number of sort x.\n \tnote that : The bitvector x is interpreted as an unsigned integer in the two-complement form.\n [FCAST_SFLOAT] `cast_sfloat s rm x` is the closest to x floating-point number of sort x.\n \tnote that : The bitvector x is interpreted as a signed integer in the two-complement form."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_float_cast_float_t {
    pub format: RzFloatFormat,
    pub mode: RzFloatRMode,
    pub bv: *mut RzILOpBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_float_cast_float_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_float_cast_float_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_float_cast_float_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_op_args_float_cast_float_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_float_cast_float_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_il_op_args_float_cast_float_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_cast_float_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_cast_float_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_cast_float_t),
            "::",
            stringify!(bv)
        )
    );
}
#[doc = " \\brief for cast to float from bv\n 'f Float.t Value.sort -> rmode -> 'a bitv -> 'f float\n [FCAST_FLOAT] `cast_float s rm x` is the closest to x floating-point number of sort x.\n \tnote that : The bitvector x is interpreted as an unsigned integer in the two-complement form.\n [FCAST_SFLOAT] `cast_sfloat s rm x` is the closest to x floating-point number of sort x.\n \tnote that : The bitvector x is interpreted as a signed integer in the two-complement form."]
pub type RzILOpArgsFCastfloat = rz_il_op_args_float_cast_float_t;
#[doc = " \\brief for cast to float from bv\n 'f Float.t Value.sort -> rmode -> 'a bitv -> 'f float\n [FCAST_FLOAT] `cast_float s rm x` is the closest to x floating-point number of sort x.\n \tnote that : The bitvector x is interpreted as an unsigned integer in the two-complement form.\n [FCAST_SFLOAT] `cast_sfloat s rm x` is the closest to x floating-point number of sort x.\n \tnote that : The bitvector x is interpreted as a signed integer in the two-complement form."]
pub type RzILOpArgsFCastsfloat = rz_il_op_args_float_cast_float_t;
#[doc = " \\brief convert between different float format\n 'f Float.t Value.sort -> rmode -> _ float -> 'f float\n [FCONVERT] `fconvert f r x` is the closest to x floating number in format f."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_float_fconvert_t {
    pub format: RzFloatFormat,
    pub mode: RzFloatRMode,
    pub f: *mut RzILOpFloat,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_float_fconvert_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_float_fconvert_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_float_fconvert_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_op_args_float_fconvert_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_float_fconvert_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_float_fconvert_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_fconvert_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_fconvert_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_fconvert_t),
            "::",
            stringify!(f)
        )
    );
}
#[doc = " \\brief convert between different float format\n 'f Float.t Value.sort -> rmode -> _ float -> 'f float\n [FCONVERT] `fconvert f r x` is the closest to x floating number in format f."]
pub type RzILOpArgsFconvert = rz_il_op_args_float_fconvert_t;
#[doc = " \\brief op structure of requal\n  rmode -> rmode -> bool\n requal x y holds if rounding modes are equal."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_float_requal_t {
    pub x: RzFloatRMode,
    pub y: RzFloatRMode,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_float_requal_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_float_requal_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_float_requal_t>(),
        8usize,
        concat!("Size of: ", stringify!(rz_il_op_args_float_requal_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_float_requal_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_float_requal_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_requal_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_requal_t),
            "::",
            stringify!(y)
        )
    );
}
#[doc = " \\brief op structure of requal\n  rmode -> rmode -> bool\n requal x y holds if rounding modes are equal."]
pub type RzILOpArgsFrequal = rz_il_op_args_float_requal_t;
#[doc = " \\brief op structure of binary op without rmode\n ('float -> 'flaat -> bool)\n forder x y holds if floating-point number x is less than y."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_float_binop_t {
    pub x: *mut RzILOpFloat,
    pub y: *mut RzILOpFloat,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_float_binop_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_float_binop_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_float_binop_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_op_args_float_binop_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_float_binop_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_float_binop_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_binop_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_binop_t),
            "::",
            stringify!(y)
        )
    );
}
#[doc = " \\brief op structure of binary op without rmode\n ('float -> 'flaat -> bool)\n forder x y holds if floating-point number x is less than y."]
pub type RzILOpArgsForder = rz_il_op_args_float_binop_t;
#[doc = " \\brief op structure for float operation (unary op with rmode)\n `rmode -> 'f float -> 'f float`\n [FROUND]\n [FSQRT] fsqrt m x returns the closest floating-point number to r, where r is such number that r*r is equal to x.\n [FRSQRT] reverse sqrt, rsqrt m x is the closest floating-point number to 1 / sqrt x."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_float_alg_unop_t {
    pub rmode: RzFloatRMode,
    pub f: *mut RzILOpFloat,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_float_alg_unop_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_float_alg_unop_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_float_alg_unop_t>(),
        16usize,
        concat!("Size of: ", stringify!(rz_il_op_args_float_alg_unop_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_float_alg_unop_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_float_alg_unop_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_alg_unop_t),
            "::",
            stringify!(rmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_alg_unop_t),
            "::",
            stringify!(f)
        )
    );
}
#[doc = " \\brief op structure for float operation (unary op with rmode)\n `rmode -> 'f float -> 'f float`\n [FROUND]\n [FSQRT] fsqrt m x returns the closest floating-point number to r, where r is such number that r*r is equal to x.\n [FRSQRT] reverse sqrt, rsqrt m x is the closest floating-point number to 1 / sqrt x."]
pub type RzILOpArgsFround = rz_il_op_args_float_alg_unop_t;
#[doc = " \\brief op structure for float operation (unary op with rmode)\n `rmode -> 'f float -> 'f float`\n [FROUND]\n [FSQRT] fsqrt m x returns the closest floating-point number to r, where r is such number that r*r is equal to x.\n [FRSQRT] reverse sqrt, rsqrt m x is the closest floating-point number to 1 / sqrt x."]
pub type RzILOpArgsFsqrt = rz_il_op_args_float_alg_unop_t;
#[doc = " \\brief op structure for float operation (unary op with rmode)\n `rmode -> 'f float -> 'f float`\n [FROUND]\n [FSQRT] fsqrt m x returns the closest floating-point number to r, where r is such number that r*r is equal to x.\n [FRSQRT] reverse sqrt, rsqrt m x is the closest floating-point number to 1 / sqrt x."]
pub type RzILOpArgsFrsqrt = rz_il_op_args_float_alg_unop_t;
#[doc = " \\brief op structure for float basic arithmetic operations (binary op with rmode)\n rmode -> 'f float -> 'f float -> 'f float\n [FADD]"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_float_alg_binop_t {
    pub rmode: RzFloatRMode,
    pub x: *mut RzILOpFloat,
    pub y: *mut RzILOpFloat,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_float_alg_binop_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_float_alg_binop_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_float_alg_binop_t>(),
        24usize,
        concat!("Size of: ", stringify!(rz_il_op_args_float_alg_binop_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_float_alg_binop_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_float_alg_binop_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_alg_binop_t),
            "::",
            stringify!(rmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_alg_binop_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_alg_binop_t),
            "::",
            stringify!(y)
        )
    );
}
#[doc = " \\brief op structure for float basic arithmetic operations (binary op with rmode)\n rmode -> 'f float -> 'f float -> 'f float\n [FADD]"]
pub type RzILOpArgsFadd = rz_il_op_args_float_alg_binop_t;
#[doc = " \\brief op structure for float basic arithmetic operations (binary op with rmode)\n rmode -> 'f float -> 'f float -> 'f float\n [FADD]"]
pub type RzILOpArgsFsub = rz_il_op_args_float_alg_binop_t;
#[doc = " \\brief op structure for float basic arithmetic operations (binary op with rmode)\n rmode -> 'f float -> 'f float -> 'f float\n [FADD]"]
pub type RzILOpArgsFmul = rz_il_op_args_float_alg_binop_t;
#[doc = " \\brief op structure for float basic arithmetic operations (binary op with rmode)\n rmode -> 'f float -> 'f float -> 'f float\n [FADD]"]
pub type RzILOpArgsFdiv = rz_il_op_args_float_alg_binop_t;
#[doc = " \\brief op structure for float basic arithmetic operations (binary op with rmode)\n rmode -> 'f float -> 'f float -> 'f float\n [FADD]"]
pub type RzILOpArgsFmod = rz_il_op_args_float_alg_binop_t;
#[doc = " \\brief op structure for float basic arithmetic operations (binary op with rmode)\n rmode -> 'f float -> 'f float -> 'f float\n [FADD]"]
pub type RzILOpArgsFhypot = rz_il_op_args_float_alg_binop_t;
#[doc = " \\brief op structure for float basic arithmetic operations (binary op with rmode)\n rmode -> 'f float -> 'f float -> 'f float\n [FADD]"]
pub type RzILOpArgsFpow = rz_il_op_args_float_alg_binop_t;
#[doc = " \\brief op structure of ternary op in float\n rmode -> 'f float -> 'f float -> 'f float -> 'f float"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_float_alg_terop_t {
    pub rmode: RzFloatRMode,
    pub x: *mut RzILOpFloat,
    pub y: *mut RzILOpFloat,
    pub z: *mut RzILOpFloat,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_float_alg_terop_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_float_alg_terop_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_float_alg_terop_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_il_op_args_float_alg_terop_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_float_alg_terop_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_args_float_alg_terop_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_alg_terop_t),
            "::",
            stringify!(rmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_alg_terop_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_alg_terop_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_alg_terop_t),
            "::",
            stringify!(z)
        )
    );
}
#[doc = " \\brief op structure of ternary op in float\n rmode -> 'f float -> 'f float -> 'f float -> 'f float"]
pub type RzILOpArgsFmad = rz_il_op_args_float_alg_terop_t;
#[doc = " \\brief op structure for some float binary op requiring `int`\n rmode -> 'f float -> 'a bitv -> 'f float"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rz_il_op_args_float_alg_hybrid_binop_t {
    pub rmode: RzFloatRMode,
    pub f: *mut RzILOpFloat,
    pub n: *mut RzILOpBitVector,
}
#[test]
fn bindgen_test_layout_rz_il_op_args_float_alg_hybrid_binop_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_args_float_alg_hybrid_binop_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_args_float_alg_hybrid_binop_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(rz_il_op_args_float_alg_hybrid_binop_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_args_float_alg_hybrid_binop_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rz_il_op_args_float_alg_hybrid_binop_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_alg_hybrid_binop_t),
            "::",
            stringify!(rmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_alg_hybrid_binop_t),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_args_float_alg_hybrid_binop_t),
            "::",
            stringify!(n)
        )
    );
}
#[doc = " \\brief op structure for some float binary op requiring `int`\n rmode -> 'f float -> 'a bitv -> 'f float"]
pub type RzILOpArgsFrootn = rz_il_op_args_float_alg_hybrid_binop_t;
#[doc = " \\brief op structure for some float binary op requiring `int`\n rmode -> 'f float -> 'a bitv -> 'f float"]
pub type RzILOpArgsFpown = rz_il_op_args_float_alg_hybrid_binop_t;
#[doc = " \\brief op structure for some float binary op requiring `int`\n rmode -> 'f float -> 'a bitv -> 'f float"]
pub type RzILOpArgsFcompound = rz_il_op_args_float_alg_hybrid_binop_t;
pub const RzILOpPureCode_RZ_IL_OP_VAR: RzILOpPureCode = 0;
pub const RzILOpPureCode_RZ_IL_OP_ITE: RzILOpPureCode = 1;
pub const RzILOpPureCode_RZ_IL_OP_LET: RzILOpPureCode = 2;
pub const RzILOpPureCode_RZ_IL_OP_B0: RzILOpPureCode = 3;
pub const RzILOpPureCode_RZ_IL_OP_B1: RzILOpPureCode = 4;
pub const RzILOpPureCode_RZ_IL_OP_INV: RzILOpPureCode = 5;
pub const RzILOpPureCode_RZ_IL_OP_AND: RzILOpPureCode = 6;
pub const RzILOpPureCode_RZ_IL_OP_OR: RzILOpPureCode = 7;
pub const RzILOpPureCode_RZ_IL_OP_XOR: RzILOpPureCode = 8;
pub const RzILOpPureCode_RZ_IL_OP_BITV: RzILOpPureCode = 9;
pub const RzILOpPureCode_RZ_IL_OP_MSB: RzILOpPureCode = 10;
pub const RzILOpPureCode_RZ_IL_OP_LSB: RzILOpPureCode = 11;
pub const RzILOpPureCode_RZ_IL_OP_IS_ZERO: RzILOpPureCode = 12;
pub const RzILOpPureCode_RZ_IL_OP_NEG: RzILOpPureCode = 13;
pub const RzILOpPureCode_RZ_IL_OP_LOGNOT: RzILOpPureCode = 14;
pub const RzILOpPureCode_RZ_IL_OP_ADD: RzILOpPureCode = 15;
pub const RzILOpPureCode_RZ_IL_OP_SUB: RzILOpPureCode = 16;
pub const RzILOpPureCode_RZ_IL_OP_MUL: RzILOpPureCode = 17;
pub const RzILOpPureCode_RZ_IL_OP_DIV: RzILOpPureCode = 18;
pub const RzILOpPureCode_RZ_IL_OP_SDIV: RzILOpPureCode = 19;
pub const RzILOpPureCode_RZ_IL_OP_MOD: RzILOpPureCode = 20;
pub const RzILOpPureCode_RZ_IL_OP_SMOD: RzILOpPureCode = 21;
pub const RzILOpPureCode_RZ_IL_OP_LOGAND: RzILOpPureCode = 22;
pub const RzILOpPureCode_RZ_IL_OP_LOGOR: RzILOpPureCode = 23;
pub const RzILOpPureCode_RZ_IL_OP_LOGXOR: RzILOpPureCode = 24;
pub const RzILOpPureCode_RZ_IL_OP_SHIFTR: RzILOpPureCode = 25;
pub const RzILOpPureCode_RZ_IL_OP_SHIFTL: RzILOpPureCode = 26;
pub const RzILOpPureCode_RZ_IL_OP_EQ: RzILOpPureCode = 27;
pub const RzILOpPureCode_RZ_IL_OP_SLE: RzILOpPureCode = 28;
pub const RzILOpPureCode_RZ_IL_OP_ULE: RzILOpPureCode = 29;
pub const RzILOpPureCode_RZ_IL_OP_CAST: RzILOpPureCode = 30;
pub const RzILOpPureCode_RZ_IL_OP_APPEND: RzILOpPureCode = 31;
pub const RzILOpPureCode_RZ_IL_OP_FLOAT: RzILOpPureCode = 32;
pub const RzILOpPureCode_RZ_IL_OP_FBITS: RzILOpPureCode = 33;
pub const RzILOpPureCode_RZ_IL_OP_IS_FINITE: RzILOpPureCode = 34;
pub const RzILOpPureCode_RZ_IL_OP_IS_NAN: RzILOpPureCode = 35;
pub const RzILOpPureCode_RZ_IL_OP_IS_INF: RzILOpPureCode = 36;
pub const RzILOpPureCode_RZ_IL_OP_IS_FZERO: RzILOpPureCode = 37;
pub const RzILOpPureCode_RZ_IL_OP_IS_FNEG: RzILOpPureCode = 38;
pub const RzILOpPureCode_RZ_IL_OP_IS_FPOS: RzILOpPureCode = 39;
pub const RzILOpPureCode_RZ_IL_OP_FNEG: RzILOpPureCode = 40;
pub const RzILOpPureCode_RZ_IL_OP_FABS: RzILOpPureCode = 41;
pub const RzILOpPureCode_RZ_IL_OP_FCAST_INT: RzILOpPureCode = 42;
pub const RzILOpPureCode_RZ_IL_OP_FCAST_SINT: RzILOpPureCode = 43;
pub const RzILOpPureCode_RZ_IL_OP_FCAST_FLOAT: RzILOpPureCode = 44;
pub const RzILOpPureCode_RZ_IL_OP_FCAST_SFLOAT: RzILOpPureCode = 45;
pub const RzILOpPureCode_RZ_IL_OP_FCONVERT: RzILOpPureCode = 46;
pub const RzILOpPureCode_RZ_IL_OP_FREQUAL: RzILOpPureCode = 47;
pub const RzILOpPureCode_RZ_IL_OP_FSUCC: RzILOpPureCode = 48;
pub const RzILOpPureCode_RZ_IL_OP_FPRED: RzILOpPureCode = 49;
pub const RzILOpPureCode_RZ_IL_OP_FORDER: RzILOpPureCode = 50;
pub const RzILOpPureCode_RZ_IL_OP_FROUND: RzILOpPureCode = 51;
pub const RzILOpPureCode_RZ_IL_OP_FSQRT: RzILOpPureCode = 52;
pub const RzILOpPureCode_RZ_IL_OP_FRSQRT: RzILOpPureCode = 53;
pub const RzILOpPureCode_RZ_IL_OP_FADD: RzILOpPureCode = 54;
pub const RzILOpPureCode_RZ_IL_OP_FSUB: RzILOpPureCode = 55;
pub const RzILOpPureCode_RZ_IL_OP_FMUL: RzILOpPureCode = 56;
pub const RzILOpPureCode_RZ_IL_OP_FDIV: RzILOpPureCode = 57;
pub const RzILOpPureCode_RZ_IL_OP_FMOD: RzILOpPureCode = 58;
pub const RzILOpPureCode_RZ_IL_OP_FHYPOT: RzILOpPureCode = 59;
pub const RzILOpPureCode_RZ_IL_OP_FPOW: RzILOpPureCode = 60;
pub const RzILOpPureCode_RZ_IL_OP_FMAD: RzILOpPureCode = 61;
pub const RzILOpPureCode_RZ_IL_OP_FROOTN: RzILOpPureCode = 62;
pub const RzILOpPureCode_RZ_IL_OP_FPOWN: RzILOpPureCode = 63;
pub const RzILOpPureCode_RZ_IL_OP_FCOMPOUND: RzILOpPureCode = 64;
pub const RzILOpPureCode_RZ_IL_OP_LOAD: RzILOpPureCode = 65;
pub const RzILOpPureCode_RZ_IL_OP_LOADW: RzILOpPureCode = 66;
pub const RzILOpPureCode_RZ_IL_OP_PURE_MAX: RzILOpPureCode = 67;
pub type RzILOpPureCode = ::std::os::raw::c_uint;
#[doc = " \\brief An IL op performing a pure computation, 'a pure\n\n BAP uses ocaml's type system for statically differentiating between different\n kinds of pure ops. Some ops however are polymorphic over all pure types,\n such as `ite : bool -> 'a pure -> 'a pure -> 'a pure`, which is not directly possible in C.\n So our pure ops are dynamically typed (only on the level of C, the IL is still fully statically typed)\n and we simply use typedefs like `RzILOpBool` and `RzILOpBitVector` to at least weakly indicate which concrete type is required."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rz_il_op_pure_t {
    pub code: RzILOpPureCode,
    pub op: rz_il_op_pure_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rz_il_op_pure_t__bindgen_ty_1 {
    pub ite: RzILOpArgsIte,
    pub var: RzILOpArgsVar,
    pub let_: RzILOpArgsLet,
    pub booland: RzILOpArgsBoolAnd,
    pub boolor: RzILOpArgsBoolOr,
    pub boolxor: RzILOpArgsBoolXor,
    pub boolinv: RzILOpArgsBoolInv,
    pub bitv: RzILOpArgsBv,
    pub msb: RzILOpArgsMsb,
    pub lsb: RzILOpArgsLsb,
    pub is_zero: RzILOpArgsIsZero,
    pub eq: RzILOpArgsEq,
    pub ule: RzILOpArgsUle,
    pub sle: RzILOpArgsSle,
    pub cast: RzILOpArgsCast,
    pub neg: RzILOpArgsNeg,
    pub lognot: RzILOpArgsLogNot,
    pub add: RzILOpArgsAdd,
    pub sub: RzILOpArgsSub,
    pub mul: RzILOpArgsMul,
    pub div: RzILOpArgsDiv,
    pub sdiv: RzILOpArgsSdiv,
    pub smod: RzILOpArgsSmod,
    pub mod_: RzILOpArgsMod,
    pub logand: RzILOpArgsLogand,
    pub logor: RzILOpArgsLogor,
    pub logxor: RzILOpArgsLogxor,
    pub shiftl: RzILOpArgsShiftLeft,
    pub shiftr: RzILOpArgsShiftRight,
    pub append: RzILOpArgsAppend,
    pub load: RzILOpArgsLoad,
    pub loadw: RzILOpArgsLoadW,
    pub float_: RzILOpArgsFloat,
    pub fbits: RzILOpArgsFbits,
    pub is_finite: RzILOpArgsIsFinite,
    pub is_nan: RzILOpArgsIsNan,
    pub is_inf: RzILOpArgsIsInf,
    pub is_fzero: RzILOpArgsIsFzero,
    pub is_fneg: RzILOpArgsIsFneg,
    pub is_fpos: RzILOpArgsIsFpos,
    pub fneg: RzILOpArgsFneg,
    pub fabs: RzILOpArgsFabs,
    pub fcast_int: RzILOpArgsFCastint,
    pub fcast_sint: RzILOpArgsFCastsint,
    pub fcast_float: RzILOpArgsFCastfloat,
    pub fcast_sfloat: RzILOpArgsFCastsfloat,
    pub fconvert: RzILOpArgsFconvert,
    pub frequal: RzILOpArgsFrequal,
    pub fsucc: RzILOpArgsFsucc,
    pub fpred: RzILOpArgsFpred,
    pub forder: RzILOpArgsForder,
    pub fround: RzILOpArgsFround,
    pub fsqrt: RzILOpArgsFsqrt,
    pub frsqrt: RzILOpArgsFrsqrt,
    pub fadd: RzILOpArgsFadd,
    pub fsub: RzILOpArgsFsub,
    pub fmul: RzILOpArgsFmul,
    pub fdiv: RzILOpArgsFdiv,
    pub fmod: RzILOpArgsFmod,
    pub fmad: RzILOpArgsFmad,
    pub fpow: RzILOpArgsFpow,
    pub fpown: RzILOpArgsFpown,
    pub frootn: RzILOpArgsFrootn,
    pub fcompound: RzILOpArgsFcompound,
    pub fhypot: RzILOpArgsFhypot,
}
#[test]
fn bindgen_test_layout_rz_il_op_pure_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_pure_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_pure_t__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(rz_il_op_pure_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_pure_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_pure_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(ite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).var) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).let_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(let_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).booland) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(booland)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boolor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(boolor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boolxor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(boolxor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boolinv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(boolinv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(bitv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(msb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lsb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(lsb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_zero) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(is_zero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(eq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ule) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(ule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(sle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cast) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(cast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).neg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(neg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lognot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(lognot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sub) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mul) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(mul)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).div) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(div)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdiv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(sdiv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smod) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(smod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mod_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(mod_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logand) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(logand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(logor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logxor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(logxor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shiftl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(shiftl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shiftr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(shiftr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).append) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(append)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(load)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(loadw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(float_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fbits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fbits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_finite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(is_finite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_nan) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(is_nan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_inf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(is_inf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_fzero) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(is_fzero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_fneg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(is_fneg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_fpos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(is_fpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fneg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fneg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fabs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fabs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcast_int) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fcast_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcast_sint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fcast_sint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcast_float) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fcast_float)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcast_sfloat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fcast_sfloat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fconvert) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fconvert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frequal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(frequal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsucc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fsucc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpred) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fpred)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forder) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(forder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fround) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fround)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsqrt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fsqrt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frsqrt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(frsqrt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fadd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fadd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsub) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fsub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fmul) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fmul)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fdiv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fdiv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fmod) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fmod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fmad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fmad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpow) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fpow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpown) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fpown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frootn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(frootn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcompound) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fcompound)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fhypot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t__bindgen_ty_1),
            "::",
            stringify!(fhypot)
        )
    );
}
#[test]
fn bindgen_test_layout_rz_il_op_pure_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_pure_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_pure_t>(),
        40usize,
        concat!("Size of: ", stringify!(rz_il_op_pure_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_pure_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_pure_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_pure_t),
            "::",
            stringify!(op)
        )
    );
}
extern "C" {
    pub fn rz_il_op_pure_free(op: *mut RzILOpPure);
}
extern "C" {
    pub fn rz_il_op_pure_dup(op: *mut RzILOpPure) -> *mut RzILOpPure;
}
extern "C" {
    pub fn rz_il_op_new_ite(
        condition: *mut RzILOpPure,
        x: *mut RzILOpPure,
        y: *mut RzILOpPure,
    ) -> *mut RzILOpPure;
}
extern "C" {
    pub fn rz_il_op_new_var(
        var: *const ::std::os::raw::c_char,
        kind: RzILVarKind,
    ) -> *mut RzILOpPure;
}
extern "C" {
    pub fn rz_il_op_new_let(
        name: *const ::std::os::raw::c_char,
        exp: *mut RzILOpPure,
        body: *mut RzILOpPure,
    ) -> *mut RzILOpPure;
}
extern "C" {
    pub fn rz_il_op_new_b0() -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_b1() -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_bool_and(x: *mut RzILOpBool, y: *mut RzILOpBool) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_bool_or(x: *mut RzILOpBool, y: *mut RzILOpBool) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_bool_xor(x: *mut RzILOpBool, y: *mut RzILOpBool) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_bool_inv(x: *mut RzILOpBool) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_bitv(value: *mut RzBitVector) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_bitv_from_ut64(
        length: ::std::os::raw::c_uint,
        number: ::std::os::raw::c_ulonglong,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_bitv_from_st64(
        length: ::std::os::raw::c_uint,
        number: ::std::os::raw::c_longlong,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_bitv_max(length: ::std::os::raw::c_uint) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_msb(val: *mut RzILOpPure) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_lsb(val: *mut RzILOpPure) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_is_zero(bv: *mut RzILOpPure) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_non_zero(bv: *mut RzILOpPure) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_eq(x: *mut RzILOpPure, y: *mut RzILOpPure) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_ule(x: *mut RzILOpPure, y: *mut RzILOpPure) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_sle(x: *mut RzILOpPure, y: *mut RzILOpPure) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_ult(x: *mut RzILOpPure, y: *mut RzILOpPure) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_slt(x: *mut RzILOpPure, y: *mut RzILOpPure) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_uge(x: *mut RzILOpPure, y: *mut RzILOpPure) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_sge(x: *mut RzILOpPure, y: *mut RzILOpPure) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_ugt(x: *mut RzILOpPure, y: *mut RzILOpPure) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_sgt(x: *mut RzILOpPure, y: *mut RzILOpPure) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_cast(
        length: ::std::os::raw::c_uint,
        fill: *mut RzILOpBool,
        val: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_unsigned(
        length: ::std::os::raw::c_uint,
        val: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_signed(
        length: ::std::os::raw::c_uint,
        val: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_neg(value: *mut RzILOpBitVector) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_log_not(value: *mut RzILOpBitVector) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_add(
        x: *mut RzILOpBitVector,
        y: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_sub(
        x: *mut RzILOpBitVector,
        y: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_mul(
        x: *mut RzILOpBitVector,
        y: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_div(
        x: *mut RzILOpBitVector,
        y: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_sdiv(
        x: *mut RzILOpBitVector,
        y: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_smod(
        x: *mut RzILOpBitVector,
        y: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_mod(
        x: *mut RzILOpBitVector,
        y: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_log_and(
        x: *mut RzILOpBitVector,
        y: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_log_or(
        x: *mut RzILOpBitVector,
        y: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_log_xor(
        x: *mut RzILOpBitVector,
        y: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_shiftl(
        fill_bit: *mut RzILOpBool,
        x: *mut RzILOpBitVector,
        sh: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_shiftr(
        fill_bit: *mut RzILOpBool,
        x: *mut RzILOpBitVector,
        sh: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_shiftr_arith(
        x: *mut RzILOpBitVector,
        y: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_append(
        high: *mut RzILOpBitVector,
        low: *mut RzILOpBitVector,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_load(mem: RzILMemIndex, key: *mut RzILOpBitVector) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_loadw(
        mem: RzILMemIndex,
        key: *mut RzILOpBitVector,
        n_bits: ::std::os::raw::c_uint,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_float(format: RzFloatFormat, bv: *mut RzILOpBitVector) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_float_from_f32(f: f32) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_float_from_f64(f: f64) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fbits(f: *mut RzILOpFloat) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_is_finite(f: *mut RzILOpFloat) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_is_nan(f: *mut RzILOpFloat) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_is_inf(f: *mut RzILOpFloat) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_is_fzero(f: *mut RzILOpFloat) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_is_fneg(f: *mut RzILOpFloat) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_is_fpos(f: *mut RzILOpFloat) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_fneg(f: *mut RzILOpFloat) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fabs(f: *mut RzILOpFloat) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fcast_int(
        length: ::std::os::raw::c_uint,
        mode: RzFloatRMode,
        f: *mut RzILOpFloat,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_fcast_sint(
        length: ::std::os::raw::c_uint,
        mode: RzFloatRMode,
        f: *mut RzILOpFloat,
    ) -> *mut RzILOpBitVector;
}
extern "C" {
    pub fn rz_il_op_new_fcast_float(
        format: RzFloatFormat,
        mode: RzFloatRMode,
        bv: *mut RzILOpBitVector,
    ) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fcast_sfloat(
        format: RzFloatFormat,
        mode: RzFloatRMode,
        bv: *mut RzILOpBitVector,
    ) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fconvert(
        format: RzFloatFormat,
        mode: RzFloatRMode,
        f: *mut RzILOpFloat,
    ) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_frequal(x: RzFloatRMode, y: RzFloatRMode) -> *mut RzILOpBool;
}
extern "C" {
    pub fn rz_il_op_new_fsucc(f: *mut RzILOpFloat) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fpred(f: *mut RzILOpFloat) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_forder(x: *mut RzILOpFloat, y: *mut RzILOpFloat) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fround(rmode: RzFloatRMode, f: *mut RzILOpFloat) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fsqrt(rmode: RzFloatRMode, f: *mut RzILOpFloat) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_frsqrt(rmode: RzFloatRMode, f: *mut RzILOpFloat) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fadd(
        rmode: RzFloatRMode,
        x: *mut RzILOpFloat,
        y: *mut RzILOpFloat,
    ) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fsub(
        rmode: RzFloatRMode,
        x: *mut RzILOpFloat,
        y: *mut RzILOpFloat,
    ) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fmul(
        rmode: RzFloatRMode,
        x: *mut RzILOpFloat,
        y: *mut RzILOpFloat,
    ) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fdiv(
        rmode: RzFloatRMode,
        x: *mut RzILOpFloat,
        y: *mut RzILOpFloat,
    ) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fmod(
        rmode: RzFloatRMode,
        x: *mut RzILOpFloat,
        y: *mut RzILOpFloat,
    ) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fhypot(
        rmode: RzFloatRMode,
        x: *mut RzILOpFloat,
        y: *mut RzILOpFloat,
    ) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fpow(
        rmode: RzFloatRMode,
        x: *mut RzILOpFloat,
        y: *mut RzILOpFloat,
    ) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fmad(
        rmode: RzFloatRMode,
        x: *mut RzILOpFloat,
        y: *mut RzILOpFloat,
        z: *mut RzILOpFloat,
    ) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_frootn(
        rmode: RzFloatRMode,
        x: *mut RzILOpFloat,
        n: *mut RzILOpBitVector,
    ) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fpown(
        rmode: RzFloatRMode,
        x: *mut RzILOpFloat,
        n: *mut RzILOpBitVector,
    ) -> *mut RzILOpFloat;
}
extern "C" {
    pub fn rz_il_op_new_fcompound(
        rmode: RzFloatRMode,
        x: *mut RzILOpFloat,
        n: *mut RzILOpBitVector,
    ) -> *mut RzILOpFloat;
}
pub const RzILOpEffectCode_RZ_IL_OP_STORE: RzILOpEffectCode = 0;
pub const RzILOpEffectCode_RZ_IL_OP_STOREW: RzILOpEffectCode = 1;
pub const RzILOpEffectCode_RZ_IL_OP_EMPTY: RzILOpEffectCode = 2;
pub const RzILOpEffectCode_RZ_IL_OP_NOP: RzILOpEffectCode = 3;
pub const RzILOpEffectCode_RZ_IL_OP_SET: RzILOpEffectCode = 4;
pub const RzILOpEffectCode_RZ_IL_OP_JMP: RzILOpEffectCode = 5;
pub const RzILOpEffectCode_RZ_IL_OP_GOTO: RzILOpEffectCode = 6;
pub const RzILOpEffectCode_RZ_IL_OP_SEQ: RzILOpEffectCode = 7;
pub const RzILOpEffectCode_RZ_IL_OP_BLK: RzILOpEffectCode = 8;
pub const RzILOpEffectCode_RZ_IL_OP_REPEAT: RzILOpEffectCode = 9;
pub const RzILOpEffectCode_RZ_IL_OP_BRANCH: RzILOpEffectCode = 10;
pub const RzILOpEffectCode_RZ_IL_OP_EFFECT_MAX: RzILOpEffectCode = 11;
pub type RzILOpEffectCode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rz_il_op_effect_t {
    pub code: RzILOpEffectCode,
    pub op: rz_il_op_effect_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rz_il_op_effect_t__bindgen_ty_1 {
    pub set: RzILOpArgsSet,
    pub jmp: RzILOpArgsJmp,
    pub goto_: RzILOpArgsGoto,
    pub seq: RzILOpArgsSeq,
    pub blk: RzILOpArgsBlk,
    pub repeat: RzILOpArgsRepeat,
    pub branch: RzILOpArgsBranch,
    pub store: RzILOpArgsStore,
    pub storew: RzILOpArgsStoreW,
}
#[test]
fn bindgen_test_layout_rz_il_op_effect_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_effect_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_effect_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(rz_il_op_effect_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_effect_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_effect_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_effect_t__bindgen_ty_1),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jmp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_effect_t__bindgen_ty_1),
            "::",
            stringify!(jmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).goto_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_effect_t__bindgen_ty_1),
            "::",
            stringify!(goto_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_effect_t__bindgen_ty_1),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blk) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_effect_t__bindgen_ty_1),
            "::",
            stringify!(blk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_effect_t__bindgen_ty_1),
            "::",
            stringify!(repeat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).branch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_effect_t__bindgen_ty_1),
            "::",
            stringify!(branch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).store) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_effect_t__bindgen_ty_1),
            "::",
            stringify!(store)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storew) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_effect_t__bindgen_ty_1),
            "::",
            stringify!(storew)
        )
    );
}
#[test]
fn bindgen_test_layout_rz_il_op_effect_t() {
    const UNINIT: ::std::mem::MaybeUninit<rz_il_op_effect_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rz_il_op_effect_t>(),
        32usize,
        concat!("Size of: ", stringify!(rz_il_op_effect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rz_il_op_effect_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rz_il_op_effect_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_effect_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rz_il_op_effect_t),
            "::",
            stringify!(op)
        )
    );
}
extern "C" {
    pub fn rz_il_op_effect_free(op: *mut RzILOpEffect);
}
extern "C" {
    pub fn rz_il_op_new_empty() -> *mut RzILOpEffect;
}
extern "C" {
    pub fn rz_il_op_new_nop() -> *mut RzILOpEffect;
}
extern "C" {
    pub fn rz_il_op_new_set(
        v: *const ::std::os::raw::c_char,
        is_local: bool,
        x: *mut RzILOpPure,
    ) -> *mut RzILOpEffect;
}
extern "C" {
    pub fn rz_il_op_new_jmp(dst: *mut RzILOpBitVector) -> *mut RzILOpEffect;
}
extern "C" {
    pub fn rz_il_op_new_goto(label: *const ::std::os::raw::c_char) -> *mut RzILOpEffect;
}
extern "C" {
    pub fn rz_il_op_new_seq(x: *mut RzILOpEffect, y: *mut RzILOpEffect) -> *mut RzILOpEffect;
}
extern "C" {
    pub fn rz_il_op_new_seqn(n: ::std::os::raw::c_uint, ...) -> *mut RzILOpEffect;
}
extern "C" {
    pub fn rz_il_op_new_blk(
        label: *const ::std::os::raw::c_char,
        data_effect: *mut RzILOpEffect,
        ctrl_effect: *mut RzILOpEffect,
    ) -> *mut RzILOpEffect;
}
extern "C" {
    pub fn rz_il_op_new_repeat(
        condition: *mut RzILOpBool,
        data_effect: *mut RzILOpEffect,
    ) -> *mut RzILOpEffect;
}
extern "C" {
    pub fn rz_il_op_new_branch(
        condition: *mut RzILOpBool,
        true_effect: *mut RzILOpEffect,
        false_effect: *mut RzILOpEffect,
    ) -> *mut RzILOpEffect;
}
extern "C" {
    pub fn rz_il_op_new_store(
        mem: RzILMemIndex,
        key: *mut RzILOpBitVector,
        value: *mut RzILOpBitVector,
    ) -> *mut RzILOpEffect;
}
extern "C" {
    pub fn rz_il_op_new_storew(
        mem: RzILMemIndex,
        key: *mut RzILOpBitVector,
        value: *mut RzILOpBitVector,
    ) -> *mut RzILOpEffect;
}
extern "C" {
    pub fn rz_il_op_pure_code_stringify(code: RzILOpPureCode) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rz_il_op_pure_stringify(op: *mut RzILOpPure, sb: *mut RzStrBuf);
}
extern "C" {
    pub fn rz_il_op_effect_stringify(op: *mut RzILOpEffect, sb: *mut RzStrBuf);
}
extern "C" {
    pub fn rz_il_op_pure_json(op: *mut RzILOpPure, pj: *mut PJ);
}
extern "C" {
    pub fn rz_il_op_effect_json(op: *mut RzILOpEffect, pj: *mut PJ);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_guts {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ptrace_wrap_instance_t {
    pub _address: u8,
}
